{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "ErrorState",
            "id": "class-ErrorState-e553ff648d08ed0c12e467870da5e6f479910b240e116baa6448bf7f2501d15c9aa7c287e7b51a50ef4875da93d4e5402a55049257b9f70b385e55737d8ecb2e",
            "file": "libs/form/src/lib/fields/field.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  NgModule,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  FormGroup,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n} from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInput, MatInputModule } from '@angular/material/input';\r\nimport { Observable, debounceTime, map, startWith } from 'rxjs';\r\n\r\n@NgModule({\r\n  exports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n  ],\r\n})\r\nexport class CommonFieldModule {}\r\n\r\nexport class ErrorState implements ErrorStateMatcher {\r\n  isErrorState(control: AbstractControl | null): boolean {\r\n    return control?.dirty && control.invalid ? true : false;\r\n  }\r\n}\r\n\r\n@Component({ template: '' })\r\nexport class BaseFieldComponent<T = any, InputRef = MatInput>\r\n  implements OnInit\r\n{\r\n  readonly errorState = new ErrorState();\r\n\r\n  /**\r\n   * Emits the input value when the update button is clicked.\r\n   */\r\n  @Output() updateEvent = new EventEmitter<T>();\r\n  /**\r\n   * Input referance\r\n   */\r\n  @ViewChild('input') inputRef!: InputRef;\r\n\r\n  /**\r\n   * FormControl name\r\n   */\r\n  @Input() inputName!: string;\r\n\r\n  /**\r\n   * Input type\r\n   */\r\n  @Input() inputType = 'text';\r\n\r\n  /**\r\n   * Is field requried?\r\n   */\r\n  @Input() required = false;\r\n  /**\r\n   * Label\r\n   */\r\n  @Input() label?: string;\r\n\r\n  /**\r\n   * Prefix icon\r\n   */\r\n  @Input() prefixIcon = 'info';\r\n  /**\r\n   * Suffix icon\r\n   */\r\n  @Input() suffixIcon?: string;\r\n\r\n  /**\r\n   * Field hint\r\n   */\r\n  @Input() hint?: string;\r\n\r\n  /**\r\n   * Is update form field\r\n   */\r\n  @Input() isUpdateField = false;\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  errors$!: Observable<string[]>;\r\n\r\n  iconColor$!: Observable<'primary' | 'accent' | 'warn'>;\r\n\r\n  constructor(public readonly formGroup: FormGroup) {}\r\n\r\n  ngOnInit(): void {\r\n    const control = this.formGroup.get(this.inputName);\r\n\r\n    if (control) {\r\n      this.errors$ = control.valueChanges.pipe(\r\n        startWith(''),\r\n        debounceTime(400),\r\n        map(() => {\r\n          if (control.touched && control.dirty) {\r\n            return Object.values(control.errors || {}).shift();\r\n          }\r\n          return null;\r\n        })\r\n      );\r\n\r\n      this.iconColor$ = this.errors$.pipe(\r\n        map((e) => {\r\n          if (control.touched) {\r\n            if (e) {\r\n              return 'warn';\r\n            }\r\n          }\r\n          return 'primary';\r\n        })\r\n      );\r\n    } else {\r\n      console.error(`Controller ${this.inputName} not found!`);\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    if ((this.inputRef as any)?.focus) {\r\n      (this.inputRef as any).focus();\r\n    }\r\n  }\r\n\r\n  updateField() {\r\n    const control = this.formGroup.get(this.inputName);\r\n    control?.markAllAsTouched();\r\n    control?.markAsDirty();\r\n    this.updateEvent.emit(control?.value);\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "isErrorState",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ErrorStateMatcher"
            ]
        },
        {
            "name": "InputValidator",
            "id": "class-InputValidator-9776c5bb58f88a9ea51320f03efc1ab390fe848fd2966d6ce6811c7909dd1f4a806319bf0a5572c90d2d9a33061f4c99f114e232e5ca2783150786a8ded9061a",
            "file": "libs/form/src/lib/form/validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ValidatorFn, ValidatorFn as Vfn } from '@angular/forms';\r\nimport {\r\n  isEAN,\r\n  isEmail,\r\n  isNotEmpty,\r\n  isPhoneNumber,\r\n  isStrongPassword,\r\n} from 'class-validator';\r\n\r\nexport class InputValidator {\r\n  private readonly validators: Vfn[] = [];\r\n  constructor(private readonly name: string) {}\r\n\r\n  private push(key: string, fn: ValidatorFn) {\r\n    this.validators.push(fn);\r\n  }\r\n\r\n  required(): InputValidator {\r\n    this.validators.push((c) =>\r\n      isNotEmpty(c.value) ? null : { required: `${this.name} is required!` }\r\n    );\r\n    return this;\r\n  }\r\n\r\n  min(v: number): InputValidator {\r\n    this.validators.push((control) =>\r\n      parseFloat(control.value) >= v\r\n        ? null\r\n        : { min: `${this.name} must be greater than or equal to ${v}!` }\r\n    );\r\n    return this;\r\n  }\r\n\r\n  max(v: number): InputValidator {\r\n    this.validators.push((control) =>\r\n      parseFloat(control.value) <= v\r\n        ? null\r\n        : { max: `${this.name} must be less than or equal to ${v}!` }\r\n    );\r\n    return this;\r\n  }\r\n\r\n  minlength(v: number): InputValidator {\r\n    this.validators.push((control) =>\r\n      control.value.length >= v\r\n        ? null\r\n        : { minlength: `${this.name} must be longer than ${v - 1} characters!` }\r\n    );\r\n\r\n    return this;\r\n  }\r\n\r\n  maxlength(v: number): InputValidator {\r\n    this.validators.push((control) =>\r\n      control.value.length <= v\r\n        ? null\r\n        : {\r\n            maxlength: `${this.name} must be shorter than ${v + 1} characters!`,\r\n          }\r\n    );\r\n    return this;\r\n  }\r\n\r\n  password(): InputValidator {\r\n    this.validators.push((c) =>\r\n      isStrongPassword(c.value)\r\n        ? null\r\n        : { password: `${this.name} is not strong enough!` }\r\n    );\r\n    return this;\r\n  }\r\n\r\n  isEmail(): InputValidator {\r\n    this.validators.push((c) =>\r\n      isEmail(c.value) ? null : { email: `${this.name} must be a valid email!` }\r\n    );\r\n    return this;\r\n  }\r\n\r\n  isPhone(): InputValidator {\r\n    this.validators.push((c) =>\r\n      isPhoneNumber(c.value)\r\n        ? null\r\n        : { phone: `${this.name} must be a valid phone number!` }\r\n    );\r\n    return this;\r\n  }\r\n\r\n  isEan(): InputValidator {\r\n    this.validators.push((c) =>\r\n      isEAN(c.value)\r\n        ? null\r\n        : { ean: `${this.name} must be a valid ean number!` }\r\n    );\r\n    return this;\r\n  }\r\n\r\n  build() {\r\n    return [...this.validators];\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "validators",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Vfn[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "build",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isEan",
                    "args": [],
                    "optional": false,
                    "returnType": "InputValidator",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "InputValidator",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isPhone",
                    "args": [],
                    "optional": false,
                    "returnType": "InputValidator",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "max",
                    "args": [
                        {
                            "name": "v",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "InputValidator",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "v",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "maxlength",
                    "args": [
                        {
                            "name": "v",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "InputValidator",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "v",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "min",
                    "args": [
                        {
                            "name": "v",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "InputValidator",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "v",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "minlength",
                    "args": [
                        {
                            "name": "v",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "InputValidator",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "v",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "password",
                    "args": [],
                    "optional": false,
                    "returnType": "InputValidator",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "push",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fn",
                            "type": "ValidatorFn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fn",
                            "type": "ValidatorFn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "required",
                    "args": [],
                    "optional": false,
                    "returnType": "InputValidator",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AutocompleteFieldComponent",
            "id": "component-AutocompleteFieldComponent-cbdfa17e39ce292407a28af35599af2698afed8ef1815a8932490cac1f4502e007b7af5b6cfe4c1094fc6b176dc911a39a53bed1ffa0833d7df5c1b8d2fa88cf",
            "file": "libs/form/src/lib/fields/autocomplete.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-autocomplete-field",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-form-field    style=\"width: 100%;\"\n    appearance=\"outline\"\n    [formGroup]=\"formGroup\"\n  >\n    <mat-label>{{ label }}</mat-label>\n    <input\n      #input\n      type=\"text\"\n      matInput\n      [formControl]=\"formControl\"\n      [matAutocomplete]=\"auto\"\n      [attr.data-testid]=\"inputName\"\n      [attr.aria-required]=\"required\"\n      [errorStateMatcher]=\"errorState\"\n    />\n\n    <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\">\n      @for (option of filteredOptions$ | async; track option) {\n      <mat-option\n        [value]=\"option.label\"\n        (onSelectionChange)=\"setValue(option)\"\n        [attr.data-testid]=\"option.label\"\n      >\n        {{ option.label }}\n      </mat-option>\n      }\n    </mat-autocomplete>\n\n    <mat-icon color=\"primary\" class=\"fill\" matIconPrefix *ngIf=\"prefixIcon\">\n      {{ prefixIcon }}\n    </mat-icon>\n\n    <mat-icon color=\"primary\" class=\"fill\" matIconSuffix *ngIf=\"suffixIcon\">\n      {{ suffixIcon }}\n    </mat-icon>\n\n    <button\n      matTextSuffix\n      mat-raised-button\n      color=\"primary\"\n      (click)=\"updateField()\"\n      *ngIf=\"isUpdateField\"\n    >\n      <mat-icon matIconPrefix>update</mat-icon>\n      <span> Update </span>\n    </button>\n\n    <mat-hint *ngIf=\"hint\">{{ hint }}</mat-hint>\n\n    <mat-error [@enter] [@leave]>\n      {{ errors$ | async }}\n    </mat-error>\n  </mat-form-field>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMultiple select\n",
                    "description": "<p>Multiple select</p>\n",
                    "line": 89,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "IOption[]",
                    "decorators": []
                },
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nField hint\n",
                    "description": "<p>Field hint</p>\n",
                    "line": 90,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFormControl name\n",
                    "description": "<p>FormControl name</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputType",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput type\n",
                    "description": "<p>Input type</p>\n",
                    "line": 67,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "isUpdateField",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form field\n",
                    "description": "<p>Is update form field</p>\n",
                    "line": 95,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel\n",
                    "description": "<p>Label</p>\n",
                    "line": 76,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "prefixIcon",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPrefix icon\n",
                    "description": "<p>Prefix icon</p>\n",
                    "line": 81,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs field requried?\n",
                    "description": "<p>Is field requried?</p>\n",
                    "line": 72,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "suffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSuffix icon\n",
                    "description": "<p>Suffix icon</p>\n",
                    "line": 85,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "updateEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the input value when the update button is clicked.\n",
                    "description": "<p>Emits the input value when the update button is clicked.</p>\n",
                    "line": 53,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "filteredOptions$",
                    "defaultValue": "this.formControl.valueChanges.pipe(\r\n    debounceTime(400),\r\n    startWith(''),\r\n\r\n    map((value) => {\r\n      return this.options\r\n        .filter((e) => {\r\n          return e.label.toLowerCase().includes(value.toLowerCase());\r\n        })\r\n        .slice(0, 5);\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IOption[]>",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "formControl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "errorState",
                    "defaultValue": "new ErrorState()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        125,
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "iconColor$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<\"primary\" | \"accent\" | \"warn\">",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputRef",
                    "optional": false,
                    "description": "<p>Input referance</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nInput referance\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "IOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "updateField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatAutocompleteModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { BaseFieldComponent, CommonFieldModule } from './field';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { IOption } from '@webpackages/model';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable, debounceTime, map, startWith } from 'rxjs';\r\nimport { ErrorAnimations } from './error-animations';\r\n\r\n@Component({\r\n  selector: 'wt-autocomplete-field',\r\n  imports: [CommonFieldModule, MatAutocompleteModule],\r\n  standalone: true,\r\n  template: `<mat-form-field\r\n    style=\"width: 100%;\"\r\n    appearance=\"outline\"\r\n    [formGroup]=\"formGroup\"\r\n  >\r\n    <mat-label>{{ label }}</mat-label>\r\n    <input\r\n      #input\r\n      type=\"text\"\r\n      matInput\r\n      [formControl]=\"formControl\"\r\n      [matAutocomplete]=\"auto\"\r\n      [attr.data-testid]=\"inputName\"\r\n      [attr.aria-required]=\"required\"\r\n      [errorStateMatcher]=\"errorState\"\r\n    />\r\n\r\n    <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\">\r\n      @for (option of filteredOptions$ | async; track option) {\r\n      <mat-option\r\n        [value]=\"option.label\"\r\n        (onSelectionChange)=\"setValue(option)\"\r\n        [attr.data-testid]=\"option.label\"\r\n      >\r\n        {{ option.label }}\r\n      </mat-option>\r\n      }\r\n    </mat-autocomplete>\r\n\r\n    <mat-icon color=\"primary\" class=\"fill\" matIconPrefix *ngIf=\"prefixIcon\">\r\n      {{ prefixIcon }}\r\n    </mat-icon>\r\n\r\n    <mat-icon color=\"primary\" class=\"fill\" matIconSuffix *ngIf=\"suffixIcon\">\r\n      {{ suffixIcon }}\r\n    </mat-icon>\r\n\r\n    <button\r\n      matTextSuffix\r\n      mat-raised-button\r\n      color=\"primary\"\r\n      (click)=\"updateField()\"\r\n      *ngIf=\"isUpdateField\"\r\n    >\r\n      <mat-icon matIconPrefix>update</mat-icon>\r\n      <span> Update </span>\r\n    </button>\r\n\r\n    <mat-hint *ngIf=\"hint\">{{ hint }}</mat-hint>\r\n\r\n    <mat-error [@enter] [@leave]>\r\n      {{ errors$ | async }}\r\n    </mat-error>\r\n  </mat-form-field>`,\r\n  animations: [...ErrorAnimations],\r\n})\r\nexport class AutocompleteFieldComponent extends BaseFieldComponent {\r\n  formControl = new FormControl();\r\n\r\n  @Input() options!: IOption[];\r\n\r\n  filteredOptions$: Observable<IOption[]> = this.formControl.valueChanges.pipe(\r\n    debounceTime(400),\r\n    startWith(''),\r\n\r\n    map((value) => {\r\n      return this.options\r\n        .filter((e) => {\r\n          return e.label.toLowerCase().includes(value.toLowerCase());\r\n        })\r\n        .slice(0, 5);\r\n    })\r\n  );\r\n  /**\r\n   * Multiple select\r\n   */\r\n  @Input() multiple: boolean = false;\r\n\r\n  setValue(event: IOption) {\r\n    this.formGroup.get(this.inputName)?.setValue(event);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "BaseFieldComponent"
            ]
        },
        {
            "name": "BaseFieldComponent",
            "id": "component-BaseFieldComponent-e553ff648d08ed0c12e467870da5e6f479910b240e116baa6448bf7f2501d15c9aa7c287e7b51a50ef4875da93d4e5402a55049257b9f70b385e55737d8ecb2e",
            "file": "libs/form/src/lib/fields/field.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nField hint\n",
                    "description": "<p>Field hint</p>\n",
                    "line": 90,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFormControl name\n",
                    "description": "<p>FormControl name</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputType",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput type\n",
                    "description": "<p>Input type</p>\n",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isUpdateField",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form field\n",
                    "description": "<p>Is update form field</p>\n",
                    "line": 95,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel\n",
                    "description": "<p>Label</p>\n",
                    "line": 76,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "prefixIcon",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPrefix icon\n",
                    "description": "<p>Prefix icon</p>\n",
                    "line": 81,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs field requried?\n",
                    "description": "<p>Is field requried?</p>\n",
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "suffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSuffix icon\n",
                    "description": "<p>Suffix icon</p>\n",
                    "line": 85,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "updateEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the input value when the update button is clicked.\n",
                    "description": "<p>Emits the input value when the update button is clicked.</p>\n",
                    "line": 53,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorState",
                    "defaultValue": "new ErrorState()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "iconColor$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<\"primary\" | \"accent\" | \"warn\">",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "inputRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputRef",
                    "optional": false,
                    "description": "<p>Input referance</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nInput referance\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  NgModule,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  FormGroup,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n} from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInput, MatInputModule } from '@angular/material/input';\r\nimport { Observable, debounceTime, map, startWith } from 'rxjs';\r\n\r\n@NgModule({\r\n  exports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n  ],\r\n})\r\nexport class CommonFieldModule {}\r\n\r\nexport class ErrorState implements ErrorStateMatcher {\r\n  isErrorState(control: AbstractControl | null): boolean {\r\n    return control?.dirty && control.invalid ? true : false;\r\n  }\r\n}\r\n\r\n@Component({ template: '' })\r\nexport class BaseFieldComponent<T = any, InputRef = MatInput>\r\n  implements OnInit\r\n{\r\n  readonly errorState = new ErrorState();\r\n\r\n  /**\r\n   * Emits the input value when the update button is clicked.\r\n   */\r\n  @Output() updateEvent = new EventEmitter<T>();\r\n  /**\r\n   * Input referance\r\n   */\r\n  @ViewChild('input') inputRef!: InputRef;\r\n\r\n  /**\r\n   * FormControl name\r\n   */\r\n  @Input() inputName!: string;\r\n\r\n  /**\r\n   * Input type\r\n   */\r\n  @Input() inputType = 'text';\r\n\r\n  /**\r\n   * Is field requried?\r\n   */\r\n  @Input() required = false;\r\n  /**\r\n   * Label\r\n   */\r\n  @Input() label?: string;\r\n\r\n  /**\r\n   * Prefix icon\r\n   */\r\n  @Input() prefixIcon = 'info';\r\n  /**\r\n   * Suffix icon\r\n   */\r\n  @Input() suffixIcon?: string;\r\n\r\n  /**\r\n   * Field hint\r\n   */\r\n  @Input() hint?: string;\r\n\r\n  /**\r\n   * Is update form field\r\n   */\r\n  @Input() isUpdateField = false;\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  errors$!: Observable<string[]>;\r\n\r\n  iconColor$!: Observable<'primary' | 'accent' | 'warn'>;\r\n\r\n  constructor(public readonly formGroup: FormGroup) {}\r\n\r\n  ngOnInit(): void {\r\n    const control = this.formGroup.get(this.inputName);\r\n\r\n    if (control) {\r\n      this.errors$ = control.valueChanges.pipe(\r\n        startWith(''),\r\n        debounceTime(400),\r\n        map(() => {\r\n          if (control.touched && control.dirty) {\r\n            return Object.values(control.errors || {}).shift();\r\n          }\r\n          return null;\r\n        })\r\n      );\r\n\r\n      this.iconColor$ = this.errors$.pipe(\r\n        map((e) => {\r\n          if (control.touched) {\r\n            if (e) {\r\n              return 'warn';\r\n            }\r\n          }\r\n          return 'primary';\r\n        })\r\n      );\r\n    } else {\r\n      console.error(`Controller ${this.inputName} not found!`);\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    if ((this.inputRef as any)?.focus) {\r\n      (this.inputRef as any).focus();\r\n    }\r\n  }\r\n\r\n  updateField() {\r\n    const control = this.formGroup.get(this.inputName);\r\n    control?.markAllAsTouched();\r\n    control?.markAsDirty();\r\n    this.updateEvent.emit(control?.value);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formGroup",
                        "type": "FormGroup",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 102,
                "jsdoctags": [
                    {
                        "name": "formGroup",
                        "type": "FormGroup",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "CheckboxFieldComponent",
            "id": "component-CheckboxFieldComponent-b7b4b4d38f541b21b0940a7502310b37649b5b3d54fc65c3cee64d070e2e287fe63e2e74546f7db931a7882121f44f1be66cbaaa6f22f105666715fee149697f",
            "file": "libs/form/src/lib/fields/checkbox.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-checkbox",
            "styleUrls": [],
            "styles": [],
            "template": "<div\n  style=\"display: flex; flex-direction: row; gap: 1em; align-items: center;\"\n  [formGroup]=\"formGroup\"\n>\n  <mat-icon *ngIf=\"prefixIcon\" color=\"primary\" class=\"fill\">\n    {{ prefixIcon }}\n  </mat-icon>\n  <mat-checkbox\n    matInput\n    [formControlName]=\"inputName\"\n    [attr.data-testid]=\"inputName\"\n  >\n    {{ label }}\n  </mat-checkbox>\n\n  <button\n    matTextSuffix\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"updateField()\"\n    *ngIf=\"isUpdateField\"\n  >\n    <mat-icon matIconPrefix>update</mat-icon>\n    <span> Update </span>\n  </button>\n\n  <mat-icon matIconSuffix *ngIf=\"suffixIcon\">{{ suffixIcon }}</mat-icon>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nField hint\n",
                    "description": "<p>Field hint</p>\n",
                    "line": 90,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFormControl name\n",
                    "description": "<p>FormControl name</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputType",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput type\n",
                    "description": "<p>Input type</p>\n",
                    "line": 67,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "isUpdateField",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form field\n",
                    "description": "<p>Is update form field</p>\n",
                    "line": 95,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel\n",
                    "description": "<p>Label</p>\n",
                    "line": 76,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "prefixIcon",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPrefix icon\n",
                    "description": "<p>Prefix icon</p>\n",
                    "line": 81,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs field requried?\n",
                    "description": "<p>Is field requried?</p>\n",
                    "line": 72,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "suffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSuffix icon\n",
                    "description": "<p>Suffix icon</p>\n",
                    "line": 85,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "updateEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the input value when the update button is clicked.\n",
                    "description": "<p>Emits the input value when the update button is clicked.</p>\n",
                    "line": 53,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorState",
                    "defaultValue": "new ErrorState()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        125,
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "iconColor$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<\"primary\" | \"accent\" | \"warn\">",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputRef",
                    "optional": false,
                    "description": "<p>Input referance</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nInput referance\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "updateField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { BaseFieldComponent, CommonFieldModule } from './field';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\n\r\n@Component({\r\n  selector: 'wt-checkbox',\r\n  standalone: true,\r\n  imports: [CommonFieldModule, MatCheckboxModule],\r\n  template: `\r\n    <div\r\n      style=\"display: flex; flex-direction: row; gap: 1em; align-items: center;\"\r\n      [formGroup]=\"formGroup\"\r\n    >\r\n      <mat-icon *ngIf=\"prefixIcon\" color=\"primary\" class=\"fill\">\r\n        {{ prefixIcon }}\r\n      </mat-icon>\r\n      <mat-checkbox\r\n        matInput\r\n        [formControlName]=\"inputName\"\r\n        [attr.data-testid]=\"inputName\"\r\n      >\r\n        {{ label }}\r\n      </mat-checkbox>\r\n\r\n      <button\r\n        matTextSuffix\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        (click)=\"updateField()\"\r\n        *ngIf=\"isUpdateField\"\r\n      >\r\n        <mat-icon matIconPrefix>update</mat-icon>\r\n        <span> Update </span>\r\n      </button>\r\n\r\n      <mat-icon matIconSuffix *ngIf=\"suffixIcon\">{{ suffixIcon }}</mat-icon>\r\n    </div>\r\n  `,\r\n})\r\nexport class CheckboxFieldComponent extends BaseFieldComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "BaseFieldComponent"
            ]
        },
        {
            "name": "DateFieldComponent",
            "id": "component-DateFieldComponent-b0d92233a6733dd062a36b4c3b2be2dfe142f357e750a90ba81af9abcd85ade2fbbef25652df58f42cf52cd13b1cba5a95f5c3ad45398f3256d32fb3aa5d0035",
            "file": "libs/form/src/lib/fields/date.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-date-field",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-form-field   style=\"width: 100%;\"\n   appearance=\"outline\"\n   [formGroup]=\"formGroup\"\n >\n   <mat-label>{{ label }}</mat-label>\n   <input\n     matInput\n     [matDatepicker]=\"picker\"\n     [formControlName]=\"inputName\"\n     [attr.data-test-id]=\"inputName\"\n     [attr.aria-required]=\"required\"\n   />\n   <mat-icon\n     [color]=\"iconColor$ | async\"\n     class=\"fill\"\n     matIconPrefix\n     *ngIf=\"prefixIcon\"\n   >\n     {{ prefixIcon }}\n   </mat-icon>\n   <mat-icon\n     [color]=\"iconColor$ | async\"\n     class=\"fill\"\n     matIconSuffix\n     *ngIf=\"suffixIcon\"\n   >\n     {{ suffixIcon }}\n   </mat-icon>\n\n   <mat-hint>MM/DD/YYYY</mat-hint>\n   <mat-error [@enter] [@leave]>\n     {{ errors$ | async }}\n   </mat-error>\n\n   <mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\n   <mat-datepicker #picker></mat-datepicker>\n\n   <button\n     matTextSuffix\n     mat-raised-button\n     color=\"primary\"\n     (click)=\"updateField()\"\n     *ngIf=\"isUpdateField\"\n   >\n     <mat-icon matIconPrefix>update</mat-icon>\n     <span> Update </span>\n   </button>\n </mat-form-field>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nField hint\n",
                    "description": "<p>Field hint</p>\n",
                    "line": 90,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFormControl name\n",
                    "description": "<p>FormControl name</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputType",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput type\n",
                    "description": "<p>Input type</p>\n",
                    "line": 67,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "isUpdateField",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form field\n",
                    "description": "<p>Is update form field</p>\n",
                    "line": 95,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel\n",
                    "description": "<p>Label</p>\n",
                    "line": 76,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "prefixIcon",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPrefix icon\n",
                    "description": "<p>Prefix icon</p>\n",
                    "line": 81,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs field requried?\n",
                    "description": "<p>Is field requried?</p>\n",
                    "line": 72,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "suffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSuffix icon\n",
                    "description": "<p>Suffix icon</p>\n",
                    "line": 85,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "updateEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the input value when the update button is clicked.\n",
                    "description": "<p>Emits the input value when the update button is clicked.</p>\n",
                    "line": 53,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorState",
                    "defaultValue": "new ErrorState()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        125,
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "iconColor$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<\"primary\" | \"accent\" | \"warn\">",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputRef",
                    "optional": false,
                    "description": "<p>Input referance</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nInput referance\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "updateField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatNativeDateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { BaseFieldComponent, CommonFieldModule } from './field';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\n\r\n@Component({\r\n  selector: 'wt-date-field',\r\n  standalone: true,\r\n  imports: [CommonFieldModule, MatDatepickerModule, MatNativeDateModule],\r\n  template: ` <mat-form-field\r\n    style=\"width: 100%;\"\r\n    appearance=\"outline\"\r\n    [formGroup]=\"formGroup\"\r\n  >\r\n    <mat-label>{{ label }}</mat-label>\r\n    <input\r\n      matInput\r\n      [matDatepicker]=\"picker\"\r\n      [formControlName]=\"inputName\"\r\n      [attr.data-test-id]=\"inputName\"\r\n      [attr.aria-required]=\"required\"\r\n    />\r\n    <mat-icon\r\n      [color]=\"iconColor$ | async\"\r\n      class=\"fill\"\r\n      matIconPrefix\r\n      *ngIf=\"prefixIcon\"\r\n    >\r\n      {{ prefixIcon }}\r\n    </mat-icon>\r\n    <mat-icon\r\n      [color]=\"iconColor$ | async\"\r\n      class=\"fill\"\r\n      matIconSuffix\r\n      *ngIf=\"suffixIcon\"\r\n    >\r\n      {{ suffixIcon }}\r\n    </mat-icon>\r\n\r\n    <mat-hint>MM/DD/YYYY</mat-hint>\r\n    <mat-error [@enter] [@leave]>\r\n      {{ errors$ | async }}\r\n    </mat-error>\r\n\r\n    <mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n    <mat-datepicker #picker></mat-datepicker>\r\n\r\n    <button\r\n      matTextSuffix\r\n      mat-raised-button\r\n      color=\"primary\"\r\n      (click)=\"updateField()\"\r\n      *ngIf=\"isUpdateField\"\r\n    >\r\n      <mat-icon matIconPrefix>update</mat-icon>\r\n      <span> Update </span>\r\n    </button>\r\n  </mat-form-field>`,\r\n})\r\nexport class DateFieldComponent extends BaseFieldComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "BaseFieldComponent"
            ]
        },
        {
            "name": "ForgotPasswordFormComponent",
            "id": "component-ForgotPasswordFormComponent-849c640b5feb0123a4f114b583dc43d82faac8a110e926294f9616ba0a5b92259585c7044d139e33786d948d5d20da266f22ac51346663a5ac3e341459bf7210",
            "file": "libs/form/src/lib/auth/forgot-password.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: FormGroup, useValue: new FormGroup({\n        username: new FormControl(, new InputValidator().required().isEmail().build()),\n    }),\n}",
                    "ns": "{\n    provide: FormGroup, useValue: new FormGroup({\n        username: new FormControl(, new InputValidator()"
                }
            ],
            "selector": "wt-forgot-password-form",
            "styleUrls": [],
            "styles": [],
            "template": "<wt-form\n  (submitEvent)=\"submitForm()\"\n  [formTitle]=\"formTitle\"\n  [submitLabel]=\"submitLabel\"\n>\n  <wt-text-field\n    #username\n    inputName=\"username\"\n    [required]=\"true\"\n    inputType=\"email\"\n    label=\"Username\"\n    prefixIcon=\"email\"\n  ></wt-text-field>\n</wt-form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "subTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubscription type options\n",
                    "description": "<p>Subscription type options</p>\n",
                    "line": 58,
                    "type": "IOption[]",
                    "decorators": []
                },
                {
                    "name": "formTitle",
                    "defaultValue": "'Form Title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nForm title\n",
                    "description": "<p>Form title</p>\n",
                    "line": 80,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "isUpdateForm",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form? If it is an update form, an update button is placed next to each input element.\n",
                    "description": "<p>Is update form? If it is an update form, an update button is placed next to each input element.</p>\n",
                    "line": 90,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "submitLabel",
                    "defaultValue": "'Submit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubmit button label\n",
                    "description": "<p>Submit button label</p>\n",
                    "line": 85,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "submitEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit when user click submit button\n",
                    "description": "<p>Emit when user click submit button</p>\n",
                    "line": 95,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "formTitle",
                    "defaultValue": "'Forgot Password'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        164
                    ]
                },
                {
                    "name": "submitLabel",
                    "defaultValue": "'Send Recovery Email'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        164
                    ]
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseFieldComponent",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'username'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>Form group</p>\n",
                    "line": 102,
                    "rawdescription": "\n\nForm group\n",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "isSubmitted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "focusUserName",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "submitForm",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormComponent",
                    "type": "component"
                },
                {
                    "name": "TextFieldComponent",
                    "type": "component"
                },
                {
                    "name": "PasswordFieldComponent",
                    "type": "component"
                },
                {
                    "name": "AutocompleteFieldComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild } from '@angular/core';\r\nimport { FormComponent, InputValidator } from '../form';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { BaseFieldComponent, TextFieldComponent } from '../fields';\r\nimport { PasswordFieldComponent } from '../fields/password';\r\nimport { ICreateSubDto, IID, IOption } from '@webpackages/model';\r\nimport { AutocompleteFieldComponent } from '../fields/autocomplete';\r\n\r\n@Component({\r\n  imports: [\r\n    FormComponent,\r\n    TextFieldComponent,\r\n    PasswordFieldComponent,\r\n    AutocompleteFieldComponent,\r\n  ],\r\n  standalone: true,\r\n  selector: 'wt-forgot-password-form',\r\n  template: `\r\n    <wt-form\r\n      (submitEvent)=\"submitForm()\"\r\n      [formTitle]=\"formTitle\"\r\n      [submitLabel]=\"submitLabel\"\r\n    >\r\n      <wt-text-field\r\n        #username\r\n        inputName=\"username\"\r\n        [required]=\"true\"\r\n        inputType=\"email\"\r\n        label=\"Username\"\r\n        prefixIcon=\"email\"\r\n      ></wt-text-field>\r\n    </wt-form>\r\n  `,\r\n  providers: [\r\n    {\r\n      provide: FormGroup,\r\n      useValue: new FormGroup({\r\n        username: new FormControl(\r\n          '',\r\n          new InputValidator('username').required().isEmail().build()\r\n        ),\r\n      }),\r\n    },\r\n  ],\r\n})\r\nexport class ForgotPasswordFormComponent extends FormComponent<\r\n  ICreateSubDto<IID>\r\n> {\r\n  @ViewChild('username') username!: BaseFieldComponent;\r\n\r\n  override formTitle: string = 'Forgot Password';\r\n\r\n  override submitLabel = 'Send Recovery Email';\r\n\r\n  /**\r\n   * Subscription type options\r\n   */\r\n  @Input() subTypes!: IOption[];\r\n\r\n  focusUserName() {\r\n    this.username.focus();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "FormComponent"
            ]
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-8361297838ce9730a76ba6b8fa77d26017cd53d7270d0cc60d72e98cc2689681fd8a726d1ac1b7c84516e77097ff3fe990ad49c6ec8dea4e0ff4a82fe7c6f4cf",
            "file": "libs/form/src/lib/form/form.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-form",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-card>\n  <mat-card-header>\n    <mat-card-title>\n      <h1>{{ formTitle }}</h1>\n    </mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n    <form\n      style=\"display: flex; flex-direction: column; gap: 1em;  width: 100%;\"\n      #form=\"ngForm\"\n      novalidate\n      [formGroup]=\"formGroup\"\n    >\n      <ng-content></ng-content>\n    </form>\n  </mat-card-content>\n\n  <mat-card-actions>\n    <div style=\"display: flex; flex-direction: row; gap: 1em;\">\n      <button\n        mat-raised-button\n        color=\"primary\"\n        type=\"button\"\n        (click)=\"submitForm()\"\n        [disabled]=\"formGroup.invalid\"\n        [attr.data-testid]=\"submitLabel\"\n      >\n        {{ submitLabel }}\n      </button>\n      <button\n        mat-raised-button\n        (click)=\"resetForm()\"\n        type=\"button\"\n        [attr.data-testid]=\"'Reset'\"\n      >\n        Reset\n      </button>\n    </div>\n  </mat-card-actions>\n</mat-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "formTitle",
                    "defaultValue": "'Form Title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nForm title\n",
                    "description": "<p>Form title</p>\n",
                    "line": 80,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isUpdateForm",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form? If it is an update form, an update button is placed next to each input element.\n",
                    "description": "<p>Is update form? If it is an update form, an update button is placed next to each input element.</p>\n",
                    "line": 90,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "submitLabel",
                    "defaultValue": "'Submit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubmit button label\n",
                    "description": "<p>Submit button label</p>\n",
                    "line": 85,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "submitEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit when user click submit button\n",
                    "description": "<p>Emit when user click submit button</p>\n",
                    "line": 95,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>Form group</p>\n",
                    "line": 102,
                    "rawdescription": "\n\nForm group\n"
                },
                {
                    "name": "isSubmitted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                }
            ],
            "methodsClass": [
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitForm",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonFormModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  NgModule,\r\n  Output,\r\n} from '@angular/core';\r\nimport { FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\n\r\n@NgModule({\r\n  exports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n  ],\r\n})\r\nexport class CommonFormModule {}\r\n\r\n@Component({\r\n  selector: 'wt-form',\r\n  standalone: true,\r\n  imports: [CommonFormModule],\r\n  styleUrl: './form.style.scss',\r\n  template: `\r\n    <mat-card>\r\n      <mat-card-header>\r\n        <mat-card-title>\r\n          <h1>{{ formTitle }}</h1>\r\n        </mat-card-title>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <form\r\n          style=\"display: flex; flex-direction: column; gap: 1em;  width: 100%;\"\r\n          #form=\"ngForm\"\r\n          novalidate\r\n          [formGroup]=\"formGroup\"\r\n        >\r\n          <ng-content></ng-content>\r\n        </form>\r\n      </mat-card-content>\r\n\r\n      <mat-card-actions>\r\n        <div style=\"display: flex; flex-direction: row; gap: 1em;\">\r\n          <button\r\n            mat-raised-button\r\n            color=\"primary\"\r\n            type=\"button\"\r\n            (click)=\"submitForm()\"\r\n            [disabled]=\"formGroup.invalid\"\r\n            [attr.data-testid]=\"submitLabel\"\r\n          >\r\n            {{ submitLabel }}\r\n          </button>\r\n          <button\r\n            mat-raised-button\r\n            (click)=\"resetForm()\"\r\n            type=\"button\"\r\n            [attr.data-testid]=\"'Reset'\"\r\n          >\r\n            Reset\r\n          </button>\r\n        </div>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  `,\r\n})\r\nexport class FormComponent<T = any> {\r\n  /**\r\n   * Form title\r\n   */\r\n  @Input() formTitle = 'Form Title';\r\n\r\n  /**\r\n   * Submit button label\r\n   */\r\n  @Input() submitLabel = 'Submit';\r\n\r\n  /**\r\n   * Is update form? If it is an update form, an update button is placed next to each input element.\r\n   */\r\n  @Input() isUpdateForm: boolean = false;\r\n\r\n  /**\r\n   * Emit when user click submit button\r\n   */\r\n  @Output() submitEvent = new EventEmitter<T>();\r\n\r\n  isSubmitted$ = new BehaviorSubject(false);\r\n\r\n  /**\r\n   * Form group\r\n   */\r\n  formGroup!: FormGroup;\r\n\r\n  constructor(formGroup: FormGroup) {\r\n    this.formGroup = formGroup;\r\n  }\r\n\r\n  submitForm(value?: T) {\r\n    this.isSubmitted$.next(true);\r\n    this.submitEvent.emit(value ?? this.formGroup.value);\r\n  }\r\n\r\n  resetForm() {\r\n    this.isSubmitted$.next(false);\r\n    this.formGroup.reset();\r\n  }\r\n}\r\n",
            "styleUrl": "./form.style.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formGroup",
                        "type": "FormGroup",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 102,
                "jsdoctags": [
                    {
                        "name": "formGroup",
                        "type": "FormGroup",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "ListSelectComponent",
            "id": "component-ListSelectComponent-2322b5277a1660336c9bb62063b38897a37de6f2e716962ee8b02d4188775814c4ba2bb08c9d622f3733ad6bccbeb3de63e24b5bc03e4298ae7b7d74e3b4dd14",
            "file": "libs/form/src/lib/fields/list-select.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-list-select-field",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-card style=\"width: 100%;\">\n  <mat-card-header>\n    <mat-card-title>\n      <h2>{{ label }}</h2>\n    </mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n    <mat-checkbox\n      #selectAll\n      (change)=\"toggleSelectAll($event)\"\n      [checked]=\"allSelected()\"\n      [indeterminate]=\"someSelect()\"\n    >\n      {{ selectAll.checked ? 'Deselect All' : 'Select All' }}\n    </mat-checkbox>\n\n    <div [formGroup]=\"formGroup\">\n      <mat-selection-list\n        #input\n        [formControlName]=\"inputName\"\n        [attr.data-testid]=\"inputName\"\n      >\n        <div style=\"display: flex; flex-direction: row; gap: 1em;\">\n          @for (item of items; track item) {\n          <section>\n            <h1 *ngIf=\"item.subs\">{{ item.label }}</h1>\n            @if(item.subs) { @for(subItem of item.subs; track subItem){\n            <mat-list-option\n              [value]=\"subItem\"\n              checkboxPosition=\"before\"\n              [attr.data-testid]=\"subItem.label + item.label\"\n              [selected]=\"isSelected(subItem)\"\n            >\n              <span>{{ subItem.label }}</span>\n            </mat-list-option>\n\n            } } @else {\n\n            <mat-list-option\n              [value]=\"item\"\n              checkboxPosition=\"before\"\n              [attr.data-testid]=\"item.label\"\n              [selected]=\"isSelected(item)\"\n            >\n              <span> {{ item.label }} </span>\n            </mat-list-option>\n            }\n          </section>\n          }\n        </div>\n      </mat-selection-list>\n    </div>\n  </mat-card-content>\n  <mat-card-actions>\n    <button\n      matTextSuffix\n      mat-raised-button\n      color=\"primary\"\n      (click)=\"updateField()\"\n      *ngIf=\"isUpdateField\"\n    >\n      <mat-icon matIconPrefix>update</mat-icon>\n      <span> Update </span>\n    </button>\n  </mat-card-actions>\n</mat-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "IOption[]",
                    "decorators": []
                },
                {
                    "name": "selectedItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "Pick<IOption, id>[]",
                    "decorators": []
                },
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nField hint\n",
                    "description": "<p>Field hint</p>\n",
                    "line": 90,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFormControl name\n",
                    "description": "<p>FormControl name</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputType",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput type\n",
                    "description": "<p>Input type</p>\n",
                    "line": 67,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "isUpdateField",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form field\n",
                    "description": "<p>Is update form field</p>\n",
                    "line": 95,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel\n",
                    "description": "<p>Label</p>\n",
                    "line": 76,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "prefixIcon",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPrefix icon\n",
                    "description": "<p>Prefix icon</p>\n",
                    "line": 81,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs field requried?\n",
                    "description": "<p>Is field requried?</p>\n",
                    "line": 72,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "suffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSuffix icon\n",
                    "description": "<p>Suffix icon</p>\n",
                    "line": 85,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "updateEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the input value when the update button is clicked.\n",
                    "description": "<p>Emits the input value when the update button is clicked.</p>\n",
                    "line": 53,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorState",
                    "defaultValue": "new ErrorState()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        125,
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "iconColor$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<\"primary\" | \"accent\" | \"warn\">",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputRef",
                    "optional": false,
                    "description": "<p>Input referance</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nInput referance\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "allSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getValues",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "item",
                            "type": "IOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "IOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "itemsLength",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "someSelect",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSelectAll",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "valuesLength",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "updateField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatListModule",
                    "type": "module"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { BaseFieldComponent, CommonFieldModule } from './field';\r\nimport { MatListModule, MatSelectionList } from '@angular/material/list';\r\nimport { IOption } from '@webpackages/model';\r\nimport {\r\n  MatCheckboxChange,\r\n  MatCheckboxModule,\r\n} from '@angular/material/checkbox';\r\nimport { MatCardModule } from '@angular/material/card';\r\n\r\n@Component({\r\n  standalone: true,\r\n  imports: [CommonFieldModule, MatListModule, MatCheckboxModule, MatCardModule],\r\n  selector: 'wt-list-select-field',\r\n  template: `\r\n    <mat-card style=\"width: 100%;\">\r\n      <mat-card-header>\r\n        <mat-card-title>\r\n          <h2>{{ label }}</h2>\r\n        </mat-card-title>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <mat-checkbox\r\n          #selectAll\r\n          (change)=\"toggleSelectAll($event)\"\r\n          [checked]=\"allSelected()\"\r\n          [indeterminate]=\"someSelect()\"\r\n        >\r\n          {{ selectAll.checked ? 'Deselect All' : 'Select All' }}\r\n        </mat-checkbox>\r\n\r\n        <div [formGroup]=\"formGroup\">\r\n          <mat-selection-list\r\n            #input\r\n            [formControlName]=\"inputName\"\r\n            [attr.data-testid]=\"inputName\"\r\n          >\r\n            <div style=\"display: flex; flex-direction: row; gap: 1em;\">\r\n              @for (item of items; track item) {\r\n              <section>\r\n                <h1 *ngIf=\"item.subs\">{{ item.label }}</h1>\r\n                @if(item.subs) { @for(subItem of item.subs; track subItem){\r\n                <mat-list-option\r\n                  [value]=\"subItem\"\r\n                  checkboxPosition=\"before\"\r\n                  [attr.data-testid]=\"subItem.label + item.label\"\r\n                  [selected]=\"isSelected(subItem)\"\r\n                >\r\n                  <span>{{ subItem.label }}</span>\r\n                </mat-list-option>\r\n\r\n                } } @else {\r\n\r\n                <mat-list-option\r\n                  [value]=\"item\"\r\n                  checkboxPosition=\"before\"\r\n                  [attr.data-testid]=\"item.label\"\r\n                  [selected]=\"isSelected(item)\"\r\n                >\r\n                  <span> {{ item.label }} </span>\r\n                </mat-list-option>\r\n                }\r\n              </section>\r\n              }\r\n            </div>\r\n          </mat-selection-list>\r\n        </div>\r\n      </mat-card-content>\r\n      <mat-card-actions>\r\n        <button\r\n          matTextSuffix\r\n          mat-raised-button\r\n          color=\"primary\"\r\n          (click)=\"updateField()\"\r\n          *ngIf=\"isUpdateField\"\r\n        >\r\n          <mat-icon matIconPrefix>update</mat-icon>\r\n          <span> Update </span>\r\n        </button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  `,\r\n})\r\nexport class ListSelectComponent extends BaseFieldComponent<\r\n  IOption[],\r\n  MatSelectionList\r\n> {\r\n  @Input() selectedItems?: Pick<IOption, 'id'>[];\r\n\r\n  @Input() items!: IOption[];\r\n\r\n  toggleSelectAll(event: MatCheckboxChange) {\r\n    if (event.checked) {\r\n      this.inputRef.selectAll();\r\n    } else {\r\n      this.inputRef.deselectAll();\r\n    }\r\n  }\r\n\r\n  getValues() {\r\n    return this.inputRef?.selectedOptions?.selected?.map((e) => e.value) || [];\r\n  }\r\n\r\n  itemsLength() {\r\n    return (\r\n      this.items?.map((e) => e.subs?.length || 1).reduce((p, c) => p + c) || 0\r\n    );\r\n  }\r\n\r\n  valuesLength() {\r\n    return this.getValues().length;\r\n  }\r\n\r\n  someSelect() {\r\n    const selectedLength = this.valuesLength();\r\n\r\n    if (selectedLength > 0) {\r\n      return this.itemsLength() > this.valuesLength();\r\n    }\r\n    return false;\r\n  }\r\n\r\n  allSelected() {\r\n    return this.itemsLength() == this.valuesLength();\r\n  }\r\n\r\n  isSelected(item: IOption) {\r\n    return this.selectedItems?.find((e) => item.id == e.id) ? true : false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "BaseFieldComponent"
            ]
        },
        {
            "name": "LoginFormComponent",
            "id": "component-LoginFormComponent-9ce52bc45b81b55bf85060a91ce1da8b7ac303a889bc93cf7fc79dc47fa9cbd8fd3adafa8b7d3e7b2000f20987d8d709edfd499f4462a804ab0227f24baf9a9e",
            "file": "libs/form/src/lib/auth/login.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: FormGroup, useValue: LoginFormGroup,\n}"
                }
            ],
            "selector": "wt-login-form",
            "styleUrls": [],
            "styles": [],
            "template": "<wt-form\n  [formTitle]=\"formTitle\"\n  [submitLabel]=\"submitLabel\"\n  (submitEvent)=\"submitForm()\"\n>\n  <wt-text-field\n    #username\n    inputName=\"username\"\n    [required]=\"true\"\n    inputType=\"email\"\n    label=\"Username\"\n    prefixIcon=\"email\"\n  ></wt-text-field>\n  <wt-password-field\n    #password\n    inputName=\"password\"\n    [required]=\"true\"\n    label=\"Password\"\n    prefixIcon=\"password\"\n  ></wt-password-field>\n</wt-form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "formTitle",
                    "defaultValue": "'Form Title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nForm title\n",
                    "description": "<p>Form title</p>\n",
                    "line": 80,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "isUpdateForm",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form? If it is an update form, an update button is placed next to each input element.\n",
                    "description": "<p>Is update form? If it is an update form, an update button is placed next to each input element.</p>\n",
                    "line": 90,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "submitLabel",
                    "defaultValue": "'Submit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubmit button label\n",
                    "description": "<p>Submit button label</p>\n",
                    "line": 85,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "submitEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit when user click submit button\n",
                    "description": "<p>Emit when user click submit button</p>\n",
                    "line": 95,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>Form group</p>\n",
                    "line": 102,
                    "rawdescription": "\n\nForm group\n",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "isSubmitted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "focusPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFocus the element\n",
                    "description": "<p>Focus the element</p>\n"
                },
                {
                    "name": "focusUserName",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFocus the element\n",
                    "description": "<p>Focus the element</p>\n"
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "submitForm",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormComponent",
                    "type": "component"
                },
                {
                    "name": "TextFieldComponent",
                    "type": "component"
                },
                {
                    "name": "PasswordFieldComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild } from '@angular/core';\r\nimport { FormComponent, InputValidator } from '../form';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { BaseFieldComponent, TextFieldComponent } from '../fields';\r\nimport { PasswordFieldComponent } from '../fields/password';\r\nimport { ILoginDto } from '@webpackages/model';\r\n\r\nexport const LoginFormGroup = new FormGroup({\r\n  username: new FormControl(\r\n    '',\r\n    new InputValidator('username').required().isEmail().build()\r\n  ),\r\n  password: new FormControl(\r\n    '',\r\n    new InputValidator('password').required().password().build()\r\n  ),\r\n});\r\n\r\n@Component({\r\n  imports: [FormComponent, TextFieldComponent, PasswordFieldComponent],\r\n  standalone: true,\r\n  selector: 'wt-login-form',\r\n  template: `\r\n    <wt-form\r\n      [formTitle]=\"formTitle\"\r\n      [submitLabel]=\"submitLabel\"\r\n      (submitEvent)=\"submitForm()\"\r\n    >\r\n      <wt-text-field\r\n        #username\r\n        inputName=\"username\"\r\n        [required]=\"true\"\r\n        inputType=\"email\"\r\n        label=\"Username\"\r\n        prefixIcon=\"email\"\r\n      ></wt-text-field>\r\n      <wt-password-field\r\n        #password\r\n        inputName=\"password\"\r\n        [required]=\"true\"\r\n        label=\"Password\"\r\n        prefixIcon=\"password\"\r\n      ></wt-password-field>\r\n    </wt-form>\r\n  `,\r\n  providers: [\r\n    {\r\n      provide: FormGroup,\r\n      useValue: LoginFormGroup,\r\n    },\r\n  ],\r\n})\r\nexport class LoginFormComponent extends FormComponent<ILoginDto> {\r\n  /**\r\n   * @ignore\r\n   */\r\n  @ViewChild('username') username!: BaseFieldComponent;\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  @ViewChild('password') password!: BaseFieldComponent;\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  override formTitle: string = 'Login Form';\r\n  /**\r\n   * @ignore\r\n   */\r\n  override submitLabel: string = 'Login';\r\n\r\n  /**\r\n   * Focus the element\r\n   */\r\n  focusUserName() {\r\n    this.username.focus();\r\n  }\r\n  /**\r\n   * Focus the element\r\n   */\r\n  focusPassword() {\r\n    this.password.focus();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "FormComponent"
            ]
        },
        {
            "name": "LoginWithCodeFormComponent",
            "id": "component-LoginWithCodeFormComponent-62c793a44c7a0297f1bb15d0d12eb8253920d9f24df5c983415485549bf8fe9f9f4d59bd4babe983f4e5ac36f0ab366e4cea4842106bfdbf5fcb25e97ef0d016",
            "file": "libs/form/src/lib/auth/login-with-code.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: FormGroup, useValue: new FormGroup({\n        username: new FormControl(, new InputValidator().required().isEmail().build()), securityCode: new FormControl(, new InputValidator().required().build()),\n    }),\n}",
                    "ns": "{\n    provide: FormGroup, useValue: new FormGroup({\n        username: new FormControl(, new InputValidator()"
                }
            ],
            "selector": "wt-login-with-code-form",
            "styleUrls": [],
            "styles": [],
            "template": "<wt-form\n  (submitEvent)=\"submitForm()\"\n  [formTitle]=\"formTitle\"\n  [submitLabel]=\"submitLabel\"\n>\n  <wt-text-field\n    #username\n    inputName=\"username\"\n    [required]=\"true\"\n    inputType=\"email\"\n    label=\"Username\"\n    prefixIcon=\"email\"\n  ></wt-text-field>\n  <wt-text-field\n    #securityCode\n    inputName=\"securityCode\"\n    [required]=\"true\"\n    label=\"Security Code\"\n    prefixIcon=\"security\"\n  ></wt-text-field>\n</wt-form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "formTitle",
                    "defaultValue": "'Form Title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nForm title\n",
                    "description": "<p>Form title</p>\n",
                    "line": 80,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "isUpdateForm",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form? If it is an update form, an update button is placed next to each input element.\n",
                    "description": "<p>Is update form? If it is an update form, an update button is placed next to each input element.</p>\n",
                    "line": 90,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "submitLabel",
                    "defaultValue": "'Submit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubmit button label\n",
                    "description": "<p>Submit button label</p>\n",
                    "line": 85,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "submitEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit when user click submit button\n",
                    "description": "<p>Emit when user click submit button</p>\n",
                    "line": 95,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "formTitle",
                    "defaultValue": "'Login With Security Code'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        164
                    ]
                },
                {
                    "name": "securityCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseFieldComponent",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'securityCode'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "submitLabel",
                    "defaultValue": "'Login'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        164
                    ]
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseFieldComponent",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'username'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>Form group</p>\n",
                    "line": 102,
                    "rawdescription": "\n\nForm group\n",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "isSubmitted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "focusPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "focusUserName",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "submitForm",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormComponent",
                    "type": "component"
                },
                {
                    "name": "TextFieldComponent",
                    "type": "component"
                },
                {
                    "name": "PasswordFieldComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild } from '@angular/core';\r\nimport { FormComponent, InputValidator } from '../form';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { BaseFieldComponent, TextFieldComponent } from '../fields';\r\nimport { PasswordFieldComponent } from '../fields/password';\r\nimport { ILoginWithCodeDto } from '@webpackages/model';\r\n\r\n@Component({\r\n  imports: [FormComponent, TextFieldComponent, PasswordFieldComponent],\r\n  standalone: true,\r\n  selector: 'wt-login-with-code-form',\r\n  template: `\r\n    <wt-form\r\n      (submitEvent)=\"submitForm()\"\r\n      [formTitle]=\"formTitle\"\r\n      [submitLabel]=\"submitLabel\"\r\n    >\r\n      <wt-text-field\r\n        #username\r\n        inputName=\"username\"\r\n        [required]=\"true\"\r\n        inputType=\"email\"\r\n        label=\"Username\"\r\n        prefixIcon=\"email\"\r\n      ></wt-text-field>\r\n      <wt-text-field\r\n        #securityCode\r\n        inputName=\"securityCode\"\r\n        [required]=\"true\"\r\n        label=\"Security Code\"\r\n        prefixIcon=\"security\"\r\n      ></wt-text-field>\r\n    </wt-form>\r\n  `,\r\n  providers: [\r\n    {\r\n      provide: FormGroup,\r\n      useValue: new FormGroup({\r\n        username: new FormControl(\r\n          '',\r\n          new InputValidator('username').required().isEmail().build()\r\n        ),\r\n        securityCode: new FormControl(\r\n          '',\r\n          new InputValidator('securityCode').required().build()\r\n        ),\r\n      }),\r\n    },\r\n  ],\r\n})\r\nexport class LoginWithCodeFormComponent extends FormComponent<ILoginWithCodeDto> {\r\n  @ViewChild('username') username!: BaseFieldComponent;\r\n  @ViewChild('securityCode') securityCode!: BaseFieldComponent;\r\n\r\n  override formTitle: string = 'Login With Security Code';\r\n  override submitLabel: string = 'Login';\r\n\r\n  focusUserName() {\r\n    this.username.focus();\r\n  }\r\n\r\n  focusPassword() {\r\n    this.securityCode.focus();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "FormComponent"
            ]
        },
        {
            "name": "NumberFieldComponent",
            "id": "component-NumberFieldComponent-4e8c5b42cb1799d54e84ea2a641b18119ce29687141dc878209bf3455ccf2e9713773da0b9eaafcd2b989076ba4a40fe47588d17b27b1c6d480bd34712e3f76e",
            "file": "libs/form/src/lib/fields/number.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-number-field",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-form-field\n  style=\"width: 100%;\"\n  appearance=\"outline\"\n  [formGroup]=\"formGroup\"\n>\n  <mat-label>{{ label }}</mat-label>\n  <input\n    #input\n    type=\"number\"\n    matInput\n    [formControlName]=\"inputName\"\n    [attr.arai-required]=\"required\"\n    [attr.aria-min]=\"min\"\n    [attr.aria-max]=\"max\"\n    [attr.data-testid]=\"inputName\"\n    [errorStateMatcher]=\"errorState\"\n  />\n  <mat-icon [color]=\"iconColor$ | async\" matIconPrefix *ngIf=\"prefixIcon\">\n    {{ prefixIcon }}\n  </mat-icon>\n\n  <mat-icon [color]=\"iconColor$ | async\" matIconSuffix *ngIf=\"suffixIcon\">\n    {{ suffixIcon }}\n  </mat-icon>\n\n  <button\n    matTextSuffix\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"updateField()\"\n    *ngIf=\"isUpdateField\"\n  >\n    <mat-icon matIconPrefix>update</mat-icon>\n    <span> Update </span>\n  </button>\n\n  <mat-hint *ngIf=\"hint\">{{ hint }}</mat-hint>\n\n  <mat-error [@enter] [@leave]>\n    {{ errors$ | async }}\n  </mat-error>\n</mat-form-field>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "max",
                    "defaultValue": "Number.MAX_SAFE_INTEGER",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "Number.MIN_SAFE_INTEGER",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nField hint\n",
                    "description": "<p>Field hint</p>\n",
                    "line": 90,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFormControl name\n",
                    "description": "<p>FormControl name</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputType",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput type\n",
                    "description": "<p>Input type</p>\n",
                    "line": 67,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "isUpdateField",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form field\n",
                    "description": "<p>Is update form field</p>\n",
                    "line": 95,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel\n",
                    "description": "<p>Label</p>\n",
                    "line": 76,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "prefixIcon",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPrefix icon\n",
                    "description": "<p>Prefix icon</p>\n",
                    "line": 81,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs field requried?\n",
                    "description": "<p>Is field requried?</p>\n",
                    "line": 72,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "suffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSuffix icon\n",
                    "description": "<p>Suffix icon</p>\n",
                    "line": 85,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "updateEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the input value when the update button is clicked.\n",
                    "description": "<p>Emits the input value when the update button is clicked.</p>\n",
                    "line": 53,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorState",
                    "defaultValue": "new ErrorState()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        125,
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "iconColor$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<\"primary\" | \"accent\" | \"warn\">",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputRef",
                    "optional": false,
                    "description": "<p>Input referance</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nInput referance\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "updateField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonFieldModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { BaseFieldComponent, CommonFieldModule } from './field';\r\nimport { ErrorAnimations } from './error-animations';\r\n\r\n@Component({\r\n  selector: 'wt-number-field',\r\n  standalone: true,\r\n  imports: [CommonFieldModule],\r\n  animations: [...ErrorAnimations],\r\n  template: `\r\n    <mat-form-field\r\n      style=\"width: 100%;\"\r\n      appearance=\"outline\"\r\n      [formGroup]=\"formGroup\"\r\n    >\r\n      <mat-label>{{ label }}</mat-label>\r\n      <input\r\n        #input\r\n        type=\"number\"\r\n        matInput\r\n        [formControlName]=\"inputName\"\r\n        [attr.arai-required]=\"required\"\r\n        [attr.aria-min]=\"min\"\r\n        [attr.aria-max]=\"max\"\r\n        [attr.data-testid]=\"inputName\"\r\n        [errorStateMatcher]=\"errorState\"\r\n      />\r\n      <mat-icon [color]=\"iconColor$ | async\" matIconPrefix *ngIf=\"prefixIcon\">\r\n        {{ prefixIcon }}\r\n      </mat-icon>\r\n\r\n      <mat-icon [color]=\"iconColor$ | async\" matIconSuffix *ngIf=\"suffixIcon\">\r\n        {{ suffixIcon }}\r\n      </mat-icon>\r\n\r\n      <button\r\n        matTextSuffix\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        (click)=\"updateField()\"\r\n        *ngIf=\"isUpdateField\"\r\n      >\r\n        <mat-icon matIconPrefix>update</mat-icon>\r\n        <span> Update </span>\r\n      </button>\r\n\r\n      <mat-hint *ngIf=\"hint\">{{ hint }}</mat-hint>\r\n\r\n      <mat-error [@enter] [@leave]>\r\n        {{ errors$ | async }}\r\n      </mat-error>\r\n    </mat-form-field>\r\n  `,\r\n})\r\nexport class NumberFieldComponent extends BaseFieldComponent {\r\n  @Input() min = Number.MIN_SAFE_INTEGER;\r\n  @Input() max = Number.MAX_SAFE_INTEGER;\r\n\r\n  constructor(@Inject(FormGroup) formGroup: FormGroup) {\r\n    super(formGroup);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formGroup",
                        "type": "FormGroup",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "formGroup",
                        "type": "FormGroup",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BaseFieldComponent"
            ]
        },
        {
            "name": "PasswordFieldComponent",
            "id": "component-PasswordFieldComponent-c02a547b858ca353ce1003033522e78fc10ab0acf5e538aff098b408032e4d17796bbbd7a175adfe174b982629d5f16b97d5c08354d32d02b0d826afe5e29bdd",
            "file": "libs/form/src/lib/fields/password.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-password-field",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-form-field\n  style=\"width: 100%;\"\n  appearance=\"outline\"\n  [formGroup]=\"formGroup\"\n>\n  <mat-label>{{ label }}</mat-label>\n  <input\n    #input\n    [type]=\"inputType\"\n    matInput\n    [formControlName]=\"inputName\"\n    [attr.aria-required]=\"required\"\n    [attr.data-testid]=\"inputName\"\n    autocomplete=\"off\"\n    [errorStateMatcher]=\"errorState\"\n  />\n  <mat-icon [color]=\"iconColor$ | async\" class=\"fill\" matIconPrefix>\n    password\n  </mat-icon>\n\n  <mat-error [@enter] [@leave]>{{ errors$ | async }}</mat-error>\n\n  <button\n    matTextSuffix\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"updateField()\"\n    *ngIf=\"isUpdateField\"\n  >\n    <mat-icon matIconPrefix>update</mat-icon>\n    <span> Update </span>\n  </button>\n\n  <button\n    mat-icon-button\n    matSuffix\n    color=\"primary\"\n    (click)=\"toggleVisible()\"\n  >\n    <mat-icon>{{ visible ? 'visibility_off' : 'visibility' }}</mat-icon>\n  </button>\n</mat-form-field>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nField hint\n",
                    "description": "<p>Field hint</p>\n",
                    "line": 90,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFormControl name\n",
                    "description": "<p>FormControl name</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputType",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput type\n",
                    "description": "<p>Input type</p>\n",
                    "line": 67,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "isUpdateField",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form field\n",
                    "description": "<p>Is update form field</p>\n",
                    "line": 95,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel\n",
                    "description": "<p>Label</p>\n",
                    "line": 76,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "prefixIcon",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPrefix icon\n",
                    "description": "<p>Prefix icon</p>\n",
                    "line": 81,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs field requried?\n",
                    "description": "<p>Is field requried?</p>\n",
                    "line": 72,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "suffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSuffix icon\n",
                    "description": "<p>Suffix icon</p>\n",
                    "line": 85,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "updateEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the input value when the update button is clicked.\n",
                    "description": "<p>Emits the input value when the update button is clicked.</p>\n",
                    "line": 53,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "inputType",
                    "defaultValue": "'password'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        164
                    ]
                },
                {
                    "name": "errorState",
                    "defaultValue": "new ErrorState()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        125,
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "iconColor$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<\"primary\" | \"accent\" | \"warn\">",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputRef",
                    "optional": false,
                    "description": "<p>Input referance</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nInput referance\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleVisible",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "updateField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonFieldModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { BaseFieldComponent, CommonFieldModule } from './field';\r\nimport { ErrorAnimations } from './error-animations';\r\n\r\n@Component({\r\n  selector: 'wt-password-field',\r\n  standalone: true,\r\n  imports: [CommonFieldModule],\r\n  template: `\r\n    <mat-form-field\r\n      style=\"width: 100%;\"\r\n      appearance=\"outline\"\r\n      [formGroup]=\"formGroup\"\r\n    >\r\n      <mat-label>{{ label }}</mat-label>\r\n      <input\r\n        #input\r\n        [type]=\"inputType\"\r\n        matInput\r\n        [formControlName]=\"inputName\"\r\n        [attr.aria-required]=\"required\"\r\n        [attr.data-testid]=\"inputName\"\r\n        autocomplete=\"off\"\r\n        [errorStateMatcher]=\"errorState\"\r\n      />\r\n      <mat-icon [color]=\"iconColor$ | async\" class=\"fill\" matIconPrefix>\r\n        password\r\n      </mat-icon>\r\n\r\n      <mat-error [@enter] [@leave]>{{ errors$ | async }}</mat-error>\r\n\r\n      <button\r\n        matTextSuffix\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        (click)=\"updateField()\"\r\n        *ngIf=\"isUpdateField\"\r\n      >\r\n        <mat-icon matIconPrefix>update</mat-icon>\r\n        <span> Update </span>\r\n      </button>\r\n\r\n      <button\r\n        mat-icon-button\r\n        matSuffix\r\n        color=\"primary\"\r\n        (click)=\"toggleVisible()\"\r\n      >\r\n        <mat-icon>{{ visible ? 'visibility_off' : 'visibility' }}</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n  `,\r\n  animations: [...ErrorAnimations],\r\n})\r\nexport class PasswordFieldComponent extends BaseFieldComponent {\r\n  /**\r\n   * @ignore\r\n   */\r\n  visible = false;\r\n\r\n  override inputType = 'password';\r\n\r\n  constructor(@Inject(FormGroup) formGroup: FormGroup) {\r\n    super(formGroup);\r\n  }\r\n\r\n  toggleVisible() {\r\n    this.visible = !this.visible;\r\n    if (this.visible) {\r\n      this.inputType = 'text';\r\n    } else {\r\n      this.inputType = 'password';\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formGroup",
                        "type": "FormGroup",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "formGroup",
                        "type": "FormGroup",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BaseFieldComponent"
            ]
        },
        {
            "name": "PermissionFormComponent",
            "id": "component-PermissionFormComponent-3d370784dda331be4f9d448047f514da8d88453408da0c770d74db18ea21d54aeb8a4bcd9bc4babae4f46c4c8a8e75a6a4ca2a956d227a3e6d682a468aa5eacd",
            "file": "libs/form/src/lib/auth/permission.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: FormGroup, useValue: new FormGroup<Record<keyof ICreatePermissionDto, FormControl>>({\n        permission: new FormControl(, new InputValidator().required().minlength().maxlength().build()),\n    }),\n}",
                    "ns": "{\n    provide: FormGroup, useValue: new FormGroup<Record<keyof ICreatePermissionDto, FormControl>>({\n        permission: new FormControl(, new InputValidator()"
                }
            ],
            "selector": "wt-permission-form",
            "styleUrls": [],
            "styles": [],
            "template": "<wt-form\n  (submitEvent)=\"submitForm()\"\n  [submitLabel]=\"submitLabel\"\n  [formTitle]=\"formTitle\"\n>\n  <wt-text-field\n    #permission\n    inputName=\"permission\"\n    inputType=\"text\"\n    label=\"Permission Name\"\n    prefixIcon=\"security\"\n    [required]=\"true\"\n    [minLength]=\"3\"\n    [maxLength]=\"30\"\n    [isUpdateField]=\"isUpdateForm\"\n  ></wt-text-field>\n</wt-form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "formTitle",
                    "defaultValue": "'Create New Permission'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "submitLabel",
                    "defaultValue": "'Save'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "isUpdateForm",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form? If it is an update form, an update button is placed next to each input element.\n",
                    "description": "<p>Is update form? If it is an update form, an update button is placed next to each input element.</p>\n",
                    "line": 90,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "submitEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit when user click submit button\n",
                    "description": "<p>Emit when user click submit button</p>\n",
                    "line": 95,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "permission",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TextFieldComponent",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'permission'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>Form group</p>\n",
                    "line": 102,
                    "rawdescription": "\n\nForm group\n",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "isSubmitted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "focusPermission",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "submitForm",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonFormModule",
                    "type": "module"
                },
                {
                    "name": "FormComponent",
                    "type": "component"
                },
                {
                    "name": "TextFieldComponent",
                    "type": "component"
                },
                {
                    "name": "ListSelectComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild } from '@angular/core';\r\nimport { CommonFormModule, FormComponent, InputValidator } from '../form';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { ListSelectComponent, TextFieldComponent } from '../fields';\r\nimport { ICreatePermissionDto, ICreateUserDto, IID } from '@webpackages/model';\r\n\r\n@Component({\r\n  imports: [\r\n    CommonFormModule,\r\n    FormComponent,\r\n    TextFieldComponent,\r\n    ListSelectComponent,\r\n  ],\r\n  standalone: true,\r\n  selector: 'wt-permission-form',\r\n  template: `\r\n    <wt-form\r\n      (submitEvent)=\"submitForm()\"\r\n      [submitLabel]=\"submitLabel\"\r\n      [formTitle]=\"formTitle\"\r\n    >\r\n      <wt-text-field\r\n        #permission\r\n        inputName=\"permission\"\r\n        inputType=\"text\"\r\n        label=\"Permission Name\"\r\n        prefixIcon=\"security\"\r\n        [required]=\"true\"\r\n        [minLength]=\"3\"\r\n        [maxLength]=\"30\"\r\n        [isUpdateField]=\"isUpdateForm\"\r\n      ></wt-text-field>\r\n    </wt-form>\r\n  `,\r\n  providers: [\r\n    {\r\n      provide: FormGroup,\r\n      useValue: new FormGroup<Record<keyof ICreatePermissionDto, FormControl>>({\r\n        permission: new FormControl(\r\n          '',\r\n          new InputValidator('permission')\r\n            .required()\r\n            .minlength(3)\r\n            .maxlength(30)\r\n            .build()\r\n        ),\r\n      }),\r\n    },\r\n  ],\r\n})\r\nexport class PermissionFormComponent extends FormComponent<\r\n  ICreateUserDto<IID, IID>\r\n> {\r\n  @ViewChild('permission') permission!: TextFieldComponent;\r\n  @Input() override formTitle: string = 'Create New Permission';\r\n  @Input() override submitLabel: string = 'Save';\r\n\r\n  focusPermission() {\r\n    this.permission.focus();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "FormComponent"
            ]
        },
        {
            "name": "RoleFormComponent",
            "id": "component-RoleFormComponent-a62390bd83164f17a8bdd59b2a62e252347ab7e0ba556e68f9186fc5b88f388fe60a8f66ae13bdac6a8ce061e19c05481f01fa8caa2d5c0940703a39ca257c4f",
            "file": "libs/form/src/lib/auth/role.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: FormGroup, useValue: new FormGroup<Record<keyof ICreateRoleDto, FormControl>>({\n        role: new FormControl(, new InputValidator().build()), permissions: new FormControl([], new InputValidator().build()),\n    }),\n}",
                    "ns": "{\n    provide: FormGroup, useValue: new FormGroup<Record<keyof ICreateRoleDto, FormControl>>({\n        role: new FormControl(, new InputValidator()"
                }
            ],
            "selector": "wt-role-form",
            "styleUrls": [],
            "styles": [],
            "template": "<wt-form\n  (submitEvent)=\"submitForm()\"\n  [submitLabel]=\"submitLabel\"\n  [formTitle]=\"formTitle\"\n>\n  <wt-text-field\n    #role\n    inputName=\"role\"\n    inputType=\"text\"\n    label=\"Role Name\"\n    prefixIcon=\"security\"\n    [isUpdateField]=\"isUpdateForm\"\n    [required]=\"true\"\n    [minLength]=\"3\"\n    [maxLength]=\"30\"\n  ></wt-text-field>\n\n  <wt-list-select-field\n    #permissions\n    inputName=\"permissions\"\n    label=\"Select Permissions\"\n    [items]=\"permissionList\"\n    [isUpdateField]=\"isUpdateForm\"\n  ></wt-list-select-field>\n</wt-form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "formTitle",
                    "defaultValue": "'Create New Role'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "permissionList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "IOption[]",
                    "decorators": []
                },
                {
                    "name": "submitLabel",
                    "defaultValue": "'Save'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "isUpdateForm",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form? If it is an update form, an update button is placed next to each input element.\n",
                    "description": "<p>Is update form? If it is an update form, an update button is placed next to each input element.</p>\n",
                    "line": 90,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "submitEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit when user click submit button\n",
                    "description": "<p>Emit when user click submit button</p>\n",
                    "line": 95,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "permissions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListSelectComponent",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'permissions'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TextFieldComponent",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'role'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>Form group</p>\n",
                    "line": 102,
                    "rawdescription": "\n\nForm group\n",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "isSubmitted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "focusPermissions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "focusRole",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "submitForm",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonFormModule",
                    "type": "module"
                },
                {
                    "name": "FormComponent",
                    "type": "component"
                },
                {
                    "name": "TextFieldComponent",
                    "type": "component"
                },
                {
                    "name": "ListSelectComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild } from '@angular/core';\r\nimport { CommonFormModule, FormComponent, InputValidator } from '../form';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { ListSelectComponent, TextFieldComponent } from '../fields';\r\nimport {\r\n  ICreateRoleDto,\r\n  ICreateUserDto,\r\n  IID,\r\n  IOption,\r\n} from '@webpackages/model';\r\n\r\n@Component({\r\n  imports: [\r\n    CommonFormModule,\r\n    FormComponent,\r\n    TextFieldComponent,\r\n    ListSelectComponent,\r\n  ],\r\n  standalone: true,\r\n  selector: 'wt-role-form',\r\n  template: `\r\n    <wt-form\r\n      (submitEvent)=\"submitForm()\"\r\n      [submitLabel]=\"submitLabel\"\r\n      [formTitle]=\"formTitle\"\r\n    >\r\n      <wt-text-field\r\n        #role\r\n        inputName=\"role\"\r\n        inputType=\"text\"\r\n        label=\"Role Name\"\r\n        prefixIcon=\"security\"\r\n        [isUpdateField]=\"isUpdateForm\"\r\n        [required]=\"true\"\r\n        [minLength]=\"3\"\r\n        [maxLength]=\"30\"\r\n      ></wt-text-field>\r\n\r\n      <wt-list-select-field\r\n        #permissions\r\n        inputName=\"permissions\"\r\n        label=\"Select Permissions\"\r\n        [items]=\"permissionList\"\r\n        [isUpdateField]=\"isUpdateForm\"\r\n      ></wt-list-select-field>\r\n    </wt-form>\r\n  `,\r\n  providers: [\r\n    {\r\n      provide: FormGroup,\r\n      useValue: new FormGroup<Record<keyof ICreateRoleDto, FormControl>>({\r\n        role: new FormControl('', new InputValidator('Role').build()),\r\n        permissions: new FormControl(\r\n          [],\r\n          new InputValidator('Permissions').build()\r\n        ),\r\n      }),\r\n    },\r\n  ],\r\n})\r\nexport class RoleFormComponent extends FormComponent<ICreateUserDto<IID, IID>> {\r\n  @ViewChild('role') role!: TextFieldComponent;\r\n  @ViewChild('permissions') permissions!: ListSelectComponent;\r\n\r\n  @Input() permissionList!: IOption[];\r\n  @Input() override formTitle: string = 'Create New Role';\r\n  @Input() override submitLabel: string = 'Save';\r\n\r\n  focusRole() {\r\n    this.role.focus();\r\n  }\r\n\r\n  focusPermissions() {\r\n    this.permissions.focus();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "FormComponent"
            ]
        },
        {
            "name": "SelectFieldComponent",
            "id": "component-SelectFieldComponent-313a62f217747a5a732e292767a764bd7b76f9c8bd3b3aa2dca9ee04ef5aa35b57fa17fa3ac6245ce138d54f0c1b84a168b58f3d8da8241054d1ae9d423fe3b7",
            "file": "libs/form/src/lib/fields/select.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-select-field",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-form-field   style=\"width: 100%;\"\n   appearance=\"outline\"\n   [formGroup]=\"formGroup\"\n >\n   <mat-label>{{ label }}</mat-label>\n   <mat-select\n     #input\n     [formControlName]=\"inputName\"\n     [multiple]=\"multiple\"\n     [attr.data-testid]=\"inputName\"\n     [errorStateMatcher]=\"errorState\"\n   >\n     @for (option of options; track options) {\n     <mat-option [value]=\"option\" [attr.data-testid]=\"option.label\">{{\n       option.label\n     }}</mat-option>\n     }\n   </mat-select>\n   <mat-icon color=\"primary\" class=\"fill\" matIconPrefix *ngIf=\"prefixIcon\">\n     {{ prefixIcon }}\n   </mat-icon>\n   <mat-icon color=\"primary\" class=\"fill\" matIconSuffix *ngIf=\"suffixIcon\">\n     {{ suffixIcon }}\n   </mat-icon>\n\n   <button\n     matTextSuffix\n     mat-raised-button\n     color=\"primary\"\n     (click)=\"updateField()\"\n       *ngIf=\"isUpdateField\"\n   >\n     <mat-icon matIconPrefix>update</mat-icon>\n     <span> Update </span>\n   </button>\n   <mat-hint *ngIf=\"hint\">{{ hint }}</mat-hint>\n   <mat-error [@enter] [@leave]>\n     {{ errors$ | async }}\n   </mat-error>\n </mat-form-field>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMultiple select\n",
                    "description": "<p>Multiple select</p>\n",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect options\n",
                    "description": "<p>Select options</p>\n",
                    "line": 59,
                    "type": "IOption[]",
                    "decorators": []
                },
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nField hint\n",
                    "description": "<p>Field hint</p>\n",
                    "line": 90,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFormControl name\n",
                    "description": "<p>FormControl name</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputType",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput type\n",
                    "description": "<p>Input type</p>\n",
                    "line": 67,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "isUpdateField",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form field\n",
                    "description": "<p>Is update form field</p>\n",
                    "line": 95,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel\n",
                    "description": "<p>Label</p>\n",
                    "line": 76,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "prefixIcon",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPrefix icon\n",
                    "description": "<p>Prefix icon</p>\n",
                    "line": 81,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs field requried?\n",
                    "description": "<p>Is field requried?</p>\n",
                    "line": 72,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "suffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSuffix icon\n",
                    "description": "<p>Suffix icon</p>\n",
                    "line": 85,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "updateEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the input value when the update button is clicked.\n",
                    "description": "<p>Emits the input value when the update button is clicked.</p>\n",
                    "line": 53,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorState",
                    "defaultValue": "new ErrorState()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        125,
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "iconColor$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<\"primary\" | \"accent\" | \"warn\">",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputRef",
                    "optional": false,
                    "description": "<p>Input referance</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nInput referance\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "updateField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { BaseFieldComponent, CommonFieldModule } from './field';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { IOption } from '@webpackages/model';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { ErrorAnimations } from './error-animations';\r\n\r\n@Component({\r\n  selector: 'wt-select-field',\r\n  imports: [CommonFieldModule, MatSelectModule],\r\n  standalone: true,\r\n  template: ` <mat-form-field\r\n    style=\"width: 100%;\"\r\n    appearance=\"outline\"\r\n    [formGroup]=\"formGroup\"\r\n  >\r\n    <mat-label>{{ label }}</mat-label>\r\n    <mat-select\r\n      #input\r\n      [formControlName]=\"inputName\"\r\n      [multiple]=\"multiple\"\r\n      [attr.data-testid]=\"inputName\"\r\n      [errorStateMatcher]=\"errorState\"\r\n    >\r\n      @for (option of options; track options) {\r\n      <mat-option [value]=\"option\" [attr.data-testid]=\"option.label\">{{\r\n        option.label\r\n      }}</mat-option>\r\n      }\r\n    </mat-select>\r\n    <mat-icon color=\"primary\" class=\"fill\" matIconPrefix *ngIf=\"prefixIcon\">\r\n      {{ prefixIcon }}\r\n    </mat-icon>\r\n    <mat-icon color=\"primary\" class=\"fill\" matIconSuffix *ngIf=\"suffixIcon\">\r\n      {{ suffixIcon }}\r\n    </mat-icon>\r\n\r\n    <button\r\n      matTextSuffix\r\n      mat-raised-button\r\n      color=\"primary\"\r\n      (click)=\"updateField()\"\r\n        *ngIf=\"isUpdateField\"\r\n    >\r\n      <mat-icon matIconPrefix>update</mat-icon>\r\n      <span> Update </span>\r\n    </button>\r\n    <mat-hint *ngIf=\"hint\">{{ hint }}</mat-hint>\r\n    <mat-error [@enter] [@leave]>\r\n      {{ errors$ | async }}\r\n    </mat-error>\r\n  </mat-form-field>`,\r\n  animations: [...ErrorAnimations],\r\n})\r\nexport class SelectFieldComponent extends BaseFieldComponent {\r\n  /**\r\n   * Select options\r\n   */\r\n  @Input() options!: IOption[];\r\n\r\n  /**\r\n   * Multiple select\r\n   */\r\n  @Input() multiple: boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "BaseFieldComponent"
            ]
        },
        {
            "name": "SliderComponent",
            "id": "component-SliderComponent-596c879c1771ca02db6b91f617a77177dcf1f8da34d33b14468b7c6066d98716395c4ed3c925966dcddfda09285034ed10d03d6ca9394976fd95521e9222744c",
            "file": "libs/form/src/lib/fields/slider.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-slider",
            "styleUrls": [],
            "styles": [],
            "template": "<div\n  style=\"display: flex; flex-direction: row; gap: 1em; align-items: center;\"\n  [formGroup]=\"formGroup\"\n>\n  <mat-label matTextPrefix>{{ label }}</mat-label>\n  <mat-icon *ngIf=\"prefixIcon\" color=\"primary\" class=\"fill\">\n    {{ prefixIcon }}\n  </mat-icon>\n  <mat-slider\n    [discrete]=\"true\"\n    [min]=\"min\"\n    [max]=\"max\"\n    [step]=\"1\"\n    [showTickMarks]=\"true\"\n    [attr.data-testid]=\"inputName\"\n  >\n    <input #input matSliderThumb [formControlName]=\"inputName\" />\n  </mat-slider>\n\n  <strong matTextSuffix> {{ input.value }}</strong>\n\n  <mat-icon *ngIf=\"suffixIcon\" color=\"primary\" class=\"fill\">\n    {{ suffixIcon }}\n  </mat-icon>\n\n  <button\n    matTextSuffix\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"updateField()\"\n    *ngIf=\"isUpdateField\"\n  >\n    <mat-icon matIconPrefix>update</mat-icon>\n    <span> Update </span>\n  </button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "max",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nField hint\n",
                    "description": "<p>Field hint</p>\n",
                    "line": 90,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFormControl name\n",
                    "description": "<p>FormControl name</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputType",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput type\n",
                    "description": "<p>Input type</p>\n",
                    "line": 67,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "isUpdateField",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form field\n",
                    "description": "<p>Is update form field</p>\n",
                    "line": 95,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel\n",
                    "description": "<p>Label</p>\n",
                    "line": 76,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "prefixIcon",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPrefix icon\n",
                    "description": "<p>Prefix icon</p>\n",
                    "line": 81,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs field requried?\n",
                    "description": "<p>Is field requried?</p>\n",
                    "line": 72,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "suffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSuffix icon\n",
                    "description": "<p>Suffix icon</p>\n",
                    "line": 85,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "updateEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the input value when the update button is clicked.\n",
                    "description": "<p>Emits the input value when the update button is clicked.</p>\n",
                    "line": 53,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorState",
                    "defaultValue": "new ErrorState()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        125,
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "iconColor$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<\"primary\" | \"accent\" | \"warn\">",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputRef",
                    "optional": false,
                    "description": "<p>Input referance</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nInput referance\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "updateField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatSliderModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { BaseFieldComponent, CommonFieldModule } from './field';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\n\r\n@Component({\r\n  selector: 'wt-slider',\r\n  standalone: true,\r\n  imports: [CommonFieldModule, MatSliderModule],\r\n  template: `\r\n    <div\r\n      style=\"display: flex; flex-direction: row; gap: 1em; align-items: center;\"\r\n      [formGroup]=\"formGroup\"\r\n    >\r\n      <mat-label matTextPrefix>{{ label }}</mat-label>\r\n      <mat-icon *ngIf=\"prefixIcon\" color=\"primary\" class=\"fill\">\r\n        {{ prefixIcon }}\r\n      </mat-icon>\r\n      <mat-slider\r\n        [discrete]=\"true\"\r\n        [min]=\"min\"\r\n        [max]=\"max\"\r\n        [step]=\"1\"\r\n        [showTickMarks]=\"true\"\r\n        [attr.data-testid]=\"inputName\"\r\n      >\r\n        <input #input matSliderThumb [formControlName]=\"inputName\" />\r\n      </mat-slider>\r\n\r\n      <strong matTextSuffix> {{ input.value }}</strong>\r\n\r\n      <mat-icon *ngIf=\"suffixIcon\" color=\"primary\" class=\"fill\">\r\n        {{ suffixIcon }}\r\n      </mat-icon>\r\n\r\n      <button\r\n        matTextSuffix\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        (click)=\"updateField()\"\r\n        *ngIf=\"isUpdateField\"\r\n      >\r\n        <mat-icon matIconPrefix>update</mat-icon>\r\n        <span> Update </span>\r\n      </button>\r\n    </div>\r\n  `,\r\n})\r\nexport class SliderComponent extends BaseFieldComponent {\r\n  @Input() min = 0;\r\n  @Input() max = 100;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "BaseFieldComponent"
            ]
        },
        {
            "name": "SlideToggleComponent",
            "id": "component-SlideToggleComponent-1d534ec80d2206f152277191a671108798ac8223963c7ac944cf04bf5a27ca8ad187aa23b130885bf49e339c3c8274ccc3285ddbb32db6106a20e8742b748369",
            "file": "libs/form/src/lib/fields/slide-toggle.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-slide-toggle",
            "styleUrls": [],
            "styles": [],
            "template": "<div\n  style=\"display: flex; flex-direction: row; gap: 1em;\"\n  [formGroup]=\"formGroup\"\n>\n  <mat-label>{{ label }}</mat-label>\n  <mat-icon matIconPrefix *ngIf=\"prefixIcon\" color=\"primary\">\n    {{ prefixIcon }}\n  </mat-icon>\n  <mat-slide-toggle\n    #input\n    [formControlName]=\"inputName\"\n    [attr.data-testid]=\"inputName\"\n  >\n  </mat-slide-toggle>\n  <mat-icon matIconSuffix *ngIf=\"suffixIcon\">{{ suffixIcon }}</mat-icon>\n  <button\n    matTextSuffix\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"updateField()\"\n    *ngIf=\"isUpdateField\"\n  >\n    <mat-icon matIconPrefix>update</mat-icon>\n    <span> Update </span>\n  </button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nField hint\n",
                    "description": "<p>Field hint</p>\n",
                    "line": 90,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFormControl name\n",
                    "description": "<p>FormControl name</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputType",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput type\n",
                    "description": "<p>Input type</p>\n",
                    "line": 67,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "isUpdateField",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form field\n",
                    "description": "<p>Is update form field</p>\n",
                    "line": 95,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel\n",
                    "description": "<p>Label</p>\n",
                    "line": 76,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "prefixIcon",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPrefix icon\n",
                    "description": "<p>Prefix icon</p>\n",
                    "line": 81,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs field requried?\n",
                    "description": "<p>Is field requried?</p>\n",
                    "line": 72,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "suffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSuffix icon\n",
                    "description": "<p>Suffix icon</p>\n",
                    "line": 85,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "updateEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the input value when the update button is clicked.\n",
                    "description": "<p>Emits the input value when the update button is clicked.</p>\n",
                    "line": 53,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorState",
                    "defaultValue": "new ErrorState()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        125,
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "iconColor$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<\"primary\" | \"accent\" | \"warn\">",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputRef",
                    "optional": false,
                    "description": "<p>Input referance</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nInput referance\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "updateField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatSlideToggleModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { BaseFieldComponent, CommonFieldModule } from './field';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\n\r\n@Component({\r\n  selector: 'wt-slide-toggle',\r\n  standalone: true,\r\n  imports: [CommonFieldModule, MatSlideToggleModule],\r\n  template: `\r\n    <div\r\n      style=\"display: flex; flex-direction: row; gap: 1em;\"\r\n      [formGroup]=\"formGroup\"\r\n    >\r\n      <mat-label>{{ label }}</mat-label>\r\n      <mat-icon matIconPrefix *ngIf=\"prefixIcon\" color=\"primary\">\r\n        {{ prefixIcon }}\r\n      </mat-icon>\r\n      <mat-slide-toggle\r\n        #input\r\n        [formControlName]=\"inputName\"\r\n        [attr.data-testid]=\"inputName\"\r\n      >\r\n      </mat-slide-toggle>\r\n      <mat-icon matIconSuffix *ngIf=\"suffixIcon\">{{ suffixIcon }}</mat-icon>\r\n      <button\r\n        matTextSuffix\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        (click)=\"updateField()\"\r\n        *ngIf=\"isUpdateField\"\r\n      >\r\n        <mat-icon matIconPrefix>update</mat-icon>\r\n        <span> Update </span>\r\n      </button>\r\n    </div>\r\n  `,\r\n})\r\nexport class SlideToggleComponent extends BaseFieldComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "BaseFieldComponent"
            ]
        },
        {
            "name": "SubFormComponent",
            "id": "component-SubFormComponent-7b238781bd9f7b52f06f589f782a0556ef5a38047f186dbb60005597197f66d81bd52a5d5cb58909b23f45697eaf5aeb489d747fc7bce66d5fd7c81926582257",
            "file": "libs/form/src/lib/auth/sub.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: FormGroup, useValue: new FormGroup<Record<keyof ICreateSubDto, FormControl>>({\n        username: new FormControl(, new InputValidator().required().isEmail().build()), password: new FormControl(, new InputValidator().required().password().build()), orgname: new FormControl(, new InputValidator().required().minlength().maxlength().build()), subtype: new FormControl(, new InputValidator().required().build()),\n    }),\n}",
                    "ns": "{\n    provide: FormGroup, useValue: new FormGroup<Record<keyof ICreateSubDto, FormControl>>({\n        username: new FormControl(, new InputValidator()"
                }
            ],
            "selector": "wt-sub-form",
            "styleUrls": [],
            "styles": [],
            "template": "<wt-form\n  (submitEvent)=\"submitForm()\"\n  [submitLabel]=\"submitLabel\"\n  [formTitle]=\"formTitle\"\n  ]\n>\n  <wt-text-field\n    #username\n    inputName=\"username\"\n    inputType=\"email\"\n    label=\"Username\"\n    prefixIcon=\"email\"\n    [required]=\"true\"\n  ></wt-text-field>\n\n  <wt-password-field\n    #password\n    inputName=\"password\"\n    prefixIcon=\"password\"\n    label=\"Password\"\n    [required]=\"true\"\n  ></wt-password-field>\n\n  <wt-text-field\n    #orgname\n    inputName=\"orgname\"\n    inputType=\"text\"\n    prefixIcon=\"store\"\n    label=\"Organization Name\"\n    [required]=\"true\"\n    [minLength]=\"3\"\n    [maxLength]=\"30\"\n  ></wt-text-field>\n\n  <wt-autocomplete-field\n    #subtype\n    inputName=\"subtype\"\n    label=\"Subscription Type\"\n    prefixIcon=\"category\"\n    [options]=\"subtypeList\"\n    [required]=\"true\"\n  >\n  </wt-autocomplete-field>\n</wt-form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "subtypeList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubscription type options\n",
                    "description": "<p>Subscription type options</p>\n",
                    "line": 105,
                    "type": "IOption[]",
                    "decorators": []
                },
                {
                    "name": "formTitle",
                    "defaultValue": "'Form Title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nForm title\n",
                    "description": "<p>Form title</p>\n",
                    "line": 80,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "isUpdateForm",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form? If it is an update form, an update button is placed next to each input element.\n",
                    "description": "<p>Is update form? If it is an update form, an update button is placed next to each input element.</p>\n",
                    "line": 90,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "submitLabel",
                    "defaultValue": "'Submit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubmit button label\n",
                    "description": "<p>Submit button label</p>\n",
                    "line": 85,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "submitEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit when user click submit button\n",
                    "description": "<p>Emit when user click submit button</p>\n",
                    "line": 95,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "formTitle",
                    "defaultValue": "'Sign Up Form'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        164
                    ]
                },
                {
                    "name": "orgname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseFieldComponent",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'orgname'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseFieldComponent",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'password'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "submitLabel",
                    "defaultValue": "'Sign Up'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        164
                    ]
                },
                {
                    "name": "subtype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseFieldComponent",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'subtype'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseFieldComponent",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'username'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>Form group</p>\n",
                    "line": 102,
                    "rawdescription": "\n\nForm group\n",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "isSubmitted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "focusOrgname",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "focusPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "focusSubType",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "focusUserName",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "submitForm",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormComponent",
                    "type": "component"
                },
                {
                    "name": "TextFieldComponent",
                    "type": "component"
                },
                {
                    "name": "PasswordFieldComponent",
                    "type": "component"
                },
                {
                    "name": "AutocompleteFieldComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild } from '@angular/core';\r\nimport { FormComponent, InputValidator } from '../form';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { BaseFieldComponent, TextFieldComponent } from '../fields';\r\nimport { PasswordFieldComponent } from '../fields/password';\r\nimport { ICreateSubDto, IID, IOption } from '@webpackages/model';\r\nimport { AutocompleteFieldComponent } from '../fields/autocomplete';\r\n\r\n@Component({\r\n  imports: [\r\n    FormComponent,\r\n    TextFieldComponent,\r\n    PasswordFieldComponent,\r\n    AutocompleteFieldComponent,\r\n  ],\r\n  standalone: true,\r\n  selector: 'wt-sub-form',\r\n  template: `\r\n    <wt-form\r\n      (submitEvent)=\"submitForm()\"\r\n      [submitLabel]=\"submitLabel\"\r\n      [formTitle]=\"formTitle\"\r\n      ]\r\n    >\r\n      <wt-text-field\r\n        #username\r\n        inputName=\"username\"\r\n        inputType=\"email\"\r\n        label=\"Username\"\r\n        prefixIcon=\"email\"\r\n        [required]=\"true\"\r\n      ></wt-text-field>\r\n\r\n      <wt-password-field\r\n        #password\r\n        inputName=\"password\"\r\n        prefixIcon=\"password\"\r\n        label=\"Password\"\r\n        [required]=\"true\"\r\n      ></wt-password-field>\r\n\r\n      <wt-text-field\r\n        #orgname\r\n        inputName=\"orgname\"\r\n        inputType=\"text\"\r\n        prefixIcon=\"store\"\r\n        label=\"Organization Name\"\r\n        [required]=\"true\"\r\n        [minLength]=\"3\"\r\n        [maxLength]=\"30\"\r\n      ></wt-text-field>\r\n\r\n      <wt-autocomplete-field\r\n        #subtype\r\n        inputName=\"subtype\"\r\n        label=\"Subscription Type\"\r\n        prefixIcon=\"category\"\r\n        [options]=\"subtypeList\"\r\n        [required]=\"true\"\r\n      >\r\n      </wt-autocomplete-field>\r\n    </wt-form>\r\n  `,\r\n  providers: [\r\n    {\r\n      provide: FormGroup,\r\n      useValue: new FormGroup<Record<keyof ICreateSubDto, FormControl>>({\r\n        username: new FormControl(\r\n          '',\r\n          new InputValidator('username').required().isEmail().build()\r\n        ),\r\n        password: new FormControl(\r\n          '',\r\n          new InputValidator('password').required().password().build()\r\n        ),\r\n        orgname: new FormControl(\r\n          '',\r\n          new InputValidator('organization name')\r\n            .required()\r\n            .minlength(3)\r\n            .maxlength(30)\r\n            .build()\r\n        ),\r\n        subtype: new FormControl(\r\n          '',\r\n          new InputValidator('subscription type').required().build()\r\n        ),\r\n      }),\r\n    },\r\n  ],\r\n})\r\nexport class SubFormComponent extends FormComponent<ICreateSubDto<IID>> {\r\n  @ViewChild('username') username!: BaseFieldComponent;\r\n  @ViewChild('password') password!: BaseFieldComponent;\r\n  @ViewChild('orgname') orgname!: BaseFieldComponent;\r\n  @ViewChild('subtype') subtype!: BaseFieldComponent;\r\n\r\n  override formTitle: string = 'Sign Up Form';\r\n\r\n  override submitLabel: string = 'Sign Up';\r\n\r\n  /**\r\n   * Subscription type options\r\n   */\r\n  @Input() subtypeList!: IOption[];\r\n\r\n  focusUserName() {\r\n    this.username.focus();\r\n  }\r\n\r\n  focusPassword() {\r\n    this.password.focus();\r\n  }\r\n\r\n  focusOrgname() {\r\n    this.orgname.focus();\r\n  }\r\n\r\n  focusSubType() {\r\n    this.subtype.focus();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "FormComponent"
            ]
        },
        {
            "name": "TextareaFieldComponent",
            "id": "component-TextareaFieldComponent-f7908720c60b19effa6c05cab93bacaa07741437e13570c7b555afe6169672caeda4bbbc112d6d81237693c79134657b95c0599dbe0c6fc3b486b5834a758548",
            "file": "libs/form/src/lib/fields/textarea.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-textarea",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-form-field\n  style=\"width: 100%;\"\n  appearance=\"outline\"\n  [formGroup]=\"formGroup\"\n>\n  <mat-label>{{ label }}</mat-label>\n\n  <textarea\n    style=\"min-height: 100px; resize: none;\"\n    #input\n    type=\"text\"\n    matInput\n    [formControlName]=\"inputName\"\n    [formControlName]=\"inputName\"\n    [attr.aria-minlength]=\"minLength\"\n    [attr.aria-maxlength]=\"maxLength\"\n    [attr.aria-required]=\"required\"\n    [attr.data-testid]=\"inputName\"\n    autocomplete=\"off\"\n    [errorStateMatcher]=\"errorState\"\n  ></textarea>\n\n  <mat-icon color=\"primary\" class=\"fill\" matIconPrefix *ngIf=\"prefixIcon\">\n    {{ prefixIcon }}\n  </mat-icon>\n\n  <mat-icon color=\"primary\" class=\"fill\" matIconSuffix *ngIf=\"suffixIcon\">\n    {{ suffixIcon }}\n  </mat-icon>\n\n  <button\n    matTextSuffix\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"updateField()\"\n    *ngIf=\"isUpdateField\"\n  >\n    <mat-icon matIconPrefix>update</mat-icon>\n    <span> Update </span>\n  </button>\n\n  <mat-hint *ngIf=\"hint\">{{ hint }}</mat-hint>\n  <mat-error [@enter] [@leave]>\n    {{ errors$ | async }}\n  </mat-error>\n</mat-form-field>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "maxLength",
                    "defaultValue": "400",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMaximum text length\n",
                    "description": "<p>Maximum text length</p>\n",
                    "line": 73,
                    "type": "number",
                    "decorators": [],
                    "inheritance": {
                        "file": "TextFieldComponent"
                    }
                },
                {
                    "name": "minLength",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMimimum text length\n",
                    "description": "<p>Mimimum text length</p>\n",
                    "line": 69,
                    "type": "number",
                    "decorators": [],
                    "inheritance": {
                        "file": "TextFieldComponent"
                    }
                },
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nField hint\n",
                    "description": "<p>Field hint</p>\n",
                    "line": 90,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFormControl name\n",
                    "description": "<p>FormControl name</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputType",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput type\n",
                    "description": "<p>Input type</p>\n",
                    "line": 67,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "isUpdateField",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form field\n",
                    "description": "<p>Is update form field</p>\n",
                    "line": 95,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel\n",
                    "description": "<p>Label</p>\n",
                    "line": 76,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "prefixIcon",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPrefix icon\n",
                    "description": "<p>Prefix icon</p>\n",
                    "line": 81,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs field requried?\n",
                    "description": "<p>Is field requried?</p>\n",
                    "line": 72,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "suffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSuffix icon\n",
                    "description": "<p>Suffix icon</p>\n",
                    "line": 85,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "updateEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the input value when the update button is clicked.\n",
                    "description": "<p>Emits the input value when the update button is clicked.</p>\n",
                    "line": 53,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorState",
                    "defaultValue": "new ErrorState()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        125,
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "iconColor$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<\"primary\" | \"accent\" | \"warn\">",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputRef",
                    "optional": false,
                    "description": "<p>Input referance</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nInput referance\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "updateField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonFieldModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonFieldModule } from './field';\r\nimport { TextFieldComponent } from './text';\r\nimport { ErrorAnimations } from './error-animations';\r\n\r\n@Component({\r\n  selector: 'wt-textarea',\r\n  standalone: true,\r\n  imports: [CommonFieldModule],\r\n  animations: [...ErrorAnimations],\r\n  template: `\r\n    <mat-form-field\r\n      style=\"width: 100%;\"\r\n      appearance=\"outline\"\r\n      [formGroup]=\"formGroup\"\r\n    >\r\n      <mat-label>{{ label }}</mat-label>\r\n\r\n      <textarea\r\n        style=\"min-height: 100px; resize: none;\"\r\n        #input\r\n        type=\"text\"\r\n        matInput\r\n        [formControlName]=\"inputName\"\r\n        [formControlName]=\"inputName\"\r\n        [attr.aria-minlength]=\"minLength\"\r\n        [attr.aria-maxlength]=\"maxLength\"\r\n        [attr.aria-required]=\"required\"\r\n        [attr.data-testid]=\"inputName\"\r\n        autocomplete=\"off\"\r\n        [errorStateMatcher]=\"errorState\"\r\n      ></textarea>\r\n\r\n      <mat-icon color=\"primary\" class=\"fill\" matIconPrefix *ngIf=\"prefixIcon\">\r\n        {{ prefixIcon }}\r\n      </mat-icon>\r\n\r\n      <mat-icon color=\"primary\" class=\"fill\" matIconSuffix *ngIf=\"suffixIcon\">\r\n        {{ suffixIcon }}\r\n      </mat-icon>\r\n\r\n      <button\r\n        matTextSuffix\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        (click)=\"updateField()\"\r\n        *ngIf=\"isUpdateField\"\r\n      >\r\n        <mat-icon matIconPrefix>update</mat-icon>\r\n        <span> Update </span>\r\n      </button>\r\n\r\n      <mat-hint *ngIf=\"hint\">{{ hint }}</mat-hint>\r\n      <mat-error [@enter] [@leave]>\r\n        {{ errors$ | async }}\r\n      </mat-error>\r\n    </mat-form-field>\r\n  `,\r\n})\r\nexport class TextareaFieldComponent extends TextFieldComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TextFieldComponent"
            ]
        },
        {
            "name": "TextFieldComponent",
            "id": "component-TextFieldComponent-795ddd04de6dce4c7d13d6c3e529c425cd1c7b18fdff4e9d22a75118e41f438eb4304b5d22b1b6b4dc568e3e48e2cd72eb17d43763f663dee91e07a5459e1711",
            "file": "libs/form/src/lib/fields/text.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-text-field",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-form-field\n  style=\"width: 100%;\"\n  appearance=\"outline\"\n  [formGroup]=\"formGroup\"\n>\n  <mat-label>{{ label }}</mat-label>\n  <input\n    #input\n    matInput\n    [type]=\"inputType\"\n    [formControlName]=\"inputName\"\n    [attr.aria-minlength]=\"minLength\"\n    [attr.aria-maxlength]=\"maxLength\"\n    [attr.aria-required]=\"required\"\n    [attr.data-testid]=\"inputName\"\n    autocomplete=\"off\"\n    [errorStateMatcher]=\"errorState\"\n  />\n  <mat-icon\n    [color]=\"iconColor$ | async\"\n    class=\"fill\"\n    matIconPrefix\n    *ngIf=\"prefixIcon\"\n  >\n    {{ prefixIcon }}\n  </mat-icon>\n  <mat-icon\n    [color]=\"iconColor$ | async\"\n    class=\"fill\"\n    matIconSuffix\n    *ngIf=\"suffixIcon\"\n  >\n    {{ suffixIcon }}\n  </mat-icon>\n\n  <button\n    matTextSuffix\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"updateField()\"\n    *ngIf=\"isUpdateField\"\n\n  >\n    <mat-icon matIconPrefix>update</mat-icon>\n    <span> Update </span>\n  </button>\n\n  <mat-hint *ngIf=\"hint\">{{ hint }}</mat-hint>\n  <mat-error [@enter] [@leave]>\n    {{ errors$ | async }}\n  </mat-error>\n</mat-form-field>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "maxLength",
                    "defaultValue": "400",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMaximum text length\n",
                    "description": "<p>Maximum text length</p>\n",
                    "line": 73,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "minLength",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMimimum text length\n",
                    "description": "<p>Mimimum text length</p>\n",
                    "line": 69,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nField hint\n",
                    "description": "<p>Field hint</p>\n",
                    "line": 90,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFormControl name\n",
                    "description": "<p>FormControl name</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputType",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput type\n",
                    "description": "<p>Input type</p>\n",
                    "line": 67,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "isUpdateField",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form field\n",
                    "description": "<p>Is update form field</p>\n",
                    "line": 95,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel\n",
                    "description": "<p>Label</p>\n",
                    "line": 76,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "prefixIcon",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPrefix icon\n",
                    "description": "<p>Prefix icon</p>\n",
                    "line": 81,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs field requried?\n",
                    "description": "<p>Is field requried?</p>\n",
                    "line": 72,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "suffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSuffix icon\n",
                    "description": "<p>Suffix icon</p>\n",
                    "line": 85,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "updateEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the input value when the update button is clicked.\n",
                    "description": "<p>Emits the input value when the update button is clicked.</p>\n",
                    "line": 53,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorState",
                    "defaultValue": "new ErrorState()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        125,
                        148
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "iconColor$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<\"primary\" | \"accent\" | \"warn\">",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "inputRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputRef",
                    "optional": false,
                    "description": "<p>Input referance</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nInput referance\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "updateField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonFieldModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { BaseFieldComponent, CommonFieldModule } from './field';\r\nimport { ErrorAnimations } from './error-animations';\r\n\r\n@Component({\r\n  selector: 'wt-text-field',\r\n  standalone: true,\r\n  imports: [CommonFieldModule],\r\n  template: `\r\n    <mat-form-field\r\n      style=\"width: 100%;\"\r\n      appearance=\"outline\"\r\n      [formGroup]=\"formGroup\"\r\n    >\r\n      <mat-label>{{ label }}</mat-label>\r\n      <input\r\n        #input\r\n        matInput\r\n        [type]=\"inputType\"\r\n        [formControlName]=\"inputName\"\r\n        [attr.aria-minlength]=\"minLength\"\r\n        [attr.aria-maxlength]=\"maxLength\"\r\n        [attr.aria-required]=\"required\"\r\n        [attr.data-testid]=\"inputName\"\r\n        autocomplete=\"off\"\r\n        [errorStateMatcher]=\"errorState\"\r\n      />\r\n      <mat-icon\r\n        [color]=\"iconColor$ | async\"\r\n        class=\"fill\"\r\n        matIconPrefix\r\n        *ngIf=\"prefixIcon\"\r\n      >\r\n        {{ prefixIcon }}\r\n      </mat-icon>\r\n      <mat-icon\r\n        [color]=\"iconColor$ | async\"\r\n        class=\"fill\"\r\n        matIconSuffix\r\n        *ngIf=\"suffixIcon\"\r\n      >\r\n        {{ suffixIcon }}\r\n      </mat-icon>\r\n\r\n      <button\r\n        matTextSuffix\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        (click)=\"updateField()\"\r\n        *ngIf=\"isUpdateField\"\r\n        \r\n      >\r\n        <mat-icon matIconPrefix>update</mat-icon>\r\n        <span> Update </span>\r\n      </button>\r\n\r\n      <mat-hint *ngIf=\"hint\">{{ hint }}</mat-hint>\r\n      <mat-error [@enter] [@leave]>\r\n        {{ errors$ | async }}\r\n      </mat-error>\r\n    </mat-form-field>\r\n  `,\r\n  animations: [...ErrorAnimations],\r\n})\r\nexport class TextFieldComponent extends BaseFieldComponent {\r\n  /**\r\n   * Mimimum text length\r\n   */\r\n  @Input() minLength = 0;\r\n  /**\r\n   * Maximum text length\r\n   */\r\n  @Input() maxLength = 400;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "BaseFieldComponent"
            ]
        },
        {
            "name": "UserFormComponent",
            "id": "component-UserFormComponent-ab7c3b25e990d49026725e1eec6f0b4444d3070eeb2193966a6d8155e46fe6cb458136776b1d283539c9a5f84557107161ef27e63340cc70a143172717ba69f6",
            "file": "libs/form/src/lib/auth/user.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: FormGroup, useValue: new FormGroup({\n        username: new FormControl(, new InputValidator().required().isEmail().build()), roles: new FormControl(, new InputValidator().build()),\n    }),\n}",
                    "ns": "{\n    provide: FormGroup, useValue: new FormGroup({\n        username: new FormControl(, new InputValidator()"
                }
            ],
            "selector": "wt-user-form",
            "styleUrls": [],
            "styles": [],
            "template": "<wt-form\n  (submitEvent)=\"submitForm()\"\n  [submitLabel]=\"submitLabel\"\n  [formTitle]=\"formTitle\"\n>\n  <wt-text-field\n    #username\n    inputName=\"username\"\n    inputType=\"email\"\n    label=\"Username\"\n    prefixIcon=\"email\"\n    [required]=\"true\"\n    [isUpdateField]=\"isUpdateForm\"\n  ></wt-text-field>\n\n  <wt-list-select-field\n    #roles\n    inputName=\"roles\"\n    label=\"Select Roles\"\n    [items]=\"userRoles\"\n    [isUpdateField]=\"isUpdateForm\"\n  ></wt-list-select-field>\n</wt-form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "formTitle",
                    "defaultValue": "'Create User'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "submitLabel",
                    "defaultValue": "'Save'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "userRoles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "IOption[]",
                    "decorators": []
                },
                {
                    "name": "isUpdateForm",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs update form? If it is an update form, an update button is placed next to each input element.\n",
                    "description": "<p>Is update form? If it is an update form, an update button is placed next to each input element.</p>\n",
                    "line": 90,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "submitEvent",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit when user click submit button\n",
                    "description": "<p>Emit when user click submit button</p>\n",
                    "line": 95,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListSelectComponent",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'roles'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TextFieldComponent",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'username'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>Form group</p>\n",
                    "line": 102,
                    "rawdescription": "\n\nForm group\n",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "isSubmitted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "focusRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "focusUserName",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormComponent"
                    }
                },
                {
                    "name": "submitForm",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonFormModule",
                    "type": "module"
                },
                {
                    "name": "FormComponent",
                    "type": "component"
                },
                {
                    "name": "TextFieldComponent",
                    "type": "component"
                },
                {
                    "name": "ListSelectComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild } from '@angular/core';\r\nimport { CommonFormModule, FormComponent, InputValidator } from '../form';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { ListSelectComponent, TextFieldComponent } from '../fields';\r\nimport { ICreateUserDto, IID, IOption } from '@webpackages/model';\r\n\r\n@Component({\r\n  imports: [\r\n    CommonFormModule,\r\n    FormComponent,\r\n    TextFieldComponent,\r\n    ListSelectComponent,\r\n  ],\r\n  standalone: true,\r\n  selector: 'wt-user-form',\r\n  template: `\r\n    <wt-form\r\n      (submitEvent)=\"submitForm()\"\r\n      [submitLabel]=\"submitLabel\"\r\n      [formTitle]=\"formTitle\"\r\n    >\r\n      <wt-text-field\r\n        #username\r\n        inputName=\"username\"\r\n        inputType=\"email\"\r\n        label=\"Username\"\r\n        prefixIcon=\"email\"\r\n        [required]=\"true\"\r\n        [isUpdateField]=\"isUpdateForm\"\r\n      ></wt-text-field>\r\n\r\n      <wt-list-select-field\r\n        #roles\r\n        inputName=\"roles\"\r\n        label=\"Select Roles\"\r\n        [items]=\"userRoles\"\r\n        [isUpdateField]=\"isUpdateForm\"\r\n      ></wt-list-select-field>\r\n    </wt-form>\r\n  `,\r\n  providers: [\r\n    {\r\n      provide: FormGroup,\r\n      useValue: new FormGroup({\r\n        username: new FormControl(\r\n          '',\r\n          new InputValidator('username').required().isEmail().build()\r\n        ),\r\n        roles: new FormControl('', new InputValidator('Roles').build()),\r\n      }),\r\n    },\r\n  ],\r\n})\r\nexport class UserFormComponent extends FormComponent<ICreateUserDto<IID, IID>> {\r\n  @Input() userRoles!: IOption[];\r\n\r\n  @ViewChild('username') username!: TextFieldComponent;\r\n  @ViewChild('roles') roles!: ListSelectComponent;\r\n  @Input() override formTitle: string = 'Create User';\r\n  @Input() override submitLabel: string = 'Save';\r\n\r\n  focusUserName() {\r\n    this.username.focus();\r\n  }\r\n\r\n  focusRoles() {\r\n    this.roles.focus();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "FormComponent"
            ]
        }
    ],
    "modules": [
        {
            "name": "CommonFieldModule",
            "id": "module-CommonFieldModule-e553ff648d08ed0c12e467870da5e6f479910b240e116baa6448bf7f2501d15c9aa7c287e7b51a50ef4875da93d4e5402a55049257b9f70b385e55737d8ecb2e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/form/src/lib/fields/field.ts",
            "methods": [],
            "sourceCode": "/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  NgModule,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  FormGroup,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n} from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInput, MatInputModule } from '@angular/material/input';\r\nimport { Observable, debounceTime, map, startWith } from 'rxjs';\r\n\r\n@NgModule({\r\n  exports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n  ],\r\n})\r\nexport class CommonFieldModule {}\r\n\r\nexport class ErrorState implements ErrorStateMatcher {\r\n  isErrorState(control: AbstractControl | null): boolean {\r\n    return control?.dirty && control.invalid ? true : false;\r\n  }\r\n}\r\n\r\n@Component({ template: '' })\r\nexport class BaseFieldComponent<T = any, InputRef = MatInput>\r\n  implements OnInit\r\n{\r\n  readonly errorState = new ErrorState();\r\n\r\n  /**\r\n   * Emits the input value when the update button is clicked.\r\n   */\r\n  @Output() updateEvent = new EventEmitter<T>();\r\n  /**\r\n   * Input referance\r\n   */\r\n  @ViewChild('input') inputRef!: InputRef;\r\n\r\n  /**\r\n   * FormControl name\r\n   */\r\n  @Input() inputName!: string;\r\n\r\n  /**\r\n   * Input type\r\n   */\r\n  @Input() inputType = 'text';\r\n\r\n  /**\r\n   * Is field requried?\r\n   */\r\n  @Input() required = false;\r\n  /**\r\n   * Label\r\n   */\r\n  @Input() label?: string;\r\n\r\n  /**\r\n   * Prefix icon\r\n   */\r\n  @Input() prefixIcon = 'info';\r\n  /**\r\n   * Suffix icon\r\n   */\r\n  @Input() suffixIcon?: string;\r\n\r\n  /**\r\n   * Field hint\r\n   */\r\n  @Input() hint?: string;\r\n\r\n  /**\r\n   * Is update form field\r\n   */\r\n  @Input() isUpdateField = false;\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  errors$!: Observable<string[]>;\r\n\r\n  iconColor$!: Observable<'primary' | 'accent' | 'warn'>;\r\n\r\n  constructor(public readonly formGroup: FormGroup) {}\r\n\r\n  ngOnInit(): void {\r\n    const control = this.formGroup.get(this.inputName);\r\n\r\n    if (control) {\r\n      this.errors$ = control.valueChanges.pipe(\r\n        startWith(''),\r\n        debounceTime(400),\r\n        map(() => {\r\n          if (control.touched && control.dirty) {\r\n            return Object.values(control.errors || {}).shift();\r\n          }\r\n          return null;\r\n        })\r\n      );\r\n\r\n      this.iconColor$ = this.errors$.pipe(\r\n        map((e) => {\r\n          if (control.touched) {\r\n            if (e) {\r\n              return 'warn';\r\n            }\r\n          }\r\n          return 'primary';\r\n        })\r\n      );\r\n    } else {\r\n      console.error(`Controller ${this.inputName} not found!`);\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    if ((this.inputRef as any)?.focus) {\r\n      (this.inputRef as any).focus();\r\n    }\r\n  }\r\n\r\n  updateField() {\r\n    const control = this.formGroup.get(this.inputName);\r\n    control?.markAllAsTouched();\r\n    control?.markAsDirty();\r\n    this.updateEvent.emit(control?.value);\r\n  }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CommonFormModule",
            "id": "module-CommonFormModule-8361297838ce9730a76ba6b8fa77d26017cd53d7270d0cc60d72e98cc2689681fd8a726d1ac1b7c84516e77097ff3fe990ad49c6ec8dea4e0ff4a82fe7c6f4cf",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/form/src/lib/form/form.ts",
            "methods": [],
            "sourceCode": "/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  NgModule,\r\n  Output,\r\n} from '@angular/core';\r\nimport { FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\n\r\n@NgModule({\r\n  exports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n  ],\r\n})\r\nexport class CommonFormModule {}\r\n\r\n@Component({\r\n  selector: 'wt-form',\r\n  standalone: true,\r\n  imports: [CommonFormModule],\r\n  styleUrl: './form.style.scss',\r\n  template: `\r\n    <mat-card>\r\n      <mat-card-header>\r\n        <mat-card-title>\r\n          <h1>{{ formTitle }}</h1>\r\n        </mat-card-title>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <form\r\n          style=\"display: flex; flex-direction: column; gap: 1em;  width: 100%;\"\r\n          #form=\"ngForm\"\r\n          novalidate\r\n          [formGroup]=\"formGroup\"\r\n        >\r\n          <ng-content></ng-content>\r\n        </form>\r\n      </mat-card-content>\r\n\r\n      <mat-card-actions>\r\n        <div style=\"display: flex; flex-direction: row; gap: 1em;\">\r\n          <button\r\n            mat-raised-button\r\n            color=\"primary\"\r\n            type=\"button\"\r\n            (click)=\"submitForm()\"\r\n            [disabled]=\"formGroup.invalid\"\r\n            [attr.data-testid]=\"submitLabel\"\r\n          >\r\n            {{ submitLabel }}\r\n          </button>\r\n          <button\r\n            mat-raised-button\r\n            (click)=\"resetForm()\"\r\n            type=\"button\"\r\n            [attr.data-testid]=\"'Reset'\"\r\n          >\r\n            Reset\r\n          </button>\r\n        </div>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  `,\r\n})\r\nexport class FormComponent<T = any> {\r\n  /**\r\n   * Form title\r\n   */\r\n  @Input() formTitle = 'Form Title';\r\n\r\n  /**\r\n   * Submit button label\r\n   */\r\n  @Input() submitLabel = 'Submit';\r\n\r\n  /**\r\n   * Is update form? If it is an update form, an update button is placed next to each input element.\r\n   */\r\n  @Input() isUpdateForm: boolean = false;\r\n\r\n  /**\r\n   * Emit when user click submit button\r\n   */\r\n  @Output() submitEvent = new EventEmitter<T>();\r\n\r\n  isSubmitted$ = new BehaviorSubject(false);\r\n\r\n  /**\r\n   * Form group\r\n   */\r\n  formGroup!: FormGroup;\r\n\r\n  constructor(formGroup: FormGroup) {\r\n    this.formGroup = formGroup;\r\n  }\r\n\r\n  submitForm(value?: T) {\r\n    this.isSubmitted$.next(true);\r\n    this.submitEvent.emit(value ?? this.formGroup.value);\r\n  }\r\n\r\n  resetForm() {\r\n    this.isSubmitted$.next(false);\r\n    this.formGroup.reset();\r\n  }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ErrorAnimations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/error-animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AnimationTriggerMetadata[]",
                "defaultValue": "[\r\n  bounceInDownOnEnterAnimation({ anchor: 'enter' }),\r\n  bounceOutUpOnLeaveAnimation({ anchor: 'leave' }),\r\n]"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/forgot-password.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n\r\n    const username = canvas.getByTestId('username');\r\n    const forgotPasswordButton = canvas.getByTestId(/Forgot Password/);\r\n    const resetButton = canvas.getByTestId(/Reset/);\r\n\r\n    expect(username).toBeTruthy();\r\n\r\n    await userEvent.clear(username);\r\n\r\n    await userEvent.type(username, 'user@gmail.com', { delay: 100 });\r\n\r\n    await userEvent.click(forgotPasswordButton, { delay: 1000 });\r\n    await userEvent.click(resetButton, { delay: 1000 });\r\n  },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/login-with-code.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  argTypes: meta.argTypes,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n\r\n    const username = canvas.getByTestId('username');\r\n    const securityCode = canvas.getByTestId('securityCode');\r\n\r\n    const loginButton = canvas.getByTestId(/Login/);\r\n    const resetButton = canvas.getByTestId(/Reset/);\r\n\r\n    expect(username).toBeTruthy();\r\n    expect(securityCode).toBeTruthy();\r\n\r\n    await userEvent.clear(username);\r\n    await userEvent.clear(securityCode);\r\n\r\n    await userEvent.type(username, 'user@gmail.com', { delay: 100 });\r\n    await userEvent.type(securityCode, 'oauoo-982749-asjdf-aerqw', {\r\n      delay: 100,\r\n    });\r\n\r\n    await userEvent.click(loginButton, { delay: 1000 });\r\n    await userEvent.click(resetButton, { delay: 1000 });\r\n  },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  play: async (args) => {\r\n    const { canvasElement } = args;\r\n    console.log(args);\r\n    const canvas = within(canvasElement);\r\n\r\n    const username = canvas.getByTestId('username');\r\n    const password = canvas.getByTestId('password');\r\n\r\n    const loginButton = canvas.getByTestId(/Login/);\r\n    const resetButton = canvas.getByTestId(/Reset/);\r\n\r\n    expect(username).toBeTruthy();\r\n    expect(password).toBeTruthy();\r\n\r\n    await userEvent.clear(username);\r\n    await userEvent.clear(password);\r\n\r\n    await userEvent.type(username, loginDto.username, { delay: 100 });\r\n    await userEvent.type(password, loginDto.password, { delay: 100 });\r\n\r\n    await userEvent.click(loginButton, { delay: 1000 });\r\n\r\n    expect(LoginFormGroup.value.username).toBe(loginDto.username);\r\n    expect(LoginFormGroup.value.password).toBe(loginDto.password);\r\n\r\n    await userEvent.click(resetButton, { delay: 1000 });\r\n  },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/permission.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    formTitle: 'Create New Permission',\n    submitLabel: 'Save',\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/Create New Permission/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/role.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    formTitle: 'Create New Role',\n    submitLabel: 'Save',\n    permissionList: [\n      {\n        id: 1,\n        label: 'User',\n        subs: [\n          { id: 2, label: 'Read' },\n          { id: 3, label: 'Create' },\n          { id: 4, label: 'Update' },\n          { id: 5, label: 'Delete' },\n        ],\n      },\n      {\n        id: 6,\n        label: 'Store',\n        subs: [\n          { id: 7, label: 'Read' },\n          { id: 8, label: 'Create' },\n          { id: 9, label: 'Update' },\n          { id: 10, label: 'Delete' },\n        ],\n      },\n    ],\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/Create New Role/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/sub.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    subtypeList: [\r\n      { id: 1, label: 'Premium' },\r\n      { id: 2, label: 'Gold' },\r\n      { id: 3, label: 'Economy' },\r\n      { id: 4, label: 'Basic' },\r\n    ],\r\n  },\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const username = canvas.getByTestId('username');\r\n    const password = canvas.getByTestId('password');\r\n    const organizationName = canvas.getByTestId('organizationName');\r\n    const subType = canvas.getByTestId('subType');\r\n\r\n    expect(username).toBeTruthy();\r\n    expect(password).toBeTruthy();\r\n    expect(organizationName).toBeTruthy();\r\n    expect(subType).toBeTruthy();\r\n\r\n    await userEvent.clear(username);\r\n    await userEvent.clear(password);\r\n    await userEvent.clear(organizationName);\r\n\r\n    await userEvent.type(username, 'user@domain.com', { delay: 50 });\r\n    await userEvent.type(password, '!Password1234.', { delay: 50 });\r\n    await userEvent.type(organizationName, 'Web Telescope', { delay: 50 });\r\n    await userEvent.type(subType, 'Gold', { delay: 50 });\r\n\r\n    const option = document.querySelector('[data-testid=\"Gold\"]');\r\n    await userEvent.click(option!);\r\n\r\n    const signupButton = await canvas.findByTestId('Sign Up');\r\n    const resetButton = await canvas.findByTestId('Reset');\r\n\r\n    await userEvent.click(signupButton, { delay: 400 });\r\n    await userEvent.click(resetButton, { delay: 1000 });\r\n  },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/user.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const username = canvas.getByTestId('username');\r\n    const roles = canvas.getByTestId('roles');\r\n    const Admin = canvas.getByTestId('Admin');\r\n    const Editor = canvas.getByTestId('Editor');\r\n    const Reader = canvas.getByTestId('Reader');\r\n\r\n    expect(Admin).toBeTruthy();\r\n    expect(Editor).toBeTruthy();\r\n    expect(Reader).toBeTruthy();\r\n\r\n    expect(username).toBeTruthy();\r\n    expect(roles).toBeTruthy();\r\n\r\n    await userEvent.clear(username);\r\n\r\n    await userEvent.type(username, 'user@domain.com', { delay: 50 });\r\n    await userEvent.click(Admin);\r\n    await userEvent.click(Editor);\r\n    await userEvent.click(Reader);\r\n\r\n    const signupButton = await canvas.findByTestId('Save User');\r\n    const resetButton = await canvas.findByTestId('Reset');\r\n\r\n    await userEvent.click(signupButton, { delay: 400 });\r\n    await userEvent.click(resetButton, { delay: 1000 });\r\n  },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/form/form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {},\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByTestId('Submit')).toBeTruthy();\r\n  },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByText(/Autocomplete Category/gi)).toBeTruthy();\r\n  },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByText(/Checkbox Label/gi)).toBeTruthy();\r\n  },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByText(/Checkbox Label/gi)).toBeTruthy();\r\n  },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/list-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n\r\n    const title = await canvas.findByText(/Select Permissions/gi);\r\n\r\n    expect(title).toBeTruthy();\r\n  },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/number.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByText(/Number Label/gi)).toBeTruthy();\r\n  },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/password.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const password = canvas.getByLabelText(/Password/gi);\r\n    const showPassword = canvas.getByText(/visibility/gi);\r\n    const hidePassword = canvas.getByText(/visibility/gi);\r\n\r\n    expect(password).toBeTruthy();\r\n    userEvent.clear(password);\r\n\r\n    await userEvent.type(password, '!Password123.', { delay: 50 });\r\n    await userEvent.click(showPassword, { delay: 400 });\r\n    await userEvent.click(hidePassword, { delay: 2000 });\r\n  },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByText(/Select Category/gi)).toBeTruthy();\r\n  },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/slide-toggle.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByText(/Slide Toggle/gi)).toBeTruthy();\r\n  },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByText(/Slider Label/gi)).toBeTruthy();\r\n  },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByText(/Text Label/gi)).toBeTruthy();\r\n  },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByText(/textarea works!/gi)).toBeTruthy();\r\n  },\r\n}"
            },
            {
                "name": "loginDto",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ILoginDto",
                "defaultValue": "{\r\n  username: 'user@gmail.com',\r\n  password: '!Password1234.',\r\n}"
            },
            {
                "name": "LoginFormGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/login.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormGroup({\r\n  username: new FormControl(\r\n    '',\r\n    new InputValidator('username').required().isEmail().build()\r\n  ),\r\n  password: new FormControl(\r\n    '',\r\n    new InputValidator('password').required().password().build()\r\n  ),\r\n})"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/forgot-password.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ForgotPasswordFormComponent>",
                "defaultValue": "{\r\n  component: ForgotPasswordFormComponent,\r\n  title: 'ForgotPasswrodComponent',\r\n  tags: ['Auth'],\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [importProvidersFrom(BrowserAnimationsModule)],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/login-with-code.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<LoginWithCodeFormComponent>",
                "defaultValue": "{\r\n  component: LoginWithCodeFormComponent,\r\n  title: 'LoginWithCodeFormComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [importProvidersFrom(BrowserAnimationsModule)],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<LoginFormComponent>",
                "defaultValue": "{\r\n  component: LoginFormComponent,\r\n  title: 'LoginFormComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [importProvidersFrom(BrowserAnimationsModule)],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/permission.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PermissionFormComponent>",
                "defaultValue": "{\n  component: PermissionFormComponent,\n  title: 'PermissionFormComponent',\n  decorators: [\n    applicationConfig({\n      providers: [importProvidersFrom(BrowserAnimationsModule)],\n    }),\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/role.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<RoleFormComponent>",
                "defaultValue": "{\n  component: RoleFormComponent,\n  title: 'RoleFormComponent',\n  decorators: [\n    applicationConfig({\n      providers: [importProvidersFrom(BrowserAnimationsModule)],\n    }),\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/sub.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SubFormComponent>",
                "defaultValue": "{\r\n  component: SubFormComponent,\r\n  title: 'SubFormComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [importProvidersFrom(BrowserAnimationsModule)],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/user.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<UserFormComponent>",
                "defaultValue": "{\r\n  component: UserFormComponent,\r\n  title: 'UserFormComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [importProvidersFrom(BrowserAnimationsModule)],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/form/form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<FormComponent>",
                "defaultValue": "{\r\n  component: FormComponent,\r\n  title: 'FormComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(BrowserAnimationsModule),\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            name: new FormControl('', []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AutocompleteFieldComponent>",
                "defaultValue": "{\r\n  component: AutocompleteFieldComponent,\r\n  title: 'AutocompleteFieldComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(BrowserAnimationsModule),\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            category: new FormControl('', []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CheckboxFieldComponent>",
                "defaultValue": "{\r\n  component: CheckboxFieldComponent,\r\n  title: 'CheckboxFieldComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(BrowserAnimationsModule),\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            active: new FormControl(false, []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DateFieldComponent>",
                "defaultValue": "{\r\n  component: DateFieldComponent,\r\n  title: 'DateFieldComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(BrowserAnimationsModule),\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            date: new FormControl('', []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/list-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ListSelectComponent>",
                "defaultValue": "{\r\n  component: ListSelectComponent,\r\n  title: 'ListSelectComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(BrowserAnimationsModule),\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            permissions: new FormControl([], []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/number.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<NumberFieldComponent>",
                "defaultValue": "{\r\n  component: NumberFieldComponent,\r\n  title: 'NumberFieldComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(BrowserAnimationsModule),\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            age: new FormControl(0, []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/password.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PasswordFieldComponent>",
                "defaultValue": "{\r\n  component: PasswordFieldComponent,\r\n  title: 'PasswordFieldComponent',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [BrowserAnimationsModule],\r\n      providers: [\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            password: new FormControl('', []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SelectFieldComponent>",
                "defaultValue": "{\r\n  component: SelectFieldComponent,\r\n  title: 'SelectFieldComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(BrowserAnimationsModule),\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            category: new FormControl('', []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/slide-toggle.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SlideToggleComponent>",
                "defaultValue": "{\r\n  component: SlideToggleComponent,\r\n  title: 'SlideToggleComponent',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [BrowserAnimationsModule],\r\n      providers: [\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            active: new FormControl(false, []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SliderComponent>",
                "defaultValue": "{\r\n  component: SliderComponent,\r\n  title: 'SliderComponent',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [BrowserAnimationsModule],\r\n      providers: [\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            percent: new FormControl(0, []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TextFieldComponent>",
                "defaultValue": "{\r\n  component: TextFieldComponent,\r\n  title: 'TextFieldComponent',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [BrowserAnimationsModule],\r\n      providers: [\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            name: new FormControl('', []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TextareaFieldComponent>",
                "defaultValue": "{\r\n  component: TextareaFieldComponent,\r\n  title: 'TextareaFieldComponent',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [BrowserAnimationsModule],\r\n      providers: [\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            name: new FormControl('', []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/forgot-password.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/login-with-code.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  argTypes: meta.argTypes,\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/permission.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    formTitle: 'Create New Permission',\n    submitLabel: 'Save',\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/role.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    formTitle: 'Create New Role',\n    submitLabel: 'Save',\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/sub.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {},\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/auth/user.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    formTitle: 'Create User Form',\r\n    submitLabel: 'Save User',\r\n    isUpdateForm: false,\r\n    userRoles: [\r\n      {\r\n        id: 1,\r\n        label: 'Admin',\r\n      },\r\n      {\r\n        id: 2,\r\n        label: 'Editor',\r\n      },\r\n      {\r\n        id: 3,\r\n        label: 'Reader',\r\n      },\r\n    ],\r\n  },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/form/form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {},\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Autocomplete Category',\r\n    inputName: 'category',\r\n    prefixIcon: 'info',\r\n    suffixIcon: '',\r\n    hint: 'Hint',\r\n    required: false,\r\n    isUpdateField: false,\r\n    options: [\r\n      { id: 1, label: '1' },\r\n      { id: 2, label: '2' },\r\n      { id: 3, label: '3' },\r\n      { id: 4, label: '4' },\r\n      { id: 5, label: '5' },\r\n      { id: 6, label: '6' },\r\n      { id: 7, label: '7' },\r\n      { id: 8, label: '8' },\r\n    ],\r\n  },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Checkbox Label',\r\n    inputName: 'active',\r\n    prefixIcon: 'info',\r\n    suffixIcon: '',\r\n    required: false,\r\n    isUpdateField: false,\r\n  },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Pick Date',\r\n    inputName: 'date',\r\n    prefixIcon: 'info',\r\n    suffixIcon: '',\r\n    required: false,\r\n    isUpdateField: false,\r\n  },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/list-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Select Permissions',\r\n    inputName: 'permissions',\r\n    prefixIcon: '',\r\n    suffixIcon: '',\r\n    required: false,\r\n    isUpdateField: false,\r\n\r\n    selectedItems: [{ id: 3 }],\r\n    items: [\r\n      {\r\n        id: 1,\r\n        label: 'User',\r\n        subs: [\r\n          { id: 3, label: 'Read' },\r\n          { id: 4, label: 'Create' },\r\n          { id: 5, label: 'Update' },\r\n          { id: 6, label: 'Delete' },\r\n        ],\r\n      },\r\n      {\r\n        id: 2,\r\n        label: 'Organization',\r\n        subs: [\r\n          { id: 7, label: 'Read' },\r\n          { id: 8, label: 'Create' },\r\n          { id: 9, label: 'Update' },\r\n          { id: 10, label: 'Delete' },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/number.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    inputName: 'age',\r\n    label: 'Number Label',\r\n    min: 18,\r\n    max: 100,\r\n    prefixIcon: 'info',\r\n    suffixIcon: '',\r\n    isUpdateField: false,\r\n  },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/password.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    inputName: 'password',\r\n    label: 'Password',\r\n    prefixIcon: 'password',\r\n    suffixIcon: '',\r\n    hint: 'Password Hint',\r\n    required: false,\r\n    isUpdateField: false,\r\n  },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Select Category',\r\n    inputName: 'category',\r\n    prefixIcon: 'info',\r\n    suffixIcon: '',\r\n    isUpdateField: false,\r\n    options: [\r\n      { id: 1, label: 'First' },\r\n      { id: 2, label: 'Second' },\r\n      { id: 3, label: 'Third' },\r\n    ],\r\n  },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/slide-toggle.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    inputName: 'active',\r\n    label: 'Slide Toggle',\r\n    prefixIcon: 'info',\r\n    suffixIcon: '',\r\n    isUpdateField: false,\r\n    required: false,\r\n  },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Slider Label',\r\n    inputName: 'percent',\r\n    prefixIcon: 'numbers',\r\n    suffixIcon: '',\r\n    min: 0,\r\n    max: 100,\r\n  },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    inputName: 'name',\r\n    label: 'Text Label',\r\n    minLength: 0,\r\n    maxLength: 400,\r\n    prefixIcon: 'info',\r\n    suffixIcon: '',\r\n    isUpdateField: false,\r\n  },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/fields/textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    inputName: 'name',\r\n    minLength: 0,\r\n    maxLength: 400,\r\n    inputType: 'text',\r\n    label: 'Text Label',\r\n    hint: 'Hint',\r\n    prefixIcon: '',\r\n    suffixIcon: '',\r\n    isUpdateField: false,\r\n  },\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ForgotPasswordFormComponent>",
                "file": "libs/form/src/lib/auth/forgot-password.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<LoginWithCodeFormComponent>",
                "file": "libs/form/src/lib/auth/login-with-code.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<LoginFormComponent>",
                "file": "libs/form/src/lib/auth/login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PermissionFormComponent>",
                "file": "libs/form/src/lib/auth/permission.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<RoleFormComponent>",
                "file": "libs/form/src/lib/auth/role.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SubFormComponent>",
                "file": "libs/form/src/lib/auth/sub.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<UserFormComponent>",
                "file": "libs/form/src/lib/auth/user.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<FormComponent>",
                "file": "libs/form/src/lib/form/form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AutocompleteFieldComponent>",
                "file": "libs/form/src/lib/fields/autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CheckboxFieldComponent>",
                "file": "libs/form/src/lib/fields/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DateFieldComponent>",
                "file": "libs/form/src/lib/fields/date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ListSelectComponent>",
                "file": "libs/form/src/lib/fields/list-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<NumberFieldComponent>",
                "file": "libs/form/src/lib/fields/number.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PasswordFieldComponent>",
                "file": "libs/form/src/lib/fields/password.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SelectFieldComponent>",
                "file": "libs/form/src/lib/fields/select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SlideToggleComponent>",
                "file": "libs/form/src/lib/fields/slide-toggle.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SliderComponent>",
                "file": "libs/form/src/lib/fields/slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TextFieldComponent>",
                "file": "libs/form/src/lib/fields/text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TextareaFieldComponent>",
                "file": "libs/form/src/lib/fields/textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "libs/form/src/lib/fields/error-animations.ts": [
                {
                    "name": "ErrorAnimations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/error-animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AnimationTriggerMetadata[]",
                    "defaultValue": "[\r\n  bounceInDownOnEnterAnimation({ anchor: 'enter' }),\r\n  bounceOutUpOnLeaveAnimation({ anchor: 'leave' }),\r\n]"
                }
            ],
            "libs/form/src/lib/auth/forgot-password.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/forgot-password.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n\r\n    const username = canvas.getByTestId('username');\r\n    const forgotPasswordButton = canvas.getByTestId(/Forgot Password/);\r\n    const resetButton = canvas.getByTestId(/Reset/);\r\n\r\n    expect(username).toBeTruthy();\r\n\r\n    await userEvent.clear(username);\r\n\r\n    await userEvent.type(username, 'user@gmail.com', { delay: 100 });\r\n\r\n    await userEvent.click(forgotPasswordButton, { delay: 1000 });\r\n    await userEvent.click(resetButton, { delay: 1000 });\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/forgot-password.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ForgotPasswordFormComponent>",
                    "defaultValue": "{\r\n  component: ForgotPasswordFormComponent,\r\n  title: 'ForgotPasswrodComponent',\r\n  tags: ['Auth'],\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [importProvidersFrom(BrowserAnimationsModule)],\r\n    }),\r\n  ],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/forgot-password.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                }
            ],
            "libs/form/src/lib/auth/login-with-code.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/login-with-code.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  argTypes: meta.argTypes,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n\r\n    const username = canvas.getByTestId('username');\r\n    const securityCode = canvas.getByTestId('securityCode');\r\n\r\n    const loginButton = canvas.getByTestId(/Login/);\r\n    const resetButton = canvas.getByTestId(/Reset/);\r\n\r\n    expect(username).toBeTruthy();\r\n    expect(securityCode).toBeTruthy();\r\n\r\n    await userEvent.clear(username);\r\n    await userEvent.clear(securityCode);\r\n\r\n    await userEvent.type(username, 'user@gmail.com', { delay: 100 });\r\n    await userEvent.type(securityCode, 'oauoo-982749-asjdf-aerqw', {\r\n      delay: 100,\r\n    });\r\n\r\n    await userEvent.click(loginButton, { delay: 1000 });\r\n    await userEvent.click(resetButton, { delay: 1000 });\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/login-with-code.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<LoginWithCodeFormComponent>",
                    "defaultValue": "{\r\n  component: LoginWithCodeFormComponent,\r\n  title: 'LoginWithCodeFormComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [importProvidersFrom(BrowserAnimationsModule)],\r\n    }),\r\n  ],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/login-with-code.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  argTypes: meta.argTypes,\r\n}"
                }
            ],
            "libs/form/src/lib/auth/login.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  play: async (args) => {\r\n    const { canvasElement } = args;\r\n    console.log(args);\r\n    const canvas = within(canvasElement);\r\n\r\n    const username = canvas.getByTestId('username');\r\n    const password = canvas.getByTestId('password');\r\n\r\n    const loginButton = canvas.getByTestId(/Login/);\r\n    const resetButton = canvas.getByTestId(/Reset/);\r\n\r\n    expect(username).toBeTruthy();\r\n    expect(password).toBeTruthy();\r\n\r\n    await userEvent.clear(username);\r\n    await userEvent.clear(password);\r\n\r\n    await userEvent.type(username, loginDto.username, { delay: 100 });\r\n    await userEvent.type(password, loginDto.password, { delay: 100 });\r\n\r\n    await userEvent.click(loginButton, { delay: 1000 });\r\n\r\n    expect(LoginFormGroup.value.username).toBe(loginDto.username);\r\n    expect(LoginFormGroup.value.password).toBe(loginDto.password);\r\n\r\n    await userEvent.click(resetButton, { delay: 1000 });\r\n  },\r\n}"
                },
                {
                    "name": "loginDto",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILoginDto",
                    "defaultValue": "{\r\n  username: 'user@gmail.com',\r\n  password: '!Password1234.',\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<LoginFormComponent>",
                    "defaultValue": "{\r\n  component: LoginFormComponent,\r\n  title: 'LoginFormComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [importProvidersFrom(BrowserAnimationsModule)],\r\n    }),\r\n  ],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                }
            ],
            "libs/form/src/lib/auth/permission.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/permission.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    formTitle: 'Create New Permission',\n    submitLabel: 'Save',\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/Create New Permission/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/permission.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PermissionFormComponent>",
                    "defaultValue": "{\n  component: PermissionFormComponent,\n  title: 'PermissionFormComponent',\n  decorators: [\n    applicationConfig({\n      providers: [importProvidersFrom(BrowserAnimationsModule)],\n    }),\n  ],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/permission.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    formTitle: 'Create New Permission',\n    submitLabel: 'Save',\n  },\n}"
                }
            ],
            "libs/form/src/lib/auth/role.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/role.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    formTitle: 'Create New Role',\n    submitLabel: 'Save',\n    permissionList: [\n      {\n        id: 1,\n        label: 'User',\n        subs: [\n          { id: 2, label: 'Read' },\n          { id: 3, label: 'Create' },\n          { id: 4, label: 'Update' },\n          { id: 5, label: 'Delete' },\n        ],\n      },\n      {\n        id: 6,\n        label: 'Store',\n        subs: [\n          { id: 7, label: 'Read' },\n          { id: 8, label: 'Create' },\n          { id: 9, label: 'Update' },\n          { id: 10, label: 'Delete' },\n        ],\n      },\n    ],\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/Create New Role/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/role.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<RoleFormComponent>",
                    "defaultValue": "{\n  component: RoleFormComponent,\n  title: 'RoleFormComponent',\n  decorators: [\n    applicationConfig({\n      providers: [importProvidersFrom(BrowserAnimationsModule)],\n    }),\n  ],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/role.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    formTitle: 'Create New Role',\n    submitLabel: 'Save',\n  },\n}"
                }
            ],
            "libs/form/src/lib/auth/sub.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/sub.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    subtypeList: [\r\n      { id: 1, label: 'Premium' },\r\n      { id: 2, label: 'Gold' },\r\n      { id: 3, label: 'Economy' },\r\n      { id: 4, label: 'Basic' },\r\n    ],\r\n  },\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const username = canvas.getByTestId('username');\r\n    const password = canvas.getByTestId('password');\r\n    const organizationName = canvas.getByTestId('organizationName');\r\n    const subType = canvas.getByTestId('subType');\r\n\r\n    expect(username).toBeTruthy();\r\n    expect(password).toBeTruthy();\r\n    expect(organizationName).toBeTruthy();\r\n    expect(subType).toBeTruthy();\r\n\r\n    await userEvent.clear(username);\r\n    await userEvent.clear(password);\r\n    await userEvent.clear(organizationName);\r\n\r\n    await userEvent.type(username, 'user@domain.com', { delay: 50 });\r\n    await userEvent.type(password, '!Password1234.', { delay: 50 });\r\n    await userEvent.type(organizationName, 'Web Telescope', { delay: 50 });\r\n    await userEvent.type(subType, 'Gold', { delay: 50 });\r\n\r\n    const option = document.querySelector('[data-testid=\"Gold\"]');\r\n    await userEvent.click(option!);\r\n\r\n    const signupButton = await canvas.findByTestId('Sign Up');\r\n    const resetButton = await canvas.findByTestId('Reset');\r\n\r\n    await userEvent.click(signupButton, { delay: 400 });\r\n    await userEvent.click(resetButton, { delay: 1000 });\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/sub.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SubFormComponent>",
                    "defaultValue": "{\r\n  component: SubFormComponent,\r\n  title: 'SubFormComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [importProvidersFrom(BrowserAnimationsModule)],\r\n    }),\r\n  ],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/sub.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {},\r\n}"
                }
            ],
            "libs/form/src/lib/auth/user.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/user.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const username = canvas.getByTestId('username');\r\n    const roles = canvas.getByTestId('roles');\r\n    const Admin = canvas.getByTestId('Admin');\r\n    const Editor = canvas.getByTestId('Editor');\r\n    const Reader = canvas.getByTestId('Reader');\r\n\r\n    expect(Admin).toBeTruthy();\r\n    expect(Editor).toBeTruthy();\r\n    expect(Reader).toBeTruthy();\r\n\r\n    expect(username).toBeTruthy();\r\n    expect(roles).toBeTruthy();\r\n\r\n    await userEvent.clear(username);\r\n\r\n    await userEvent.type(username, 'user@domain.com', { delay: 50 });\r\n    await userEvent.click(Admin);\r\n    await userEvent.click(Editor);\r\n    await userEvent.click(Reader);\r\n\r\n    const signupButton = await canvas.findByTestId('Save User');\r\n    const resetButton = await canvas.findByTestId('Reset');\r\n\r\n    await userEvent.click(signupButton, { delay: 400 });\r\n    await userEvent.click(resetButton, { delay: 1000 });\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/user.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<UserFormComponent>",
                    "defaultValue": "{\r\n  component: UserFormComponent,\r\n  title: 'UserFormComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [importProvidersFrom(BrowserAnimationsModule)],\r\n    }),\r\n  ],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/user.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    formTitle: 'Create User Form',\r\n    submitLabel: 'Save User',\r\n    isUpdateForm: false,\r\n    userRoles: [\r\n      {\r\n        id: 1,\r\n        label: 'Admin',\r\n      },\r\n      {\r\n        id: 2,\r\n        label: 'Editor',\r\n      },\r\n      {\r\n        id: 3,\r\n        label: 'Reader',\r\n      },\r\n    ],\r\n  },\r\n}"
                }
            ],
            "libs/form/src/lib/form/form.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/form/form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {},\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByTestId('Submit')).toBeTruthy();\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/form/form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<FormComponent>",
                    "defaultValue": "{\r\n  component: FormComponent,\r\n  title: 'FormComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(BrowserAnimationsModule),\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            name: new FormControl('', []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/form/form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {},\r\n}"
                }
            ],
            "libs/form/src/lib/fields/autocomplete.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByText(/Autocomplete Category/gi)).toBeTruthy();\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AutocompleteFieldComponent>",
                    "defaultValue": "{\r\n  component: AutocompleteFieldComponent,\r\n  title: 'AutocompleteFieldComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(BrowserAnimationsModule),\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            category: new FormControl('', []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Autocomplete Category',\r\n    inputName: 'category',\r\n    prefixIcon: 'info',\r\n    suffixIcon: '',\r\n    hint: 'Hint',\r\n    required: false,\r\n    isUpdateField: false,\r\n    options: [\r\n      { id: 1, label: '1' },\r\n      { id: 2, label: '2' },\r\n      { id: 3, label: '3' },\r\n      { id: 4, label: '4' },\r\n      { id: 5, label: '5' },\r\n      { id: 6, label: '6' },\r\n      { id: 7, label: '7' },\r\n      { id: 8, label: '8' },\r\n    ],\r\n  },\r\n}"
                }
            ],
            "libs/form/src/lib/fields/checkbox.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByText(/Checkbox Label/gi)).toBeTruthy();\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CheckboxFieldComponent>",
                    "defaultValue": "{\r\n  component: CheckboxFieldComponent,\r\n  title: 'CheckboxFieldComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(BrowserAnimationsModule),\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            active: new FormControl(false, []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Checkbox Label',\r\n    inputName: 'active',\r\n    prefixIcon: 'info',\r\n    suffixIcon: '',\r\n    required: false,\r\n    isUpdateField: false,\r\n  },\r\n}"
                }
            ],
            "libs/form/src/lib/fields/date.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByText(/Checkbox Label/gi)).toBeTruthy();\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DateFieldComponent>",
                    "defaultValue": "{\r\n  component: DateFieldComponent,\r\n  title: 'DateFieldComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(BrowserAnimationsModule),\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            date: new FormControl('', []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Pick Date',\r\n    inputName: 'date',\r\n    prefixIcon: 'info',\r\n    suffixIcon: '',\r\n    required: false,\r\n    isUpdateField: false,\r\n  },\r\n}"
                }
            ],
            "libs/form/src/lib/fields/list-select.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/list-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n\r\n    const title = await canvas.findByText(/Select Permissions/gi);\r\n\r\n    expect(title).toBeTruthy();\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/list-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ListSelectComponent>",
                    "defaultValue": "{\r\n  component: ListSelectComponent,\r\n  title: 'ListSelectComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(BrowserAnimationsModule),\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            permissions: new FormControl([], []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/list-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Select Permissions',\r\n    inputName: 'permissions',\r\n    prefixIcon: '',\r\n    suffixIcon: '',\r\n    required: false,\r\n    isUpdateField: false,\r\n\r\n    selectedItems: [{ id: 3 }],\r\n    items: [\r\n      {\r\n        id: 1,\r\n        label: 'User',\r\n        subs: [\r\n          { id: 3, label: 'Read' },\r\n          { id: 4, label: 'Create' },\r\n          { id: 5, label: 'Update' },\r\n          { id: 6, label: 'Delete' },\r\n        ],\r\n      },\r\n      {\r\n        id: 2,\r\n        label: 'Organization',\r\n        subs: [\r\n          { id: 7, label: 'Read' },\r\n          { id: 8, label: 'Create' },\r\n          { id: 9, label: 'Update' },\r\n          { id: 10, label: 'Delete' },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n}"
                }
            ],
            "libs/form/src/lib/fields/number.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/number.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByText(/Number Label/gi)).toBeTruthy();\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/number.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<NumberFieldComponent>",
                    "defaultValue": "{\r\n  component: NumberFieldComponent,\r\n  title: 'NumberFieldComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(BrowserAnimationsModule),\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            age: new FormControl(0, []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/number.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    inputName: 'age',\r\n    label: 'Number Label',\r\n    min: 18,\r\n    max: 100,\r\n    prefixIcon: 'info',\r\n    suffixIcon: '',\r\n    isUpdateField: false,\r\n  },\r\n}"
                }
            ],
            "libs/form/src/lib/fields/password.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/password.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const password = canvas.getByLabelText(/Password/gi);\r\n    const showPassword = canvas.getByText(/visibility/gi);\r\n    const hidePassword = canvas.getByText(/visibility/gi);\r\n\r\n    expect(password).toBeTruthy();\r\n    userEvent.clear(password);\r\n\r\n    await userEvent.type(password, '!Password123.', { delay: 50 });\r\n    await userEvent.click(showPassword, { delay: 400 });\r\n    await userEvent.click(hidePassword, { delay: 2000 });\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/password.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PasswordFieldComponent>",
                    "defaultValue": "{\r\n  component: PasswordFieldComponent,\r\n  title: 'PasswordFieldComponent',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [BrowserAnimationsModule],\r\n      providers: [\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            password: new FormControl('', []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/password.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    inputName: 'password',\r\n    label: 'Password',\r\n    prefixIcon: 'password',\r\n    suffixIcon: '',\r\n    hint: 'Password Hint',\r\n    required: false,\r\n    isUpdateField: false,\r\n  },\r\n}"
                }
            ],
            "libs/form/src/lib/fields/select.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByText(/Select Category/gi)).toBeTruthy();\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SelectFieldComponent>",
                    "defaultValue": "{\r\n  component: SelectFieldComponent,\r\n  title: 'SelectFieldComponent',\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(BrowserAnimationsModule),\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            category: new FormControl('', []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Select Category',\r\n    inputName: 'category',\r\n    prefixIcon: 'info',\r\n    suffixIcon: '',\r\n    isUpdateField: false,\r\n    options: [\r\n      { id: 1, label: 'First' },\r\n      { id: 2, label: 'Second' },\r\n      { id: 3, label: 'Third' },\r\n    ],\r\n  },\r\n}"
                }
            ],
            "libs/form/src/lib/fields/slide-toggle.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/slide-toggle.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByText(/Slide Toggle/gi)).toBeTruthy();\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/slide-toggle.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SlideToggleComponent>",
                    "defaultValue": "{\r\n  component: SlideToggleComponent,\r\n  title: 'SlideToggleComponent',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [BrowserAnimationsModule],\r\n      providers: [\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            active: new FormControl(false, []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/slide-toggle.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    inputName: 'active',\r\n    label: 'Slide Toggle',\r\n    prefixIcon: 'info',\r\n    suffixIcon: '',\r\n    isUpdateField: false,\r\n    required: false,\r\n  },\r\n}"
                }
            ],
            "libs/form/src/lib/fields/slider.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByText(/Slider Label/gi)).toBeTruthy();\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SliderComponent>",
                    "defaultValue": "{\r\n  component: SliderComponent,\r\n  title: 'SliderComponent',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [BrowserAnimationsModule],\r\n      providers: [\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            percent: new FormControl(0, []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Slider Label',\r\n    inputName: 'percent',\r\n    prefixIcon: 'numbers',\r\n    suffixIcon: '',\r\n    min: 0,\r\n    max: 100,\r\n  },\r\n}"
                }
            ],
            "libs/form/src/lib/fields/text.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByText(/Text Label/gi)).toBeTruthy();\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TextFieldComponent>",
                    "defaultValue": "{\r\n  component: TextFieldComponent,\r\n  title: 'TextFieldComponent',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [BrowserAnimationsModule],\r\n      providers: [\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            name: new FormControl('', []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    inputName: 'name',\r\n    label: 'Text Label',\r\n    minLength: 0,\r\n    maxLength: 400,\r\n    prefixIcon: 'info',\r\n    suffixIcon: '',\r\n    isUpdateField: false,\r\n  },\r\n}"
                }
            ],
            "libs/form/src/lib/fields/textarea.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: Primary.args,\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByText(/textarea works!/gi)).toBeTruthy();\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TextareaFieldComponent>",
                    "defaultValue": "{\r\n  component: TextareaFieldComponent,\r\n  title: 'TextareaFieldComponent',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [BrowserAnimationsModule],\r\n      providers: [\r\n        {\r\n          provide: FormGroup,\r\n          useValue: new FormGroup({\r\n            name: new FormControl('', []),\r\n          }),\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/fields/textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    inputName: 'name',\r\n    minLength: 0,\r\n    maxLength: 400,\r\n    inputType: 'text',\r\n    label: 'Text Label',\r\n    hint: 'Hint',\r\n    prefixIcon: '',\r\n    suffixIcon: '',\r\n    isUpdateField: false,\r\n  },\r\n}"
                }
            ],
            "libs/form/src/lib/auth/login.ts": [
                {
                    "name": "LoginFormGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/auth/login.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormGroup({\r\n  username: new FormControl(\r\n    '',\r\n    new InputValidator('username').required().isEmail().build()\r\n  ),\r\n  password: new FormControl(\r\n    '',\r\n    new InputValidator('password').required().password().build()\r\n  ),\r\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "libs/form/src/lib/auth/forgot-password.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ForgotPasswordFormComponent>",
                    "file": "libs/form/src/lib/auth/forgot-password.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/form/src/lib/auth/login-with-code.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<LoginWithCodeFormComponent>",
                    "file": "libs/form/src/lib/auth/login-with-code.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/form/src/lib/auth/login.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<LoginFormComponent>",
                    "file": "libs/form/src/lib/auth/login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/form/src/lib/auth/permission.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PermissionFormComponent>",
                    "file": "libs/form/src/lib/auth/permission.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/form/src/lib/auth/role.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<RoleFormComponent>",
                    "file": "libs/form/src/lib/auth/role.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/form/src/lib/auth/sub.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SubFormComponent>",
                    "file": "libs/form/src/lib/auth/sub.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/form/src/lib/auth/user.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<UserFormComponent>",
                    "file": "libs/form/src/lib/auth/user.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/form/src/lib/form/form.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<FormComponent>",
                    "file": "libs/form/src/lib/form/form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/form/src/lib/fields/autocomplete.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AutocompleteFieldComponent>",
                    "file": "libs/form/src/lib/fields/autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/form/src/lib/fields/checkbox.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CheckboxFieldComponent>",
                    "file": "libs/form/src/lib/fields/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/form/src/lib/fields/date.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DateFieldComponent>",
                    "file": "libs/form/src/lib/fields/date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/form/src/lib/fields/list-select.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ListSelectComponent>",
                    "file": "libs/form/src/lib/fields/list-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/form/src/lib/fields/number.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<NumberFieldComponent>",
                    "file": "libs/form/src/lib/fields/number.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/form/src/lib/fields/password.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PasswordFieldComponent>",
                    "file": "libs/form/src/lib/fields/password.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/form/src/lib/fields/select.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SelectFieldComponent>",
                    "file": "libs/form/src/lib/fields/select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/form/src/lib/fields/slide-toggle.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SlideToggleComponent>",
                    "file": "libs/form/src/lib/fields/slide-toggle.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/form/src/lib/fields/slider.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SliderComponent>",
                    "file": "libs/form/src/lib/fields/slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/form/src/lib/fields/text.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TextFieldComponent>",
                    "file": "libs/form/src/lib/fields/text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/form/src/lib/fields/textarea.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TextareaFieldComponent>",
                    "file": "libs/form/src/lib/fields/textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 11,
        "status": "low",
        "files": [
            {
                "filePath": "libs/form/src/lib/auth/forgot-password.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/forgot-password.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/forgot-password.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/forgot-password.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPasswordFormComponent",
                "coveragePercent": 42,
                "coverageCount": "6/14",
                "status": "medium"
            },
            {
                "filePath": "libs/form/src/lib/auth/login-with-code.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/login-with-code.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/login-with-code.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/login-with-code.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginWithCodeFormComponent",
                "coveragePercent": 33,
                "coverageCount": "5/15",
                "status": "medium"
            },
            {
                "filePath": "libs/form/src/lib/auth/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/login.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginFormComponent",
                "coveragePercent": 63,
                "coverageCount": "7/11",
                "status": "good"
            },
            {
                "filePath": "libs/form/src/lib/auth/login.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoginFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/permission.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/permission.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/permission.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/permission.ts",
                "type": "component",
                "linktype": "component",
                "name": "PermissionFormComponent",
                "coveragePercent": 27,
                "coverageCount": "3/11",
                "status": "medium"
            },
            {
                "filePath": "libs/form/src/lib/auth/role.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/role.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/role.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/role.ts",
                "type": "component",
                "linktype": "component",
                "name": "RoleFormComponent",
                "coveragePercent": 21,
                "coverageCount": "3/14",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/sub.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/sub.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/sub.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/sub.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubFormComponent",
                "coveragePercent": 30,
                "coverageCount": "6/20",
                "status": "medium"
            },
            {
                "filePath": "libs/form/src/lib/auth/user.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/user.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/user.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/auth/user.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserFormComponent",
                "coveragePercent": 21,
                "coverageCount": "3/14",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/autocomplete.ts",
                "type": "component",
                "linktype": "component",
                "name": "AutocompleteFieldComponent",
                "coveragePercent": 50,
                "coverageCount": "11/22",
                "status": "medium"
            },
            {
                "filePath": "libs/form/src/lib/fields/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/checkbox.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxFieldComponent",
                "coveragePercent": 58,
                "coverageCount": "10/17",
                "status": "good"
            },
            {
                "filePath": "libs/form/src/lib/fields/date.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/date.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/date.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/date.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateFieldComponent",
                "coveragePercent": 58,
                "coverageCount": "10/17",
                "status": "good"
            },
            {
                "filePath": "libs/form/src/lib/fields/error-animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ErrorAnimations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/field.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseFieldComponent",
                "coveragePercent": 55,
                "coverageCount": "10/18",
                "status": "good"
            },
            {
                "filePath": "libs/form/src/lib/fields/field.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ErrorState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/list-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/list-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/list-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/list-select.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListSelectComponent",
                "coveragePercent": 38,
                "coverageCount": "10/26",
                "status": "medium"
            },
            {
                "filePath": "libs/form/src/lib/fields/number.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/number.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/number.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/number.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumberFieldComponent",
                "coveragePercent": 50,
                "coverageCount": "10/20",
                "status": "medium"
            },
            {
                "filePath": "libs/form/src/lib/fields/password.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/password.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/password.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/password.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordFieldComponent",
                "coveragePercent": 50,
                "coverageCount": "10/20",
                "status": "medium"
            },
            {
                "filePath": "libs/form/src/lib/fields/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/select.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectFieldComponent",
                "coveragePercent": 63,
                "coverageCount": "12/19",
                "status": "good"
            },
            {
                "filePath": "libs/form/src/lib/fields/slide-toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/slide-toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/slide-toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/slide-toggle.ts",
                "type": "component",
                "linktype": "component",
                "name": "SlideToggleComponent",
                "coveragePercent": 58,
                "coverageCount": "10/17",
                "status": "good"
            },
            {
                "filePath": "libs/form/src/lib/fields/slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/slider.ts",
                "type": "component",
                "linktype": "component",
                "name": "SliderComponent",
                "coveragePercent": 52,
                "coverageCount": "10/19",
                "status": "good"
            },
            {
                "filePath": "libs/form/src/lib/fields/text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/text.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextFieldComponent",
                "coveragePercent": 63,
                "coverageCount": "12/19",
                "status": "good"
            },
            {
                "filePath": "libs/form/src/lib/fields/textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/fields/textarea.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextareaFieldComponent",
                "coveragePercent": 63,
                "coverageCount": "12/19",
                "status": "good"
            },
            {
                "filePath": "libs/form/src/lib/form/form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/form/form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/form/form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/form/form.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 50,
                "coverageCount": "5/10",
                "status": "medium"
            },
            {
                "filePath": "libs/form/src/lib/form/validator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "InputValidator",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            }
        ]
    }
}