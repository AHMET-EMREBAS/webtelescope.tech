
@Injectable()
export class SampleService extends RepositoryService<Sample> {
  constructor(@InjectRepository(Sample) repo: Repository<Sample>) {
    super(repo);
  }
}
const P = getApiPaths(Sample.name);

@Controller({
  tags: [SampleController.name],
})
export class SampleController {
  constructor(protected readonly service: SampleService) {}
  @Get({ path: P.PLURAL_PATH })
  async findAll(
    @Query() paginator: PaginatorDto,
    @Query() queryDto: SampleQuery
  ) {
    return await this.service.find({ ...paginator, where: { ...queryDto } });
  }

  @Post({ path: P.SINGULAR_PATH })
  async save(@Body() body: Sample) {
    return await this.service.save(body);
  }

  @Update({ path: P.BY_ID_PATH })
  update(@Param('id') id: number, @Body() body: Sample) {
    return this.service.update(id, body);
  }

  @Delete({ path: P.BY_ID_PATH })
  delete(@Param('id') id: number) {
    return this.service.delete(id);
  }

  @SetRelation({ path: P.RELATION_NAME_AND_ID_PATH })
  setRelation(@Param() param: RelationDto) {
    const { relationName, entityId, relationId } = param;
    return this.service
      .createQueryBuilder()
      .relation(relationName)
      .of(entityId)
      .set(relationId);
  }
  @UnsetRelation({ path: P.RELATION_NAME_PATH })
  unsetRelation(@Param() param: UnsetRelationDto) {
    const { relationName, entityId } = param;
    return this.service
      .createQueryBuilder()
      .relation(relationName)
      .of(entityId)
      .set(null);
  }

  @AddRelation({ path: P.RELATION_NAME_AND_ID_PATH })
  addRelation(@Param() param: RelationDto) {
    const { relationName, entityId, relationId } = param;
    return this.service
      .createQueryBuilder()
      .relation(relationName)
      .of(entityId)
      .set(relationId);
  }

  @RemoveRelation({ path: P.RELATION_NAME_AND_ID_PATH })
  removeRelation(@Param() param: RelationDto) {
    const { relationName, entityId, relationId } = param;
    return this.service
      .createQueryBuilder()
      .relation(relationName)
      .of(entityId)
      .set(relationId);
  }
}
