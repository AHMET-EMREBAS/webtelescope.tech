import {
  Body,
  Controller,
  Delete,
  Get,
  Param,
  ParseIntPipe,
  Post,
  Put,
  Query,
} from '@nestjs/common';
import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';
import { AUTH_TOKEN_NAME } from '@webpackages/common';
import { Permissions } from '@webpackages/auth';
import { ValidationPipe } from '@webpackages/rest';
import { Create<%- className %>Dto, Query<%- className %>Dto, Update<%- className %>Dto } from './dto';
import { <%- className %>Service } from './<%- fileName %>.service';

@ApiBearerAuth(AUTH_TOKEN_NAME)
@ApiTags('<%- className %>Controller')
@Controller()
export class <%- className %>Controller {
  constructor(protected readonly <%- fileName %>Service: <%- className %>Service) {}

  @Permissions('<%- fileName %>:read')
  @Get('<%- fileName %>s')
  async findAll<%- className %>s(@Query(ValidationPipe) query: Query<%- className %>Dto) {
    return this.<%- fileName %>Service.find(query);
  }

  @Permissions('<%- fileName %>:read')
  @Get('<%- fileName %>/:id')
  find<%- className %>ById(@Param('id', ParseIntPipe) id: number) {
    return this.<%- fileName %>Service.findOneById(id);
  }
  @Permissions('<%- fileName %>:read')
  @Post('<%- fileName %>')
  async save(@Body(ValidationPipe) entity: Create<%- className %>Dto) {
    return this.<%- fileName %>Service.save(entity);
  }

  @Permissions('<%- fileName %>:update')
  @Put('<%- fileName %>/:id')
  update(
    @Param('id', ParseIntPipe) id: number,
    @Body(ValidationPipe) entity: Update<%- className %>Dto
  ) {
    return this.<%- fileName %>Service.update(id, entity);
  }

  @Permissions('<%- fileName %>:delete')
  @Delete('<%- fileName %>/:id')
  delete(@Param('id', ParseIntPipe) id: number) {
    return this.<%- fileName %>Service.delete(id);
  }
}
