{
    "pipes": [],
    "interfaces": [
        {
            "name": "IElementRef",
            "id": "interface-IElementRef-62cd471cbc9bbbe57c58689b4026c8acfb7182cd75c15be2b8df94f695a511bf9c775fb564c1db8154e9475aaf6a76d4d434b798790fd247ca4e630d2e258dd6",
            "file": "libs/material/src/lib/common/types/element-ref.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ElementRef } from '@angular/core';\r\n\r\nexport interface IElementRef<T> {\r\n  elementRef: ElementRef<T>;\r\n}\r\n",
            "properties": [
                {
                    "name": "elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<T>",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ITemplateRef",
            "id": "interface-ITemplateRef-4e3d17c38f71b0e19a21ce45d10211ffc3d5d8634d4fb43dbd4c134597aa3f098f6281dd19e8b1debbe85432105af982387eb0d1184412447a0d20134986be30",
            "file": "libs/material/src/lib/common/types/template-ref.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\r\n\r\nexport interface ITemplateRef<T> {\r\n  templateRef: TemplateRef<T>;\r\n}\r\n",
            "properties": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<T>",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IToggle",
            "id": "interface-IToggle-fb9c9560012b72552865a0b6466f02662e25c49e4da1049119ef67e800b6922b823be680c3cf9aca2f2e704facb0e55a3096079bd1f56afd2297cf88a72d1981",
            "file": "libs/material/src/lib/common/types/toggle.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IToggleValue {\r\n  /**\r\n   * @param actualValue Actual value\r\n   * @param conditionalValue Conditional value\r\n   */\r\n  toggleValue<T>(actualValue: T, conditionalValue: T): T;\r\n}\r\n\r\nexport interface IToggle {\r\n  /**\r\n   *\r\n   * @param anyRequriedInput Toggle any thing\r\n   */\r\n  toggle<T>(anyRequriedInput?: T): void;\r\n  toggle<T>(anyRequriedInput: T): void;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "anyRequriedInput",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 250,
                                "end": 266,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "anyRequriedInput"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 244,
                                "end": 249,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Toggle any thing</p>\n"
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "anyRequriedInput",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "anyRequriedInput",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "IToggleValue",
            "id": "interface-IToggleValue-fb9c9560012b72552865a0b6466f02662e25c49e4da1049119ef67e800b6922b823be680c3cf9aca2f2e704facb0e55a3096079bd1f56afd2297cf88a72d1981",
            "file": "libs/material/src/lib/common/types/toggle.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IToggleValue {\r\n  /**\r\n   * @param actualValue Actual value\r\n   * @param conditionalValue Conditional value\r\n   */\r\n  toggleValue<T>(actualValue: T, conditionalValue: T): T;\r\n}\r\n\r\nexport interface IToggle {\r\n  /**\r\n   *\r\n   * @param anyRequriedInput Toggle any thing\r\n   */\r\n  toggle<T>(anyRequriedInput?: T): void;\r\n  toggle<T>(anyRequriedInput: T): void;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "toggleValue",
                    "args": [
                        {
                            "name": "actualValue",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "conditionalValue",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 52,
                                "end": 63,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "actualValue"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 46,
                                "end": 51,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Actual value</p>\n"
                        },
                        {
                            "name": {
                                "pos": 90,
                                "end": 106,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "conditionalValue"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 84,
                                "end": 89,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Conditional value</p>\n"
                        }
                    ]
                }
            ],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "AppLogoDirective",
            "id": "directive-AppLogoDirective-acc8b6064aa401689bf25b8d88a89c44dd88721386d9663242ceca42238096198c74f63d6b0185dd2a8b2e54980082a640ec30d78fc17649d457acd6f52bd5e9",
            "file": "libs/material/src/lib/common/app-logo/app-logo.directive.ts",
            "type": "directive",
            "description": "<p>You can style the app-logo using app-logo class</p>\n",
            "rawdescription": "\n\nYou can style the app-logo using app-logo class\n",
            "sourceCode": "import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { IElementRef } from '../types';\n\n/**\n * You can style the app-logo using app-logo class\n */\n@Directive({\n  selector: '[wtAppLogo]',\n  standalone: true,\n})\nexport class AppLogoDirective implements IElementRef<HTMLImageElement>, OnInit {\n  constructor(public elementRef: ElementRef<HTMLImageElement>) {}\n\n  ngOnInit(): void {\n    this.elementRef.nativeElement.classList.add('app-logo');\n\n    this.elementRef.nativeElement.setAttribute(\n      'src',\n      'assets/icons/icon-72x72.png'\n    );\n\n    this.elementRef.nativeElement.setAttribute('alt', 'App Logo');\n  }\n}\n",
            "selector": "[wtAppLogo]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLImageElement>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": [],
            "implements": [
                "IElementRef",
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLImageElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLImageElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ContainerContentDirective",
            "id": "directive-ContainerContentDirective-4507a6b9d8f60a98a94dadbab8c7f38addd1d22c1203f78dce58fe15d1d2100359e409601b99f4fd63e3760aa176cf0c4facc7a91c3ef040acfd0591ed548f32",
            "file": "libs/material/src/lib/common/container/container.component.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Component,\n  ContentChildren,\n  Directive,\n  Input,\n  QueryList,\n  TemplateRef,\n} from '@angular/core';\nimport { CommonModule, NgTemplateOutlet } from '@angular/common';\nimport { TemplateOutletComponent } from '../template-outlet/template-outlet.component';\nimport { ITemplateRef } from '../types';\n\nexport type ContainerType =\n  | 'row'\n  | 'column'\n  | 'right'\n  | 'left'\n  | 'top'\n  | 'bottom';\n\nexport type Direction = 'row' | 'column';\nexport type JustifyContent =\n  | 'baseline'\n  | 'center'\n  | 'end'\n  | 'flex-end'\n  | 'flex-start'\n  | 'left'\n  | 'right'\n  | 'safe'\n  | 'space-around'\n  | 'space-between'\n  | 'space-evenly'\n  | 'start'\n  | 'stretch'\n  | '';\n\ntype AlignItems =\n  | 'baseline'\n  | 'center'\n  | 'end'\n  | 'flex-end'\n  | 'flex-start'\n  | 'start'\n  | 'stretch'\n  | '';\n\nexport type Gap =\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '';\n\n@Directive({ selector: '[wtContainerContent]', standalone: true })\nexport class ContainerContentDirective\n  implements ITemplateRef<NgTemplateOutlet>\n{\n  constructor(\n    public readonly templateRef: TemplateRef<NgTemplateOutlet<unknown>>\n  ) {}\n}\n\n@Component({\n  selector: 'wt-container',\n  standalone: true,\n  imports: [CommonModule, TemplateOutletComponent, ContainerComponent],\n  templateUrl: './container.component.html',\n  styleUrl: './container.component.scss',\n})\nexport class ContainerComponent {\n  @Input() containerType: ContainerType = 'row';\n\n  @ContentChildren(ContainerContentDirective)\n  items?: QueryList<ContainerContentDirective>;\n\n  @Input() flexDirection?: Direction;\n  @Input() justifyContent?: JustifyContent;\n  @Input() alignItems?: AlignItems;\n  @Input() alignContent?: AlignItems;\n  @Input() gap?: Gap;\n  @Input() wrap?: 'wrap' | 'wrap-reverse' = 'wrap';\n\n  @Input() isScrollable = false;\n}\n",
            "selector": "[wtContainerContent]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet<>>",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "implements": [
                "ITemplateRef"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet<>>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet<>>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ContentLeftDirective",
            "id": "directive-ContentLeftDirective-3492d5dc67b8a3e2cc82b5b2566c2bcd31b5f0e501e9e9bef3ab281e23a8bb0a67b204da7bc3ab2b10b920952d561c5a2008b3c9075268a9959a5450c07474fc",
            "file": "libs/material/src/lib/common/layout/layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport {\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  QueryList,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { ITemplateRef } from '../types';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRight]', standalone: true })\r\nexport class StatusbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterRight]', standalone: true })\r\nexport class FooterRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterLeft]', standalone: true })\r\nexport class FooterLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentLeft]', standalone: true })\r\nexport class ContentLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentRight]', standalone: true })\r\nexport class ContentRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Component({ template: '' })\r\nexport class BaseLayoutComponent {\r\n  @ContentChildren(MainContentDirective)\r\n  mainContent?: QueryList<MainContentDirective>;\r\n\r\n  @ContentChildren(FloatingItemsDirective)\r\n  floatingItems?: QueryList<FloatingItemsDirective>;\r\n\r\n  @ContentChildren(ToolbarRightDirective)\r\n  toolbarRight?: QueryList<ToolbarRightDirective>;\r\n\r\n  @ContentChildren(ToolbarLeftDirective)\r\n  toolbarLeft?: QueryList<ToolbarLeftDirective>;\r\n\r\n  @ContentChildren(SidenavLeftDirective)\r\n  sidenavLeft?: QueryList<SidenavLeftDirective>;\r\n\r\n  @ContentChildren(SidenavRightDirective)\r\n  sidenavRight?: QueryList<SidenavRightDirective>;\r\n\r\n  @ContentChildren(StatusbarLeftDirective)\r\n  statusbarLeft?: QueryList<StatusbarLeftDirective>;\r\n\r\n  @ContentChildren(StatusbarRightDirective)\r\n  statusbarRight?: QueryList<StatusbarRightDirective>;\r\n\r\n  @ContentChildren(FooterRightDirective)\r\n  footerRight?: QueryList<FooterRightDirective>;\r\n\r\n  @ContentChildren(FooterLeftDirective)\r\n  footerLeft?: QueryList<FooterLeftDirective>;\r\n\r\n  @ContentChildren(ContentLeftDirective)\r\n  contentLeft?: QueryList<ContentLeftDirective>;\r\n\r\n  @ContentChildren(ContentRightDirective)\r\n  contentRight?: QueryList<ContentRightDirective>;\r\n}\r\n",
            "selector": "[wtContentLeft]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "implements": [
                "ITemplateRef"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ContentRightDirective",
            "id": "directive-ContentRightDirective-3492d5dc67b8a3e2cc82b5b2566c2bcd31b5f0e501e9e9bef3ab281e23a8bb0a67b204da7bc3ab2b10b920952d561c5a2008b3c9075268a9959a5450c07474fc",
            "file": "libs/material/src/lib/common/layout/layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport {\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  QueryList,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { ITemplateRef } from '../types';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRight]', standalone: true })\r\nexport class StatusbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterRight]', standalone: true })\r\nexport class FooterRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterLeft]', standalone: true })\r\nexport class FooterLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentLeft]', standalone: true })\r\nexport class ContentLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentRight]', standalone: true })\r\nexport class ContentRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Component({ template: '' })\r\nexport class BaseLayoutComponent {\r\n  @ContentChildren(MainContentDirective)\r\n  mainContent?: QueryList<MainContentDirective>;\r\n\r\n  @ContentChildren(FloatingItemsDirective)\r\n  floatingItems?: QueryList<FloatingItemsDirective>;\r\n\r\n  @ContentChildren(ToolbarRightDirective)\r\n  toolbarRight?: QueryList<ToolbarRightDirective>;\r\n\r\n  @ContentChildren(ToolbarLeftDirective)\r\n  toolbarLeft?: QueryList<ToolbarLeftDirective>;\r\n\r\n  @ContentChildren(SidenavLeftDirective)\r\n  sidenavLeft?: QueryList<SidenavLeftDirective>;\r\n\r\n  @ContentChildren(SidenavRightDirective)\r\n  sidenavRight?: QueryList<SidenavRightDirective>;\r\n\r\n  @ContentChildren(StatusbarLeftDirective)\r\n  statusbarLeft?: QueryList<StatusbarLeftDirective>;\r\n\r\n  @ContentChildren(StatusbarRightDirective)\r\n  statusbarRight?: QueryList<StatusbarRightDirective>;\r\n\r\n  @ContentChildren(FooterRightDirective)\r\n  footerRight?: QueryList<FooterRightDirective>;\r\n\r\n  @ContentChildren(FooterLeftDirective)\r\n  footerLeft?: QueryList<FooterLeftDirective>;\r\n\r\n  @ContentChildren(ContentLeftDirective)\r\n  contentLeft?: QueryList<ContentLeftDirective>;\r\n\r\n  @ContentChildren(ContentRightDirective)\r\n  contentRight?: QueryList<ContentRightDirective>;\r\n}\r\n",
            "selector": "[wtContentRight]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "implements": [
                "ITemplateRef"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 67,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FloatingItemsDirective",
            "id": "directive-FloatingItemsDirective-3492d5dc67b8a3e2cc82b5b2566c2bcd31b5f0e501e9e9bef3ab281e23a8bb0a67b204da7bc3ab2b10b920952d561c5a2008b3c9075268a9959a5450c07474fc",
            "file": "libs/material/src/lib/common/layout/layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport {\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  QueryList,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { ITemplateRef } from '../types';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRight]', standalone: true })\r\nexport class StatusbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterRight]', standalone: true })\r\nexport class FooterRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterLeft]', standalone: true })\r\nexport class FooterLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentLeft]', standalone: true })\r\nexport class ContentLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentRight]', standalone: true })\r\nexport class ContentRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Component({ template: '' })\r\nexport class BaseLayoutComponent {\r\n  @ContentChildren(MainContentDirective)\r\n  mainContent?: QueryList<MainContentDirective>;\r\n\r\n  @ContentChildren(FloatingItemsDirective)\r\n  floatingItems?: QueryList<FloatingItemsDirective>;\r\n\r\n  @ContentChildren(ToolbarRightDirective)\r\n  toolbarRight?: QueryList<ToolbarRightDirective>;\r\n\r\n  @ContentChildren(ToolbarLeftDirective)\r\n  toolbarLeft?: QueryList<ToolbarLeftDirective>;\r\n\r\n  @ContentChildren(SidenavLeftDirective)\r\n  sidenavLeft?: QueryList<SidenavLeftDirective>;\r\n\r\n  @ContentChildren(SidenavRightDirective)\r\n  sidenavRight?: QueryList<SidenavRightDirective>;\r\n\r\n  @ContentChildren(StatusbarLeftDirective)\r\n  statusbarLeft?: QueryList<StatusbarLeftDirective>;\r\n\r\n  @ContentChildren(StatusbarRightDirective)\r\n  statusbarRight?: QueryList<StatusbarRightDirective>;\r\n\r\n  @ContentChildren(FooterRightDirective)\r\n  footerRight?: QueryList<FooterRightDirective>;\r\n\r\n  @ContentChildren(FooterLeftDirective)\r\n  footerLeft?: QueryList<FooterLeftDirective>;\r\n\r\n  @ContentChildren(ContentLeftDirective)\r\n  contentLeft?: QueryList<ContentLeftDirective>;\r\n\r\n  @ContentChildren(ContentRightDirective)\r\n  contentRight?: QueryList<ContentRightDirective>;\r\n}\r\n",
            "selector": "[wtFloatingItems]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "implements": [
                "ITemplateRef"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FooterLeftDirective",
            "id": "directive-FooterLeftDirective-3492d5dc67b8a3e2cc82b5b2566c2bcd31b5f0e501e9e9bef3ab281e23a8bb0a67b204da7bc3ab2b10b920952d561c5a2008b3c9075268a9959a5450c07474fc",
            "file": "libs/material/src/lib/common/layout/layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport {\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  QueryList,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { ITemplateRef } from '../types';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRight]', standalone: true })\r\nexport class StatusbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterRight]', standalone: true })\r\nexport class FooterRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterLeft]', standalone: true })\r\nexport class FooterLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentLeft]', standalone: true })\r\nexport class ContentLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentRight]', standalone: true })\r\nexport class ContentRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Component({ template: '' })\r\nexport class BaseLayoutComponent {\r\n  @ContentChildren(MainContentDirective)\r\n  mainContent?: QueryList<MainContentDirective>;\r\n\r\n  @ContentChildren(FloatingItemsDirective)\r\n  floatingItems?: QueryList<FloatingItemsDirective>;\r\n\r\n  @ContentChildren(ToolbarRightDirective)\r\n  toolbarRight?: QueryList<ToolbarRightDirective>;\r\n\r\n  @ContentChildren(ToolbarLeftDirective)\r\n  toolbarLeft?: QueryList<ToolbarLeftDirective>;\r\n\r\n  @ContentChildren(SidenavLeftDirective)\r\n  sidenavLeft?: QueryList<SidenavLeftDirective>;\r\n\r\n  @ContentChildren(SidenavRightDirective)\r\n  sidenavRight?: QueryList<SidenavRightDirective>;\r\n\r\n  @ContentChildren(StatusbarLeftDirective)\r\n  statusbarLeft?: QueryList<StatusbarLeftDirective>;\r\n\r\n  @ContentChildren(StatusbarRightDirective)\r\n  statusbarRight?: QueryList<StatusbarRightDirective>;\r\n\r\n  @ContentChildren(FooterRightDirective)\r\n  footerRight?: QueryList<FooterRightDirective>;\r\n\r\n  @ContentChildren(FooterLeftDirective)\r\n  footerLeft?: QueryList<FooterLeftDirective>;\r\n\r\n  @ContentChildren(ContentLeftDirective)\r\n  contentLeft?: QueryList<ContentLeftDirective>;\r\n\r\n  @ContentChildren(ContentRightDirective)\r\n  contentRight?: QueryList<ContentRightDirective>;\r\n}\r\n",
            "selector": "[wtFooterLeft]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "implements": [
                "ITemplateRef"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FooterRightDirective",
            "id": "directive-FooterRightDirective-3492d5dc67b8a3e2cc82b5b2566c2bcd31b5f0e501e9e9bef3ab281e23a8bb0a67b204da7bc3ab2b10b920952d561c5a2008b3c9075268a9959a5450c07474fc",
            "file": "libs/material/src/lib/common/layout/layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport {\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  QueryList,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { ITemplateRef } from '../types';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRight]', standalone: true })\r\nexport class StatusbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterRight]', standalone: true })\r\nexport class FooterRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterLeft]', standalone: true })\r\nexport class FooterLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentLeft]', standalone: true })\r\nexport class ContentLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentRight]', standalone: true })\r\nexport class ContentRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Component({ template: '' })\r\nexport class BaseLayoutComponent {\r\n  @ContentChildren(MainContentDirective)\r\n  mainContent?: QueryList<MainContentDirective>;\r\n\r\n  @ContentChildren(FloatingItemsDirective)\r\n  floatingItems?: QueryList<FloatingItemsDirective>;\r\n\r\n  @ContentChildren(ToolbarRightDirective)\r\n  toolbarRight?: QueryList<ToolbarRightDirective>;\r\n\r\n  @ContentChildren(ToolbarLeftDirective)\r\n  toolbarLeft?: QueryList<ToolbarLeftDirective>;\r\n\r\n  @ContentChildren(SidenavLeftDirective)\r\n  sidenavLeft?: QueryList<SidenavLeftDirective>;\r\n\r\n  @ContentChildren(SidenavRightDirective)\r\n  sidenavRight?: QueryList<SidenavRightDirective>;\r\n\r\n  @ContentChildren(StatusbarLeftDirective)\r\n  statusbarLeft?: QueryList<StatusbarLeftDirective>;\r\n\r\n  @ContentChildren(StatusbarRightDirective)\r\n  statusbarRight?: QueryList<StatusbarRightDirective>;\r\n\r\n  @ContentChildren(FooterRightDirective)\r\n  footerRight?: QueryList<FooterRightDirective>;\r\n\r\n  @ContentChildren(FooterLeftDirective)\r\n  footerLeft?: QueryList<FooterLeftDirective>;\r\n\r\n  @ContentChildren(ContentLeftDirective)\r\n  contentLeft?: QueryList<ContentLeftDirective>;\r\n\r\n  @ContentChildren(ContentRightDirective)\r\n  contentRight?: QueryList<ContentRightDirective>;\r\n}\r\n",
            "selector": "[wtFooterRight]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "implements": [
                "ITemplateRef"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FullscreenDirective",
            "id": "directive-FullscreenDirective-38d97b3d1c9c7764a98929fc30943b084c6a3e142f551e3c3ff85b4be0510f8945e0c692e043931f6d28468ef946eac34ab641d1e533390f5fa8605ab09977d3",
            "file": "libs/material/src/lib/common/fullscreen/fullscreen.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostListener, Input } from '@angular/core';\nimport { IToggle, IToggleValue } from '../types';\n\n@Directive({\n  selector: '[wtFullscreen]',\n  standalone: true,\n  exportAs: 'wtFullscreen',\n})\nexport class FullscreenDirective implements IToggleValue, IToggle {\n  @Input() targetElement?: HTMLElement;\n  @HostListener('click')\n  clickHander() {\n    if (this.targetElement) {\n      this.toggle(this.targetElement);\n    } else {\n      console.warn('targetElement is not provided to the fullscreen directive');\n    }\n  }\n\n  isFullscreen?: boolean;\n\n  private open(element: HTMLElement) {\n    this.isFullscreen = true;\n    element.requestFullscreen();\n  }\n  private close() {\n    this.isFullscreen = false;\n    document.exitFullscreen();\n  }\n\n  /**\n   * Toggle fullscreen\n   * @param element\n   */\n  toggle(element: HTMLElement): void {\n    if (this.isFullscreen) {\n      this.close();\n    } else {\n      this.open(element);\n    }\n  }\n\n  toggleValue<T>(actualValue: T, conditionalValue: T): T {\n    return this.isFullscreen ? conditionalValue : actualValue;\n  }\n}\n",
            "selector": "[wtFullscreen]",
            "providers": [],
            "exportAs": "wtFullscreen",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "targetElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "HTMLElement",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12
                }
            ],
            "propertiesClass": [
                {
                    "name": "isFullscreen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "clickHander",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle fullscreen\n",
                    "description": "<p>Toggle fullscreen</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 795,
                                "end": 802,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "element"
                            },
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 789,
                                "end": 794,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "toggleValue",
                    "args": [
                        {
                            "name": "actualValue",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "conditionalValue",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "actualValue",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "conditionalValue",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "IToggleValue",
                "IToggle"
            ]
        },
        {
            "name": "MainContentDirective",
            "id": "directive-MainContentDirective-3492d5dc67b8a3e2cc82b5b2566c2bcd31b5f0e501e9e9bef3ab281e23a8bb0a67b204da7bc3ab2b10b920952d561c5a2008b3c9075268a9959a5450c07474fc",
            "file": "libs/material/src/lib/common/layout/layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport {\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  QueryList,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { ITemplateRef } from '../types';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRight]', standalone: true })\r\nexport class StatusbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterRight]', standalone: true })\r\nexport class FooterRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterLeft]', standalone: true })\r\nexport class FooterLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentLeft]', standalone: true })\r\nexport class ContentLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentRight]', standalone: true })\r\nexport class ContentRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Component({ template: '' })\r\nexport class BaseLayoutComponent {\r\n  @ContentChildren(MainContentDirective)\r\n  mainContent?: QueryList<MainContentDirective>;\r\n\r\n  @ContentChildren(FloatingItemsDirective)\r\n  floatingItems?: QueryList<FloatingItemsDirective>;\r\n\r\n  @ContentChildren(ToolbarRightDirective)\r\n  toolbarRight?: QueryList<ToolbarRightDirective>;\r\n\r\n  @ContentChildren(ToolbarLeftDirective)\r\n  toolbarLeft?: QueryList<ToolbarLeftDirective>;\r\n\r\n  @ContentChildren(SidenavLeftDirective)\r\n  sidenavLeft?: QueryList<SidenavLeftDirective>;\r\n\r\n  @ContentChildren(SidenavRightDirective)\r\n  sidenavRight?: QueryList<SidenavRightDirective>;\r\n\r\n  @ContentChildren(StatusbarLeftDirective)\r\n  statusbarLeft?: QueryList<StatusbarLeftDirective>;\r\n\r\n  @ContentChildren(StatusbarRightDirective)\r\n  statusbarRight?: QueryList<StatusbarRightDirective>;\r\n\r\n  @ContentChildren(FooterRightDirective)\r\n  footerRight?: QueryList<FooterRightDirective>;\r\n\r\n  @ContentChildren(FooterLeftDirective)\r\n  footerLeft?: QueryList<FooterLeftDirective>;\r\n\r\n  @ContentChildren(ContentLeftDirective)\r\n  contentLeft?: QueryList<ContentLeftDirective>;\r\n\r\n  @ContentChildren(ContentRightDirective)\r\n  contentRight?: QueryList<ContentRightDirective>;\r\n}\r\n",
            "selector": "[wtMainContent]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "implements": [
                "ITemplateRef"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SidenavLeftDirective",
            "id": "directive-SidenavLeftDirective-3492d5dc67b8a3e2cc82b5b2566c2bcd31b5f0e501e9e9bef3ab281e23a8bb0a67b204da7bc3ab2b10b920952d561c5a2008b3c9075268a9959a5450c07474fc",
            "file": "libs/material/src/lib/common/layout/layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport {\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  QueryList,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { ITemplateRef } from '../types';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRight]', standalone: true })\r\nexport class StatusbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterRight]', standalone: true })\r\nexport class FooterRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterLeft]', standalone: true })\r\nexport class FooterLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentLeft]', standalone: true })\r\nexport class ContentLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentRight]', standalone: true })\r\nexport class ContentRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Component({ template: '' })\r\nexport class BaseLayoutComponent {\r\n  @ContentChildren(MainContentDirective)\r\n  mainContent?: QueryList<MainContentDirective>;\r\n\r\n  @ContentChildren(FloatingItemsDirective)\r\n  floatingItems?: QueryList<FloatingItemsDirective>;\r\n\r\n  @ContentChildren(ToolbarRightDirective)\r\n  toolbarRight?: QueryList<ToolbarRightDirective>;\r\n\r\n  @ContentChildren(ToolbarLeftDirective)\r\n  toolbarLeft?: QueryList<ToolbarLeftDirective>;\r\n\r\n  @ContentChildren(SidenavLeftDirective)\r\n  sidenavLeft?: QueryList<SidenavLeftDirective>;\r\n\r\n  @ContentChildren(SidenavRightDirective)\r\n  sidenavRight?: QueryList<SidenavRightDirective>;\r\n\r\n  @ContentChildren(StatusbarLeftDirective)\r\n  statusbarLeft?: QueryList<StatusbarLeftDirective>;\r\n\r\n  @ContentChildren(StatusbarRightDirective)\r\n  statusbarRight?: QueryList<StatusbarRightDirective>;\r\n\r\n  @ContentChildren(FooterRightDirective)\r\n  footerRight?: QueryList<FooterRightDirective>;\r\n\r\n  @ContentChildren(FooterLeftDirective)\r\n  footerLeft?: QueryList<FooterLeftDirective>;\r\n\r\n  @ContentChildren(ContentLeftDirective)\r\n  contentLeft?: QueryList<ContentLeftDirective>;\r\n\r\n  @ContentChildren(ContentRightDirective)\r\n  contentRight?: QueryList<ContentRightDirective>;\r\n}\r\n",
            "selector": "[wtSidenavLeft]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "implements": [
                "ITemplateRef"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SidenavRightDirective",
            "id": "directive-SidenavRightDirective-3492d5dc67b8a3e2cc82b5b2566c2bcd31b5f0e501e9e9bef3ab281e23a8bb0a67b204da7bc3ab2b10b920952d561c5a2008b3c9075268a9959a5450c07474fc",
            "file": "libs/material/src/lib/common/layout/layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport {\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  QueryList,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { ITemplateRef } from '../types';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRight]', standalone: true })\r\nexport class StatusbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterRight]', standalone: true })\r\nexport class FooterRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterLeft]', standalone: true })\r\nexport class FooterLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentLeft]', standalone: true })\r\nexport class ContentLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentRight]', standalone: true })\r\nexport class ContentRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Component({ template: '' })\r\nexport class BaseLayoutComponent {\r\n  @ContentChildren(MainContentDirective)\r\n  mainContent?: QueryList<MainContentDirective>;\r\n\r\n  @ContentChildren(FloatingItemsDirective)\r\n  floatingItems?: QueryList<FloatingItemsDirective>;\r\n\r\n  @ContentChildren(ToolbarRightDirective)\r\n  toolbarRight?: QueryList<ToolbarRightDirective>;\r\n\r\n  @ContentChildren(ToolbarLeftDirective)\r\n  toolbarLeft?: QueryList<ToolbarLeftDirective>;\r\n\r\n  @ContentChildren(SidenavLeftDirective)\r\n  sidenavLeft?: QueryList<SidenavLeftDirective>;\r\n\r\n  @ContentChildren(SidenavRightDirective)\r\n  sidenavRight?: QueryList<SidenavRightDirective>;\r\n\r\n  @ContentChildren(StatusbarLeftDirective)\r\n  statusbarLeft?: QueryList<StatusbarLeftDirective>;\r\n\r\n  @ContentChildren(StatusbarRightDirective)\r\n  statusbarRight?: QueryList<StatusbarRightDirective>;\r\n\r\n  @ContentChildren(FooterRightDirective)\r\n  footerRight?: QueryList<FooterRightDirective>;\r\n\r\n  @ContentChildren(FooterLeftDirective)\r\n  footerLeft?: QueryList<FooterLeftDirective>;\r\n\r\n  @ContentChildren(ContentLeftDirective)\r\n  contentLeft?: QueryList<ContentLeftDirective>;\r\n\r\n  @ContentChildren(ContentRightDirective)\r\n  contentRight?: QueryList<ContentRightDirective>;\r\n}\r\n",
            "selector": "[wtSidenavRight]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "implements": [
                "ITemplateRef"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "StatusbarLeftDirective",
            "id": "directive-StatusbarLeftDirective-3492d5dc67b8a3e2cc82b5b2566c2bcd31b5f0e501e9e9bef3ab281e23a8bb0a67b204da7bc3ab2b10b920952d561c5a2008b3c9075268a9959a5450c07474fc",
            "file": "libs/material/src/lib/common/layout/layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport {\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  QueryList,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { ITemplateRef } from '../types';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRight]', standalone: true })\r\nexport class StatusbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterRight]', standalone: true })\r\nexport class FooterRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterLeft]', standalone: true })\r\nexport class FooterLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentLeft]', standalone: true })\r\nexport class ContentLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentRight]', standalone: true })\r\nexport class ContentRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Component({ template: '' })\r\nexport class BaseLayoutComponent {\r\n  @ContentChildren(MainContentDirective)\r\n  mainContent?: QueryList<MainContentDirective>;\r\n\r\n  @ContentChildren(FloatingItemsDirective)\r\n  floatingItems?: QueryList<FloatingItemsDirective>;\r\n\r\n  @ContentChildren(ToolbarRightDirective)\r\n  toolbarRight?: QueryList<ToolbarRightDirective>;\r\n\r\n  @ContentChildren(ToolbarLeftDirective)\r\n  toolbarLeft?: QueryList<ToolbarLeftDirective>;\r\n\r\n  @ContentChildren(SidenavLeftDirective)\r\n  sidenavLeft?: QueryList<SidenavLeftDirective>;\r\n\r\n  @ContentChildren(SidenavRightDirective)\r\n  sidenavRight?: QueryList<SidenavRightDirective>;\r\n\r\n  @ContentChildren(StatusbarLeftDirective)\r\n  statusbarLeft?: QueryList<StatusbarLeftDirective>;\r\n\r\n  @ContentChildren(StatusbarRightDirective)\r\n  statusbarRight?: QueryList<StatusbarRightDirective>;\r\n\r\n  @ContentChildren(FooterRightDirective)\r\n  footerRight?: QueryList<FooterRightDirective>;\r\n\r\n  @ContentChildren(FooterLeftDirective)\r\n  footerLeft?: QueryList<FooterLeftDirective>;\r\n\r\n  @ContentChildren(ContentLeftDirective)\r\n  contentLeft?: QueryList<ContentLeftDirective>;\r\n\r\n  @ContentChildren(ContentRightDirective)\r\n  contentRight?: QueryList<ContentRightDirective>;\r\n}\r\n",
            "selector": "[wtStatusbarLeft]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "implements": [
                "ITemplateRef"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "StatusbarRightDirective",
            "id": "directive-StatusbarRightDirective-3492d5dc67b8a3e2cc82b5b2566c2bcd31b5f0e501e9e9bef3ab281e23a8bb0a67b204da7bc3ab2b10b920952d561c5a2008b3c9075268a9959a5450c07474fc",
            "file": "libs/material/src/lib/common/layout/layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport {\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  QueryList,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { ITemplateRef } from '../types';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRight]', standalone: true })\r\nexport class StatusbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterRight]', standalone: true })\r\nexport class FooterRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterLeft]', standalone: true })\r\nexport class FooterLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentLeft]', standalone: true })\r\nexport class ContentLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentRight]', standalone: true })\r\nexport class ContentRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Component({ template: '' })\r\nexport class BaseLayoutComponent {\r\n  @ContentChildren(MainContentDirective)\r\n  mainContent?: QueryList<MainContentDirective>;\r\n\r\n  @ContentChildren(FloatingItemsDirective)\r\n  floatingItems?: QueryList<FloatingItemsDirective>;\r\n\r\n  @ContentChildren(ToolbarRightDirective)\r\n  toolbarRight?: QueryList<ToolbarRightDirective>;\r\n\r\n  @ContentChildren(ToolbarLeftDirective)\r\n  toolbarLeft?: QueryList<ToolbarLeftDirective>;\r\n\r\n  @ContentChildren(SidenavLeftDirective)\r\n  sidenavLeft?: QueryList<SidenavLeftDirective>;\r\n\r\n  @ContentChildren(SidenavRightDirective)\r\n  sidenavRight?: QueryList<SidenavRightDirective>;\r\n\r\n  @ContentChildren(StatusbarLeftDirective)\r\n  statusbarLeft?: QueryList<StatusbarLeftDirective>;\r\n\r\n  @ContentChildren(StatusbarRightDirective)\r\n  statusbarRight?: QueryList<StatusbarRightDirective>;\r\n\r\n  @ContentChildren(FooterRightDirective)\r\n  footerRight?: QueryList<FooterRightDirective>;\r\n\r\n  @ContentChildren(FooterLeftDirective)\r\n  footerLeft?: QueryList<FooterLeftDirective>;\r\n\r\n  @ContentChildren(ContentLeftDirective)\r\n  contentLeft?: QueryList<ContentLeftDirective>;\r\n\r\n  @ContentChildren(ContentRightDirective)\r\n  contentRight?: QueryList<ContentRightDirective>;\r\n}\r\n",
            "selector": "[wtStatusbarRight]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "implements": [
                "ITemplateRef"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ToolbarLeftDirective",
            "id": "directive-ToolbarLeftDirective-3492d5dc67b8a3e2cc82b5b2566c2bcd31b5f0e501e9e9bef3ab281e23a8bb0a67b204da7bc3ab2b10b920952d561c5a2008b3c9075268a9959a5450c07474fc",
            "file": "libs/material/src/lib/common/layout/layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport {\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  QueryList,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { ITemplateRef } from '../types';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRight]', standalone: true })\r\nexport class StatusbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterRight]', standalone: true })\r\nexport class FooterRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterLeft]', standalone: true })\r\nexport class FooterLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentLeft]', standalone: true })\r\nexport class ContentLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentRight]', standalone: true })\r\nexport class ContentRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Component({ template: '' })\r\nexport class BaseLayoutComponent {\r\n  @ContentChildren(MainContentDirective)\r\n  mainContent?: QueryList<MainContentDirective>;\r\n\r\n  @ContentChildren(FloatingItemsDirective)\r\n  floatingItems?: QueryList<FloatingItemsDirective>;\r\n\r\n  @ContentChildren(ToolbarRightDirective)\r\n  toolbarRight?: QueryList<ToolbarRightDirective>;\r\n\r\n  @ContentChildren(ToolbarLeftDirective)\r\n  toolbarLeft?: QueryList<ToolbarLeftDirective>;\r\n\r\n  @ContentChildren(SidenavLeftDirective)\r\n  sidenavLeft?: QueryList<SidenavLeftDirective>;\r\n\r\n  @ContentChildren(SidenavRightDirective)\r\n  sidenavRight?: QueryList<SidenavRightDirective>;\r\n\r\n  @ContentChildren(StatusbarLeftDirective)\r\n  statusbarLeft?: QueryList<StatusbarLeftDirective>;\r\n\r\n  @ContentChildren(StatusbarRightDirective)\r\n  statusbarRight?: QueryList<StatusbarRightDirective>;\r\n\r\n  @ContentChildren(FooterRightDirective)\r\n  footerRight?: QueryList<FooterRightDirective>;\r\n\r\n  @ContentChildren(FooterLeftDirective)\r\n  footerLeft?: QueryList<FooterLeftDirective>;\r\n\r\n  @ContentChildren(ContentLeftDirective)\r\n  contentLeft?: QueryList<ContentLeftDirective>;\r\n\r\n  @ContentChildren(ContentRightDirective)\r\n  contentRight?: QueryList<ContentRightDirective>;\r\n}\r\n",
            "selector": "[wtToolbarLeft]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "implements": [
                "ITemplateRef"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ToolbarRightDirective",
            "id": "directive-ToolbarRightDirective-3492d5dc67b8a3e2cc82b5b2566c2bcd31b5f0e501e9e9bef3ab281e23a8bb0a67b204da7bc3ab2b10b920952d561c5a2008b3c9075268a9959a5450c07474fc",
            "file": "libs/material/src/lib/common/layout/layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport {\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  QueryList,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { ITemplateRef } from '../types';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRight]', standalone: true })\r\nexport class StatusbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterRight]', standalone: true })\r\nexport class FooterRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterLeft]', standalone: true })\r\nexport class FooterLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentLeft]', standalone: true })\r\nexport class ContentLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentRight]', standalone: true })\r\nexport class ContentRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Component({ template: '' })\r\nexport class BaseLayoutComponent {\r\n  @ContentChildren(MainContentDirective)\r\n  mainContent?: QueryList<MainContentDirective>;\r\n\r\n  @ContentChildren(FloatingItemsDirective)\r\n  floatingItems?: QueryList<FloatingItemsDirective>;\r\n\r\n  @ContentChildren(ToolbarRightDirective)\r\n  toolbarRight?: QueryList<ToolbarRightDirective>;\r\n\r\n  @ContentChildren(ToolbarLeftDirective)\r\n  toolbarLeft?: QueryList<ToolbarLeftDirective>;\r\n\r\n  @ContentChildren(SidenavLeftDirective)\r\n  sidenavLeft?: QueryList<SidenavLeftDirective>;\r\n\r\n  @ContentChildren(SidenavRightDirective)\r\n  sidenavRight?: QueryList<SidenavRightDirective>;\r\n\r\n  @ContentChildren(StatusbarLeftDirective)\r\n  statusbarLeft?: QueryList<StatusbarLeftDirective>;\r\n\r\n  @ContentChildren(StatusbarRightDirective)\r\n  statusbarRight?: QueryList<StatusbarRightDirective>;\r\n\r\n  @ContentChildren(FooterRightDirective)\r\n  footerRight?: QueryList<FooterRightDirective>;\r\n\r\n  @ContentChildren(FooterLeftDirective)\r\n  footerLeft?: QueryList<FooterLeftDirective>;\r\n\r\n  @ContentChildren(ContentLeftDirective)\r\n  contentLeft?: QueryList<ContentLeftDirective>;\r\n\r\n  @ContentChildren(ContentRightDirective)\r\n  contentRight?: QueryList<ContentRightDirective>;\r\n}\r\n",
            "selector": "[wtToolbarRight]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "implements": [
                "ITemplateRef"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ViewportDirective",
            "id": "directive-ViewportDirective-06dbf1345e03f2442911103338d0f452d6c62782c233c38d96a75bb0071fb4b7fafab86470bdf5496475424b3181d561740295f721fb010fb2c0756f0972cd28",
            "file": "libs/material/src/lib/common/viewport/viewport.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, OnDestroy, OnInit } from '@angular/core';\nimport { Observable, Subscription, map } from 'rxjs';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { IToggleValue } from '../types';\n\n@Directive({\n  selector: '[wtViewport]',\n  standalone: true,\n  exportAs: 'wtViewport',\n})\nexport class ViewportDirective implements IToggleValue, OnInit, OnDestroy {\n  isHandset?: boolean;\n  isNotHandset?: boolean;\n\n  /**\n   * @ignore internal\n   */\n  $isHandset: Observable<boolean> = this.media\n    .observe([Breakpoints.Handset, Breakpoints.Small, Breakpoints.XSmall])\n    .pipe(\n      map((e) => {\n        const result = e.matches;\n        this.isHandset = result;\n        this.isNotHandset = !this.isHandset;\n        return result;\n      })\n    );\n\n  constructor(\n    public readonly elementRef: ElementRef<HTMLElement>,\n    private readonly media: BreakpointObserver\n  ) {}\n\n  viewportSubscription!: Subscription;\n\n  ngOnInit(): void {\n    this.viewportSubscription = this.$isHandset.subscribe();\n  }\n\n  ngOnDestroy(): void {\n    this.viewportSubscription.unsubscribe();\n  }\n\n  toggle(actual: string, handset: string) {\n    return this.isHandset ? handset : actual;\n  }\n\n  toggleValue<T>(actualValue: T, conditionalValue: T): T {\n    return this.isHandset ? conditionalValue : actualValue;\n  }\n}\n",
            "selector": "[wtViewport]",
            "providers": [],
            "exportAs": "wtViewport",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "isHandset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "isNotHandset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "viewportSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "actual",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "handset",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "actual",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "handset",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleValue",
                    "args": [
                        {
                            "name": "actualValue",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "conditionalValue",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "actualValue",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "conditionalValue",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "IToggleValue",
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "media",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "media",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppLayoutComponent",
            "id": "component-AppLayoutComponent-8d57151e90e08ccc281717b01374252edd8a4d2ffb9e9f9739796adf4cf7c3d5f187182553e3ca710434e52a6537b360c5f69e1fcfa9629585616eca495890bd",
            "file": "libs/material/src/lib/app-layout/app-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "AppLayoutDirectives",
                    "type": "directive"
                }
            ],
            "selector": "wt-app-layout",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app-layout.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "rightSidenavToggleIcon",
                    "defaultValue": "'settings'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "testing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTest the app layout without pushing the content\n",
                    "description": "<p>Test the app layout without pushing the content</p>\n",
                    "line": 74,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "floatingItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<FloatingItemsDirective>",
                    "optional": true,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "FloatingItemsDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "mainContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<MainContentDirective>",
                    "optional": true,
                    "description": "",
                    "line": 55,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "MainContentDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "sidenavLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<SidenavLeftDirective>",
                    "optional": true,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "SidenavLeftDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "sidenavRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<SidenavRightDirective>",
                    "optional": true,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "SidenavRightDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "statusbarLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<StatusbarLeftDirective>",
                    "optional": true,
                    "description": "",
                    "line": 67,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "StatusbarLeftDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "statusbarRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<StatusbarRightDirective>",
                    "optional": true,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "StatusbarRightDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "toolbarLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ToolbarLeftDirective>",
                    "optional": true,
                    "description": "",
                    "line": 61,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ToolbarLeftDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "toolbarRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ToolbarRightDirective>",
                    "optional": true,
                    "description": "",
                    "line": 59,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ToolbarRightDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AppLayoutModules",
                    "type": "module"
                },
                {
                    "name": "AppLayoutDirectives",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChildren, Input, QueryList } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatSidenav, MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport {\r\n  ViewportDirective,\r\n  FullscreenDirective,\r\n  AppLogoDirective,\r\n  TemplateOutletComponent,\r\n  MainContentDirective,\r\n  FloatingItemsDirective,\r\n  ToolbarRightDirective,\r\n  ToolbarLeftDirective,\r\n  SidenavLeftDirective,\r\n  SidenavRightDirective,\r\n  StatusbarLeftDirective,\r\n  StatusbarRightDirective,\r\n} from '../common/';\r\n\r\nconst AppLayoutDirectives = [\r\n  MainContentDirective,\r\n  FloatingItemsDirective,\r\n  ToolbarRightDirective,\r\n  ToolbarLeftDirective,\r\n  SidenavLeftDirective,\r\n  SidenavRightDirective,\r\n  StatusbarLeftDirective,\r\n  StatusbarRightDirective,\r\n];\r\n\r\nexport const AppLayoutModules = [\r\n  CommonModule,\r\n  MatSidenavModule,\r\n  MatToolbarModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  ViewportDirective,\r\n  FullscreenDirective,\r\n  AppLogoDirective,\r\n  TemplateOutletComponent,\r\n];\r\n\r\n@Component({\r\n  selector: 'wt-app-layout',\r\n  standalone: true,\r\n  imports: [...AppLayoutModules, ...AppLayoutDirectives],\r\n  templateUrl: './app-layout.component.html',\r\n  styleUrl: './app-layout.component.scss',\r\n  providers: [...AppLayoutDirectives],\r\n})\r\nexport class AppLayoutComponent {\r\n  @ContentChildren(MainContentDirective)\r\n  mainContent?: QueryList<MainContentDirective>;\r\n  @ContentChildren(FloatingItemsDirective)\r\n  floatingItems?: QueryList<FloatingItemsDirective>;\r\n  @ContentChildren(ToolbarRightDirective)\r\n  toolbarRight?: QueryList<ToolbarRightDirective>;\r\n  @ContentChildren(ToolbarLeftDirective)\r\n  toolbarLeft?: QueryList<ToolbarLeftDirective>;\r\n  @ContentChildren(SidenavLeftDirective)\r\n  sidenavLeft?: QueryList<SidenavLeftDirective>;\r\n  @ContentChildren(SidenavRightDirective)\r\n  sidenavRight?: QueryList<SidenavRightDirective>;\r\n  @ContentChildren(StatusbarLeftDirective)\r\n  statusbarLeft?: QueryList<StatusbarLeftDirective>;\r\n  @ContentChildren(StatusbarRightDirective)\r\n  statusbarRight?: QueryList<StatusbarRightDirective>;\r\n\r\n  /**\r\n   * Test the app layout without pushing the content\r\n   */\r\n  @Input() testing = false;\r\n\r\n  @Input() rightSidenavToggleIcon = 'settings';\r\n\r\n  /**\r\n   * @ignore internal\r\n   */\r\n  sideNavClick(sidenav: MatSidenav, isHandset?: boolean) {\r\n    if (isHandset) sidenav.toggle();\r\n  }\r\n}\r\n",
            "styleUrl": "./app-layout.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<ng-template\r\n  #toolbarTemplate\r\n  let-left=\"left\"\r\n  let-right=\"right\"\r\n  let-testName=\"testName\"\r\n>\r\n  <div class=\"row-container\">\r\n    <div class=\"row-container\">\r\n      <wt-template-outlet\r\n        [items]=\"left\"\r\n        [testing]=\"testing\"\r\n        [testName]=\"testName + '-left'\"\r\n      ></wt-template-outlet>\r\n    </div>\r\n    <div class=\"row-container-right\">\r\n      <wt-template-outlet\r\n        [items]=\"right\"\r\n        [testing]=\"testing\"\r\n        [testName]=\"testName + '-right'\"\r\n      ></wt-template-outlet>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<mat-sidenav-container #viewport=\"wtViewport\" wtViewport>\r\n  <!-- Sidenav Left -->\r\n  <mat-sidenav\r\n    #leftSidenav\r\n    class=\"left\"\r\n    position=\"start\"\r\n    [opened]=\"viewport.toggleValue(true, false)\"\r\n    [mode]=\"viewport.toggleValue('side', 'over')\"\r\n    (click)=\"sideNavClick(leftSidenav, viewport.isHandset)\"\r\n  >\r\n    <wt-template-outlet\r\n      [items]=\"sidenavLeft\"\r\n      [testing]=\"testing\"\r\n      testName=\"Left sidenav\"\r\n    ></wt-template-outlet>\r\n  </mat-sidenav>\r\n\r\n  <!-- Sidenav Right -->\r\n  <mat-sidenav\r\n    #rightSidenav\r\n    class=\"right\"\r\n    position=\"end\"\r\n    [mode]=\"viewport.toggleValue('side', 'over')\"\r\n    (click)=\"sideNavClick(rightSidenav)\"\r\n  >\r\n    <wt-template-outlet\r\n      [items]=\"sidenavRight\"\r\n      [testing]=\"testing\"\r\n      testName=\"Right sidenav\"\r\n    ></wt-template-outlet>\r\n  </mat-sidenav>\r\n\r\n  <!-- --Start of the content -->\r\n  <mat-sidenav-content>\r\n    <!-- Main toolbar -->\r\n    <mat-toolbar class=\"toolbar\" color=\"primary\">\r\n      <img wtAppLogo *ngIf=\"viewport.isNotHandset\" />\r\n\r\n      <!-- Left Sidenav Toggle -->\r\n      <button\r\n        class=\"left-sidenav-toggle\"\r\n        mat-icon-button\r\n        (click)=\"leftSidenav.toggle()\"\r\n        aria-label=\"Toggle Left Sidenav\"\r\n      >\r\n        <mat-icon class=\"fill\">{{\r\n          leftSidenav.opened ? 'menu_opened' : 'menu'\r\n        }}</mat-icon>\r\n      </button>\r\n\r\n      <!-- Toolbar Items -->\r\n      <ng-container\r\n        *ngTemplateOutlet=\"\r\n          toolbarTemplate;\r\n          context: {\r\n            left: toolbarLeft,\r\n            right: toolbarRight,\r\n            testName: 'toolbar'\r\n          }\r\n        \"\r\n      ></ng-container>\r\n\r\n      <!-- Right Sidenav Toggle -->\r\n      <button\r\n        class=\"right-sidenav-toggle\"\r\n        mat-icon-button\r\n        (click)=\"rightSidenav.toggle()\"\r\n        aria-label=\"Toggle Right Sidenav\"\r\n      >\r\n        <mat-icon class=\"fill\">{{ rightSidenavToggleIcon }}</mat-icon>\r\n      </button>\r\n    </mat-toolbar>\r\n\r\n    <!-- Main Content  -->\r\n\r\n    <div #mainContentContainer class=\"main-content-container column-container\">\r\n      <!-- Full Screen Button -->\r\n      <button\r\n        class=\"fullscreen-button\"\r\n        mat-icon-button\r\n        #mainFullscreen=\"wtFullscreen\"\r\n        wtFullscreen\r\n        [targetElement]=\"mainContentContainer\"\r\n        [attr.aria-label]=\"\r\n          mainFullscreen.toggleValue('Fullscreen', 'Exit Fullscreen')\r\n        \"\r\n      >\r\n        <mat-icon>\r\n          {{ mainFullscreen.toggleValue('fullscreen', 'fullscreen_exit') }}\r\n        </mat-icon>\r\n      </button>\r\n\r\n      <wt-template-outlet\r\n        [items]=\"mainContent\"\r\n        [testing]=\"testing\"\r\n        testName=\"Main Content\"\r\n      ></wt-template-outlet>\r\n\r\n      <div class=\"floating-content\">\r\n        <wt-template-outlet\r\n          [items]=\"floatingItems\"\r\n          [testing]=\"testing\"\r\n          testName=\"Floating Buttons \"\r\n        ></wt-template-outlet>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Statusbar -->\r\n    <mat-toolbar class=\"statusbar\" color=\"primary\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"\r\n          toolbarTemplate;\r\n          context: {\r\n            left: statusbarLeft,\r\n            right: statusbarRight,\r\n            testName: 'statusbar'\r\n          }\r\n        \"\r\n      ></ng-container>\r\n    </mat-toolbar>\r\n    <!-- --Endof the content -->\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n"
        },
        {
            "name": "BaseLayoutComponent",
            "id": "component-BaseLayoutComponent-3492d5dc67b8a3e2cc82b5b2566c2bcd31b5f0e501e9e9bef3ab281e23a8bb0a67b204da7bc3ab2b10b920952d561c5a2008b3c9075268a9959a5450c07474fc",
            "file": "libs/material/src/lib/common/layout/layout.directive.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contentLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ContentLeftDirective>",
                    "optional": true,
                    "description": "",
                    "line": 104,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ContentLeftDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "contentRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ContentRightDirective>",
                    "optional": true,
                    "description": "",
                    "line": 107,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ContentRightDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "floatingItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<FloatingItemsDirective>",
                    "optional": true,
                    "description": "",
                    "line": 77,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "FloatingItemsDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "footerLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<FooterLeftDirective>",
                    "optional": true,
                    "description": "",
                    "line": 101,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "FooterLeftDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "footerRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<FooterRightDirective>",
                    "optional": true,
                    "description": "",
                    "line": 98,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "FooterRightDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "mainContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<MainContentDirective>",
                    "optional": true,
                    "description": "",
                    "line": 74,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "MainContentDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "sidenavLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<SidenavLeftDirective>",
                    "optional": true,
                    "description": "",
                    "line": 86,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "SidenavLeftDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "sidenavRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<SidenavRightDirective>",
                    "optional": true,
                    "description": "",
                    "line": 89,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "SidenavRightDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "statusbarLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<StatusbarLeftDirective>",
                    "optional": true,
                    "description": "",
                    "line": 92,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "StatusbarLeftDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "statusbarRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<StatusbarRightDirective>",
                    "optional": true,
                    "description": "",
                    "line": 95,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "StatusbarRightDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "toolbarLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ToolbarLeftDirective>",
                    "optional": true,
                    "description": "",
                    "line": 83,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ToolbarLeftDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "toolbarRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ToolbarRightDirective>",
                    "optional": true,
                    "description": "",
                    "line": 80,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ToolbarRightDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport {\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  QueryList,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { ITemplateRef } from '../types';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRight]', standalone: true })\r\nexport class StatusbarRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterRight]', standalone: true })\r\nexport class FooterRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFooterLeft]', standalone: true })\r\nexport class FooterLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentLeft]', standalone: true })\r\nexport class ContentLeftDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtContentRight]', standalone: true })\r\nexport class ContentRightDirective implements ITemplateRef<NgTemplateOutlet> {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Component({ template: '' })\r\nexport class BaseLayoutComponent {\r\n  @ContentChildren(MainContentDirective)\r\n  mainContent?: QueryList<MainContentDirective>;\r\n\r\n  @ContentChildren(FloatingItemsDirective)\r\n  floatingItems?: QueryList<FloatingItemsDirective>;\r\n\r\n  @ContentChildren(ToolbarRightDirective)\r\n  toolbarRight?: QueryList<ToolbarRightDirective>;\r\n\r\n  @ContentChildren(ToolbarLeftDirective)\r\n  toolbarLeft?: QueryList<ToolbarLeftDirective>;\r\n\r\n  @ContentChildren(SidenavLeftDirective)\r\n  sidenavLeft?: QueryList<SidenavLeftDirective>;\r\n\r\n  @ContentChildren(SidenavRightDirective)\r\n  sidenavRight?: QueryList<SidenavRightDirective>;\r\n\r\n  @ContentChildren(StatusbarLeftDirective)\r\n  statusbarLeft?: QueryList<StatusbarLeftDirective>;\r\n\r\n  @ContentChildren(StatusbarRightDirective)\r\n  statusbarRight?: QueryList<StatusbarRightDirective>;\r\n\r\n  @ContentChildren(FooterRightDirective)\r\n  footerRight?: QueryList<FooterRightDirective>;\r\n\r\n  @ContentChildren(FooterLeftDirective)\r\n  footerLeft?: QueryList<FooterLeftDirective>;\r\n\r\n  @ContentChildren(ContentLeftDirective)\r\n  contentLeft?: QueryList<ContentLeftDirective>;\r\n\r\n  @ContentChildren(ContentRightDirective)\r\n  contentRight?: QueryList<ContentRightDirective>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ContainerComponent",
            "id": "component-ContainerComponent-4507a6b9d8f60a98a94dadbab8c7f38addd1d22c1203f78dce58fe15d1d2100359e409601b99f4fd63e3760aa176cf0c4facc7a91c3ef040acfd0591ed548f32",
            "file": "libs/material/src/lib/common/container/container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-container",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alignContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "AlignItems",
                    "decorators": []
                },
                {
                    "name": "alignItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "AlignItems",
                    "decorators": []
                },
                {
                    "name": "containerType",
                    "defaultValue": "'row'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "ContainerType",
                    "decorators": []
                },
                {
                    "name": "flexDirection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "Direction",
                    "decorators": []
                },
                {
                    "name": "gap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "Gap",
                    "decorators": []
                },
                {
                    "name": "isScrollable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "justifyContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "JustifyContent",
                    "decorators": []
                },
                {
                    "name": "wrap",
                    "defaultValue": "'wrap'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "\"wrap\" | \"wrap-reverse\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ContainerContentDirective>",
                    "optional": true,
                    "description": "",
                    "line": 83,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ContainerContentDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TemplateOutletComponent",
                    "type": "component"
                },
                {
                    "name": "ContainerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ContentChildren,\n  Directive,\n  Input,\n  QueryList,\n  TemplateRef,\n} from '@angular/core';\nimport { CommonModule, NgTemplateOutlet } from '@angular/common';\nimport { TemplateOutletComponent } from '../template-outlet/template-outlet.component';\nimport { ITemplateRef } from '../types';\n\nexport type ContainerType =\n  | 'row'\n  | 'column'\n  | 'right'\n  | 'left'\n  | 'top'\n  | 'bottom';\n\nexport type Direction = 'row' | 'column';\nexport type JustifyContent =\n  | 'baseline'\n  | 'center'\n  | 'end'\n  | 'flex-end'\n  | 'flex-start'\n  | 'left'\n  | 'right'\n  | 'safe'\n  | 'space-around'\n  | 'space-between'\n  | 'space-evenly'\n  | 'start'\n  | 'stretch'\n  | '';\n\ntype AlignItems =\n  | 'baseline'\n  | 'center'\n  | 'end'\n  | 'flex-end'\n  | 'flex-start'\n  | 'start'\n  | 'stretch'\n  | '';\n\nexport type Gap =\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '';\n\n@Directive({ selector: '[wtContainerContent]', standalone: true })\nexport class ContainerContentDirective\n  implements ITemplateRef<NgTemplateOutlet>\n{\n  constructor(\n    public readonly templateRef: TemplateRef<NgTemplateOutlet<unknown>>\n  ) {}\n}\n\n@Component({\n  selector: 'wt-container',\n  standalone: true,\n  imports: [CommonModule, TemplateOutletComponent, ContainerComponent],\n  templateUrl: './container.component.html',\n  styleUrl: './container.component.scss',\n})\nexport class ContainerComponent {\n  @Input() containerType: ContainerType = 'row';\n\n  @ContentChildren(ContainerContentDirective)\n  items?: QueryList<ContainerContentDirective>;\n\n  @Input() flexDirection?: Direction;\n  @Input() justifyContent?: JustifyContent;\n  @Input() alignItems?: AlignItems;\n  @Input() alignContent?: AlignItems;\n  @Input() gap?: Gap;\n  @Input() wrap?: 'wrap' | 'wrap-reverse' = 'wrap';\n\n  @Input() isScrollable = false;\n}\n",
            "styleUrl": "./container.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!-- <div [class]=\"containerType + '-container'\" [class.scrollable]=\"isScrollable\">\n  <wt-template-outlet [items]=\"items\"></wt-template-outlet>\n</div> -->\n\n<!-- <h1>Row Container</h1> -->\n<!-- <div class=\"row-container\">\n  <div\n    class=\"row-container-item\"\n    *ngFor=\"let i of ' '.repeat(45).split(''); let index = index\"\n  >\n    Item-{{ index }}\n  </div>\n</div> -->\n<!-- \n\n<div class=\"column-container\">\n  <div\n    class=\"row-container-item\"\n    *ngFor=\"let i of ' '.repeat(45).split(''); let index = index\"\n  >\n    Item-{{ index }}\n  </div>\n</div> -->\n\n<div class=\"column-container-top\">\n  <div\n    class=\"row-container-item\"\n    *ngFor=\"let i of ' '.repeat(3).split(''); let index = index\"\n  >\n    Item-{{ index }}\n  </div>\n<div style=\"flex-grow: 1;\"></div>\n  <div style=\"justify-self: end\">Last Item</div>\n</div>\n"
        },
        {
            "name": "FullscreenComponent",
            "id": "component-FullscreenComponent-3c3fa1b2d971254a40600621771ff0841000a37448a6ebb32c7ab062d4b5758a529c2caea38fa9d43021ddfb186ea34f50b9ef8d8cde19704d7b15885569d901",
            "file": "libs/material/src/lib/common/fullscreen/fullscreen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-fullscreen",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./fullscreen.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FullscreenDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FullscreenDirective } from './fullscreen.directive';\n\n@Component({\n  selector: 'wt-fullscreen',\n  standalone: true,\n  imports: [CommonModule, FullscreenDirective],\n  templateUrl: './fullscreen.component.html',\n  styleUrl: './fullscreen.component.scss',\n})\nexport class FullscreenComponent {}\n",
            "styleUrl": "./fullscreen.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"fullscreeen-container\" #fullscreenContainer>\n  <div>\n    <button\n      #screen=\"wtFullscreen\"\n      wtFullscreen\n      [targetElement]=\"fullscreenContainer\"\n    >\n      {{ screen.toggleValue('Open Fullscreen', 'Close Fullscreen') }}\n    </button>\n  </div>\n  <h1>Fullscreen Utility Directive Test</h1>\n\n  <p>\n    When the user click the fullscreen button, this section should be shown in\n    fullscreeen\n  </p>\n</div>\n\n<h1>\n  This text will not be shown in fullscreen because it is outside of the element\n</h1>\n"
        },
        {
            "name": "HelloComponent",
            "id": "component-HelloComponent-84625d9faf2e4bcddb6508979e6b13bac60fd3dd8dea20bff0c21050fd4eb35ae1c3c58d0691407181c425dae004bc6decd5774a4475405917d63956f6266995",
            "file": "libs/material/src/lib/hello/hello.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-hello",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./hello.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "message",
                    "defaultValue": "'Sample Message'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput property description\n",
                    "description": "<p>Input property description</p>\n",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "messageEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutput property description\n",
                    "description": "<p>Output property description</p>\n",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "messages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "sendMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunction description\n",
                    "description": "<p>Function description</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'wt-hello',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './hello.component.html',\r\n  styleUrl: './hello.component.scss',\r\n})\r\nexport class HelloComponent {\r\n  messages: string[] = [];\r\n  /**\r\n   * Input property description\r\n   */\r\n  @Input() message = 'Sample Message';\r\n\r\n  /**\r\n   * Output property description\r\n   */\r\n  @Output() messageEvent = new EventEmitter<string>();\r\n\r\n  /**\r\n   * Function description\r\n   */\r\n  sendMessage() {\r\n    const msg = 'This is how events work!';\r\n    this.messages.push(`messageEvent : ${msg}`);\r\n    this.messageEvent.emit(msg);\r\n  }\r\n}\r\n",
            "styleUrl": "./hello.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button (click)=\"sendMessage()\" data-testid=\"hello-button\" class=\"ff-handjet fs3\">Hello There</button>\r\n\r\n<ul>\r\n  @for( m of messages; track m){\r\n\r\n  <li class=\"ff-comfortaa\">{{ m }}</li>\r\n  }\r\n</ul>\r\n"
        },
        {
            "name": "NavListComponent",
            "id": "component-NavListComponent-3bb9de6622228cd9a4825607602c81f2a4fa4429f983af62fd1bf96c9ef9e26644015c2368bb0af6024937165fd718d237c7cd6f237ba4500fcc1771a6456105",
            "file": "libs/material/src/lib/nav-list/nav-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-nav-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./nav-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNav list items\n",
                    "description": "<p>Nav list items</p>\n",
                    "line": 35,
                    "type": "MenuItem[]",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "'List title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNav list title\n",
                    "description": "<p>Nav list title</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clickEvent",
                    "defaultValue": "new EventEmitter<MenuItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit the nav item meta data when it is clicked\n",
                    "description": "<p>Emit the nav item meta data when it is clicked</p>\n",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activeItem",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>The last clicked item&#39;s id is stored here</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nThe last clicked item's id is stored here\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "clickHandler",
                    "args": [
                        {
                            "name": "item",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "MatListModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatBadgeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MenuItem } from '../common/types';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'wt-nav-list',\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterModule,\n    MatListModule,\n    MatIconModule,\n    MatBadgeModule,\n  ],\n  templateUrl: './nav-list.component.html',\n  styleUrl: './nav-list.component.scss',\n})\nexport class NavListComponent {\n  /**\n   * The last clicked item's id is stored here\n   */\n  activeItem = 0;\n  /**\n   * Nav list title\n   */\n  @Input() title: string = 'List title';\n\n  /**\n   * Nav list items\n   */\n  @Input() items: MenuItem[] = [];\n\n  /**\n   * Emit the nav item meta data when it is clicked\n   */\n  @Output() clickEvent = new EventEmitter<MenuItem>();\n\n  clickHandler(item: MenuItem) {\n    this.activeItem = item.id;\n    this.clickEvent.emit(item);\n  }\n}\n",
            "styleUrl": "./nav-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-nav-list #navList>\n  @for(item of items ; track item){\n  <mat-list-item\n    #menuItem\n    [lines]=\"2\"\n    [activated]=\"item.id === activeItem\"\n    [routerLink]=\"[item.route]\"\n    [class.router-link-active]=\"item.id === activeItem\"\n    (click)=\"clickHandler(item)\"\n  >\n    <span matListItemTitle>{{ item.title }}</span>\n    <span matListItemLine>{{ item.subTitle }}</span>\n\n    <mat-icon\n      matListItemIcon\n      [matBadge]=\"item.badge\"\n      [matBadgeColor]=\"item.badgeColor\"\n      [color]=\"item.iconColor\"\n      aria-hidden=\"false\"\n      class=\"fill\"\n    >\n      {{ item.icon }}\n    </mat-icon>\n    <span matListItemMeta>{{ item.meta }}</span>\n  </mat-list-item>\n  }\n</mat-nav-list>\n"
        },
        {
            "name": "TemplateOutletComponent",
            "id": "component-TemplateOutletComponent-8042ad53e08303cb836f7e4782ec0c3c239efafdf3729b26689a4a7460d6a61c00253485314508eed5188fdd41e32756603d447f3284af864306eb35914c965e",
            "file": "libs/material/src/lib/common/template-outlet/template-outlet.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-template-outlet",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./template-outlet.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "QueryList<ITemplateRef<NgTemplateOutlet>>",
                    "decorators": []
                },
                {
                    "name": "testing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "testName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, QueryList } from '@angular/core';\nimport { CommonModule, NgTemplateOutlet } from '@angular/common';\n\nimport { ITemplateRef } from '../types';\n\n@Component({\n  selector: 'wt-template-outlet',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './template-outlet.component.html',\n  styleUrl: './template-outlet.component.scss',\n})\nexport class TemplateOutletComponent {\n  @Input() testing = false;\n  @Input() testName?: string;\n  @Input() items?: QueryList<ITemplateRef<NgTemplateOutlet>>;\n}\n",
            "styleUrl": "./template-outlet.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<span *ngIf=\"testing === true\">{{ testName }}</span>\n\n@if(items){ @for(item of items; track item){\n<ng-container *ngTemplateOutlet=\"item.templateRef\"></ng-container>\n} }\n"
        },
        {
            "name": "ViewportComponent",
            "id": "component-ViewportComponent-a5b1a1fdd2db6c032743eb8fd5277986dcb11ed9e360a3cb2e2900e3989c255e4c3e4021203e7b7250561b1cfb93186ad493384c4eddfcc67697f12198b3cf2b",
            "file": "libs/material/src/lib/common/viewport/viewport.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-viewport",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./viewport.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ViewportDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ViewportDirective } from './viewport.directive';\n\n@Component({\n  selector: 'wt-viewport',\n  standalone: true,\n  imports: [CommonModule, ViewportDirective],\n  templateUrl: './viewport.component.html',\n  styleUrl: './viewport.component.scss',\n})\nexport class ViewportComponent {}\n",
            "styleUrl": "./viewport.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<ng-container #viewPort=\"wtViewport\" wtViewport></ng-container>\n\n<span> <strong>Is Handset : </strong>{{ viewPort.isHandset }}</span>\n\n<span><strong></strong>{{ viewPort.toggle('Big Screen', 'Handset') }}</span>\n"
        },
        {
            "name": "WebLayoutComponent",
            "id": "component-WebLayoutComponent-7864cc950ab6d93d149a5eae62bbe8d789fbe6e0bae1692ae2013fd2b7fc60bea91bb9fd0306eaf35d393d5a34648ea348b666548fad673ea56f138f6c7db37a",
            "file": "libs/material/src/lib/web-layout/web-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-web-layout",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./web-layout.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "testing",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatSidenavModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatToolbarModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n\n@Component({\n  selector: 'wt-web-layout',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatSidenavModule,\n    MatButtonModule,\n    MatIconModule,\n    MatToolbarModule,\n  ],\n  templateUrl: './web-layout.component.html',\n  styleUrl: './web-layout.component.scss',\n})\nexport class WebLayoutComponent {\n  @Input() testing = true;\n}\n",
            "styleUrl": "./web-layout.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!-- Subscribers  -->\n<!-- <ng-container *ngIf=\"$isHandset | async\"></ng-container> -->\n\n<!-- General -->\n<ng-template #queryListTemplate let-items=\"items\" let-testName=\"testName\">\n  <span *ngIf=\"testing === true\">{{ testName || 'No test name' }}</span>\n\n  @if(items){ @for(item of items; track item){\n  <ng-container *ngTemplateOutlet=\"item.templateRef\"></ng-container>\n  } }\n</ng-template>\n\n<div class=\"column-container\">\n  <mat-toolbar class=\"main-toolbar\" color=\"primary\"></mat-toolbar>\n\n  <div class=\"row-container\">\n    <!-- Left content  -->\n    <div class=\"column-container\">Left content</div>\n\n    <div class=\"column-container\">Main Content</div>\n\n    <!-- Right content -->\n    <div class=\"column-container\">Right content</div>\n  </div>\n\n  <div class=\"row-container\">\n    \n  </div>\n</div>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "AppLayoutDirectives",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/app-layout/app-layout.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  MainContentDirective,\r\n  FloatingItemsDirective,\r\n  ToolbarRightDirective,\r\n  ToolbarLeftDirective,\r\n  SidenavLeftDirective,\r\n  SidenavRightDirective,\r\n  StatusbarLeftDirective,\r\n  StatusbarRightDirective,\r\n]"
            },
            {
                "name": "AppLayoutModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/app-layout/app-layout.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  CommonModule,\r\n  MatSidenavModule,\r\n  MatToolbarModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  ViewportDirective,\r\n  FullscreenDirective,\r\n  AppLogoDirective,\r\n  TemplateOutletComponent,\r\n]"
            },
            {
                "name": "commonProviders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/_story/common-providers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  importProvidersFrom([BrowserAnimationsModule, RouterTestingModule]),\r\n]"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: Primary.args,\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const logo = canvas.queryByAltText('App Logo');\n    expect(logo).toBeTruthy();\n    const fullscreen = canvas.queryByLabelText('Toggle Fullscreen');\n    expect(fullscreen).toBeTruthy();\n\n    const toggleLeftSidenav = canvas.queryByLabelText('Toggle Left Sidenav');\n    expect(toggleLeftSidenav).toBeTruthy();\n\n    const toggleRightSidenav = canvas.queryByLabelText('Toggle Right Sidenav');\n    expect(toggleRightSidenav).toBeTruthy();\n\n    const delay = 400;\n\n    await userEvent.click(toggleLeftSidenav!, { delay });\n    await userEvent.click(toggleLeftSidenav!, { delay });\n    await userEvent.click(toggleLeftSidenav!, { delay });\n    await userEvent.click(toggleLeftSidenav!, { delay });\n\n    await userEvent.click(toggleRightSidenav!, { delay });\n    await userEvent.click(toggleRightSidenav!, { delay });\n    await userEvent.click(toggleRightSidenav!, { delay });\n    await userEvent.click(toggleRightSidenav!, { delay });\n  },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/hello/hello.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {},\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const helloButton = canvas.queryByTestId('hello-button');\r\n\r\n    if (!helloButton) fail('Hello button is not found!');\r\n\r\n    await userEvent.click(helloButton, { delay: 1000 });\r\n    await userEvent.click(helloButton, { delay: 1000 });\r\n    await userEvent.click(helloButton, { delay: 1000 });\r\n    await userEvent.click(helloButton, { delay: 1000 });\r\n  },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: Primary.args,\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n  },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/web-layout/web-layout.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n  },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/common/fullscreen/fullscreen.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/fullscreen works!/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/common/container/container.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: Primary.args,\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/container works!/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/common/template-outlet/template-outlet.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    testing: false,\n    testName: '',\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/template-outlet works!/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/common/viewport/viewport.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/viewport works!/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AppLayoutComponent>",
                "defaultValue": "{\n  component: AppLayoutComponent,\n  title: 'AppLayoutComponent',\n  decorators: [\n    applicationConfig({\n      providers: [...commonProviders],\n    }),\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/hello/hello.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HelloComponent>",
                "defaultValue": "{\r\n  component: HelloComponent,\r\n  title: 'HelloComponent',\r\n  tags: ['Just a sample'],\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [...commonProviders],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<NavListComponent>",
                "defaultValue": "{\n  component: NavListComponent,\n  title: 'NavListComponent',\n  decorators: [\n    applicationConfig({\n      providers: [...commonProviders],\n    }),\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/web-layout/web-layout.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<WebLayoutComponent>",
                "defaultValue": "{\n  component: WebLayoutComponent,\n  title: 'WebLayoutComponent',\n  decorators: [\n    applicationConfig({\n      providers: [...commonProviders],\n    }),\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/common/fullscreen/fullscreen.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<FullscreenComponent>",
                "defaultValue": "{\n  component: FullscreenComponent,\n  title: 'FullscreenComponent',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/common/container/container.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ContainerComponent>",
                "defaultValue": "{\n  component: ContainerComponent,\n  title: 'ContainerComponent',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/common/template-outlet/template-outlet.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TemplateOutletComponent>",
                "defaultValue": "{\n  component: TemplateOutletComponent,\n  title: 'TemplateOutletComponent',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/common/viewport/viewport.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ViewportComponent>",
                "defaultValue": "{\n  component: ViewportComponent,\n  title: 'ViewportComponent',\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    testing: true,\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/hello/hello.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {},\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    items: [\n      {\n        id: 1,\n        title: 'First title',\n        subTitle: 'First subtitle',\n        icon: 'info',\n        iconColor: 'accent',\n        badge: '100',\n        badgeColor: 'accent',\n        meta: 'First meta',\n        route: '',\n      },\n      {\n        id: 2,\n        title: 'First title',\n        subTitle: 'First subtitle',\n        icon: 'info',\n        iconColor: 'accent',\n        badge: '100',\n        badgeColor: 'accent',\n        meta: 'First meta',\n        route: 'some',\n      },\n    ],\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/web-layout/web-layout.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/common/fullscreen/fullscreen.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/common/container/container.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    containerType: 'row',\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/common/template-outlet/template-outlet.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    testing: false,\n    testName: '',\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/common/viewport/viewport.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "AlignItems",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"baseline\" | \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"start\" | \"stretch\" | string",
                "file": "libs/material/src/lib/common/container/container.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Color",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"accent\" | \"warn\"",
                "file": "libs/material/src/lib/common/types/color.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ContainerType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"row\" | \"column\" | \"right\" | \"left\" | \"top\" | \"bottom\"",
                "file": "libs/material/src/lib/common/container/container.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Direction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"row\" | \"column\"",
                "file": "libs/material/src/lib/common/container/container.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Gap",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | string",
                "file": "libs/material/src/lib/common/container/container.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "JustifyContent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"baseline\" | \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"left\" | \"right\" | \"safe\" | \"space-around\" | \"space-between\" | \"space-evenly\" | \"start\" | \"stretch\" | string",
                "file": "libs/material/src/lib/common/container/container.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "MenuItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/material/src/lib/common/types/menu-item.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AppLayoutComponent>",
                "file": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HelloComponent>",
                "file": "libs/material/src/lib/hello/hello.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<NavListComponent>",
                "file": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<WebLayoutComponent>",
                "file": "libs/material/src/lib/web-layout/web-layout.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<FullscreenComponent>",
                "file": "libs/material/src/lib/common/fullscreen/fullscreen.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ContainerComponent>",
                "file": "libs/material/src/lib/common/container/container.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TemplateOutletComponent>",
                "file": "libs/material/src/lib/common/template-outlet/template-outlet.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ViewportComponent>",
                "file": "libs/material/src/lib/common/viewport/viewport.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "libs/material/src/lib/app-layout/app-layout.component.ts": [
                {
                    "name": "AppLayoutDirectives",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/app-layout/app-layout.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  MainContentDirective,\r\n  FloatingItemsDirective,\r\n  ToolbarRightDirective,\r\n  ToolbarLeftDirective,\r\n  SidenavLeftDirective,\r\n  SidenavRightDirective,\r\n  StatusbarLeftDirective,\r\n  StatusbarRightDirective,\r\n]"
                },
                {
                    "name": "AppLayoutModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/app-layout/app-layout.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  CommonModule,\r\n  MatSidenavModule,\r\n  MatToolbarModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  ViewportDirective,\r\n  FullscreenDirective,\r\n  AppLogoDirective,\r\n  TemplateOutletComponent,\r\n]"
                }
            ],
            "libs/material/src/lib/_story/common-providers.ts": [
                {
                    "name": "commonProviders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/_story/common-providers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  importProvidersFrom([BrowserAnimationsModule, RouterTestingModule]),\r\n]"
                }
            ],
            "libs/material/src/lib/app-layout/app-layout.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: Primary.args,\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const logo = canvas.queryByAltText('App Logo');\n    expect(logo).toBeTruthy();\n    const fullscreen = canvas.queryByLabelText('Toggle Fullscreen');\n    expect(fullscreen).toBeTruthy();\n\n    const toggleLeftSidenav = canvas.queryByLabelText('Toggle Left Sidenav');\n    expect(toggleLeftSidenav).toBeTruthy();\n\n    const toggleRightSidenav = canvas.queryByLabelText('Toggle Right Sidenav');\n    expect(toggleRightSidenav).toBeTruthy();\n\n    const delay = 400;\n\n    await userEvent.click(toggleLeftSidenav!, { delay });\n    await userEvent.click(toggleLeftSidenav!, { delay });\n    await userEvent.click(toggleLeftSidenav!, { delay });\n    await userEvent.click(toggleLeftSidenav!, { delay });\n\n    await userEvent.click(toggleRightSidenav!, { delay });\n    await userEvent.click(toggleRightSidenav!, { delay });\n    await userEvent.click(toggleRightSidenav!, { delay });\n    await userEvent.click(toggleRightSidenav!, { delay });\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AppLayoutComponent>",
                    "defaultValue": "{\n  component: AppLayoutComponent,\n  title: 'AppLayoutComponent',\n  decorators: [\n    applicationConfig({\n      providers: [...commonProviders],\n    }),\n  ],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    testing: true,\n  },\n}"
                }
            ],
            "libs/material/src/lib/hello/hello.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/hello/hello.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {},\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const helloButton = canvas.queryByTestId('hello-button');\r\n\r\n    if (!helloButton) fail('Hello button is not found!');\r\n\r\n    await userEvent.click(helloButton, { delay: 1000 });\r\n    await userEvent.click(helloButton, { delay: 1000 });\r\n    await userEvent.click(helloButton, { delay: 1000 });\r\n    await userEvent.click(helloButton, { delay: 1000 });\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/hello/hello.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HelloComponent>",
                    "defaultValue": "{\r\n  component: HelloComponent,\r\n  title: 'HelloComponent',\r\n  tags: ['Just a sample'],\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [...commonProviders],\r\n    }),\r\n  ],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/hello/hello.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {},\r\n}"
                }
            ],
            "libs/material/src/lib/nav-list/nav-list.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: Primary.args,\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<NavListComponent>",
                    "defaultValue": "{\n  component: NavListComponent,\n  title: 'NavListComponent',\n  decorators: [\n    applicationConfig({\n      providers: [...commonProviders],\n    }),\n  ],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    items: [\n      {\n        id: 1,\n        title: 'First title',\n        subTitle: 'First subtitle',\n        icon: 'info',\n        iconColor: 'accent',\n        badge: '100',\n        badgeColor: 'accent',\n        meta: 'First meta',\n        route: '',\n      },\n      {\n        id: 2,\n        title: 'First title',\n        subTitle: 'First subtitle',\n        icon: 'info',\n        iconColor: 'accent',\n        badge: '100',\n        badgeColor: 'accent',\n        meta: 'First meta',\n        route: 'some',\n      },\n    ],\n  },\n}"
                }
            ],
            "libs/material/src/lib/web-layout/web-layout.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/web-layout/web-layout.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/web-layout/web-layout.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<WebLayoutComponent>",
                    "defaultValue": "{\n  component: WebLayoutComponent,\n  title: 'WebLayoutComponent',\n  decorators: [\n    applicationConfig({\n      providers: [...commonProviders],\n    }),\n  ],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/web-layout/web-layout.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n}"
                }
            ],
            "libs/material/src/lib/common/fullscreen/fullscreen.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/common/fullscreen/fullscreen.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/fullscreen works!/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/common/fullscreen/fullscreen.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<FullscreenComponent>",
                    "defaultValue": "{\n  component: FullscreenComponent,\n  title: 'FullscreenComponent',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/common/fullscreen/fullscreen.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n}"
                }
            ],
            "libs/material/src/lib/common/container/container.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/common/container/container.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: Primary.args,\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/container works!/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/common/container/container.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ContainerComponent>",
                    "defaultValue": "{\n  component: ContainerComponent,\n  title: 'ContainerComponent',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/common/container/container.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    containerType: 'row',\n  },\n}"
                }
            ],
            "libs/material/src/lib/common/template-outlet/template-outlet.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/common/template-outlet/template-outlet.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    testing: false,\n    testName: '',\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/template-outlet works!/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/common/template-outlet/template-outlet.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TemplateOutletComponent>",
                    "defaultValue": "{\n  component: TemplateOutletComponent,\n  title: 'TemplateOutletComponent',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/common/template-outlet/template-outlet.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    testing: false,\n    testName: '',\n  },\n}"
                }
            ],
            "libs/material/src/lib/common/viewport/viewport.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/common/viewport/viewport.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/viewport works!/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/common/viewport/viewport.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ViewportComponent>",
                    "defaultValue": "{\n  component: ViewportComponent,\n  title: 'ViewportComponent',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/common/viewport/viewport.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "libs/material/src/lib/common/container/container.component.ts": [
                {
                    "name": "AlignItems",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"baseline\" | \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"start\" | \"stretch\" | string",
                    "file": "libs/material/src/lib/common/container/container.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ContainerType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"row\" | \"column\" | \"right\" | \"left\" | \"top\" | \"bottom\"",
                    "file": "libs/material/src/lib/common/container/container.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "Direction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"row\" | \"column\"",
                    "file": "libs/material/src/lib/common/container/container.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "Gap",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | string",
                    "file": "libs/material/src/lib/common/container/container.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "JustifyContent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"baseline\" | \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"left\" | \"right\" | \"safe\" | \"space-around\" | \"space-between\" | \"space-evenly\" | \"start\" | \"stretch\" | string",
                    "file": "libs/material/src/lib/common/container/container.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "libs/material/src/lib/common/types/color.ts": [
                {
                    "name": "Color",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"accent\" | \"warn\"",
                    "file": "libs/material/src/lib/common/types/color.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "libs/material/src/lib/common/types/menu-item.ts": [
                {
                    "name": "MenuItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/material/src/lib/common/types/menu-item.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "libs/material/src/lib/app-layout/app-layout.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AppLayoutComponent>",
                    "file": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/material/src/lib/hello/hello.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HelloComponent>",
                    "file": "libs/material/src/lib/hello/hello.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/material/src/lib/nav-list/nav-list.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<NavListComponent>",
                    "file": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/material/src/lib/web-layout/web-layout.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<WebLayoutComponent>",
                    "file": "libs/material/src/lib/web-layout/web-layout.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/material/src/lib/common/fullscreen/fullscreen.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<FullscreenComponent>",
                    "file": "libs/material/src/lib/common/fullscreen/fullscreen.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/material/src/lib/common/container/container.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ContainerComponent>",
                    "file": "libs/material/src/lib/common/container/container.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/material/src/lib/common/template-outlet/template-outlet.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TemplateOutletComponent>",
                    "file": "libs/material/src/lib/common/template-outlet/template-outlet.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/material/src/lib/common/viewport/viewport.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ViewportComponent>",
                    "file": "libs/material/src/lib/common/viewport/viewport.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "libs/material/src/lib/_story/common-providers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "commonProviders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppLayoutComponent",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AppLayoutDirectives",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AppLayoutModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/app-logo/app-logo.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AppLogoDirective",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/container/container.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/container/container.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/container/container.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/container/container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/container/container.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ContainerContentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/fullscreen/fullscreen.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/fullscreen/fullscreen.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/fullscreen/fullscreen.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/fullscreen/fullscreen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FullscreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/fullscreen/fullscreen.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FullscreenDirective",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/layout/layout.directive.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/layout/layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ContentLeftDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/layout/layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ContentRightDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/layout/layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FloatingItemsDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/layout/layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FooterLeftDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/layout/layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FooterRightDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/layout/layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "MainContentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/layout/layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SidenavLeftDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/layout/layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SidenavRightDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/layout/layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "StatusbarLeftDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/layout/layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "StatusbarRightDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/layout/layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ToolbarLeftDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/layout/layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ToolbarRightDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/template-outlet/template-outlet.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/template-outlet/template-outlet.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/template-outlet/template-outlet.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/template-outlet/template-outlet.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TemplateOutletComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/types/element-ref.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IElementRef",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/types/template-ref.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITemplateRef",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/types/toggle.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IToggle",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/types/toggle.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IToggleValue",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/viewport/viewport.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/viewport/viewport.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/viewport/viewport.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/viewport/viewport.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ViewportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/common/viewport/viewport.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ViewportDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/hello/hello.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/hello/hello.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/hello/hello.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/hello/hello.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HelloComponent",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/nav-list/nav-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavListComponent",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "libs/material/src/lib/web-layout/web-layout.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/web-layout/web-layout.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/web-layout/web-layout.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/web-layout/web-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WebLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}