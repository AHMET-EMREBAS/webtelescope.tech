{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "FloatingItemsDirective",
            "id": "directive-FloatingItemsDirective-24ddfae6a67d282b2bb940018ec6309b9c8fe8cef0c2c54d84546aab519145df5325fcbd02add2e7e2fcea32e36816c79ecb04c93b328a240dbb93eafb33311e",
            "file": "libs/material/src/lib/app-layout/app-layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRightt]', standalone: true })\r\nexport class StatusbarRighttDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n",
            "selector": "[wtFloatingItems]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "MainContentDirective",
            "id": "directive-MainContentDirective-24ddfae6a67d282b2bb940018ec6309b9c8fe8cef0c2c54d84546aab519145df5325fcbd02add2e7e2fcea32e36816c79ecb04c93b328a240dbb93eafb33311e",
            "file": "libs/material/src/lib/app-layout/app-layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRightt]', standalone: true })\r\nexport class StatusbarRighttDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n",
            "selector": "[wtMainContent]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SidenavLeftDirective",
            "id": "directive-SidenavLeftDirective-24ddfae6a67d282b2bb940018ec6309b9c8fe8cef0c2c54d84546aab519145df5325fcbd02add2e7e2fcea32e36816c79ecb04c93b328a240dbb93eafb33311e",
            "file": "libs/material/src/lib/app-layout/app-layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRightt]', standalone: true })\r\nexport class StatusbarRighttDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n",
            "selector": "[wtSidenavLeft]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SidenavRightDirective",
            "id": "directive-SidenavRightDirective-24ddfae6a67d282b2bb940018ec6309b9c8fe8cef0c2c54d84546aab519145df5325fcbd02add2e7e2fcea32e36816c79ecb04c93b328a240dbb93eafb33311e",
            "file": "libs/material/src/lib/app-layout/app-layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRightt]', standalone: true })\r\nexport class StatusbarRighttDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n",
            "selector": "[wtSidenavRight]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "StatusbarLeftDirective",
            "id": "directive-StatusbarLeftDirective-24ddfae6a67d282b2bb940018ec6309b9c8fe8cef0c2c54d84546aab519145df5325fcbd02add2e7e2fcea32e36816c79ecb04c93b328a240dbb93eafb33311e",
            "file": "libs/material/src/lib/app-layout/app-layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRightt]', standalone: true })\r\nexport class StatusbarRighttDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n",
            "selector": "[wtStatusbarLeft]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "StatusbarRighttDirective",
            "id": "directive-StatusbarRighttDirective-24ddfae6a67d282b2bb940018ec6309b9c8fe8cef0c2c54d84546aab519145df5325fcbd02add2e7e2fcea32e36816c79ecb04c93b328a240dbb93eafb33311e",
            "file": "libs/material/src/lib/app-layout/app-layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRightt]', standalone: true })\r\nexport class StatusbarRighttDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n",
            "selector": "[wtStatusbarRightt]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ToolbarLeftDirective",
            "id": "directive-ToolbarLeftDirective-24ddfae6a67d282b2bb940018ec6309b9c8fe8cef0c2c54d84546aab519145df5325fcbd02add2e7e2fcea32e36816c79ecb04c93b328a240dbb93eafb33311e",
            "file": "libs/material/src/lib/app-layout/app-layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRightt]', standalone: true })\r\nexport class StatusbarRighttDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n",
            "selector": "[wtToolbarLeft]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ToolbarRightDirective",
            "id": "directive-ToolbarRightDirective-24ddfae6a67d282b2bb940018ec6309b9c8fe8cef0c2c54d84546aab519145df5325fcbd02add2e7e2fcea32e36816c79ecb04c93b328a240dbb93eafb33311e",
            "file": "libs/material/src/lib/app-layout/app-layout.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[wtMainContent]', standalone: true })\r\nexport class MainContentDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtFloatingItems]', standalone: true })\r\nexport class FloatingItemsDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarRight]', standalone: true })\r\nexport class ToolbarRightDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtToolbarLeft]', standalone: true })\r\nexport class ToolbarLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavLeft]', standalone: true })\r\nexport class SidenavLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtSidenavRight]', standalone: true })\r\nexport class SidenavRightDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarLeft]', standalone: true })\r\nexport class StatusbarLeftDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n\r\n@Directive({ selector: '[wtStatusbarRightt]', standalone: true })\r\nexport class StatusbarRighttDirective {\r\n  constructor(public readonly templateRef: TemplateRef<NgTemplateOutlet>) {}\r\n}\r\n",
            "selector": "[wtToolbarRight]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<NgTemplateOutlet>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<NgTemplateOutlet>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppLayoutComponent",
            "id": "component-AppLayoutComponent-2ca134ac4af4c42fc27c3e66b8a85d2bec473fe960a795aaa67e746464006ce00cba90e1f06de1850e657b64e90ce03ca0895efebb76eb6bf0e7452296ac5b34",
            "file": "libs/material/src/lib/app-layout/app-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "AppLayoutDirectives",
                    "type": "directive"
                }
            ],
            "selector": "wt-app-layout",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app-layout.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "testing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTest the app layout without pushing the content\n",
                    "description": "<p>Test the app layout without pushing the content</p>\n",
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "floatingItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<FloatingItemsDirective>",
                    "optional": true,
                    "description": "",
                    "line": 55,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "FloatingItemsDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "fullscreenButtonIcon",
                    "defaultValue": "'fullscreen'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"fullscreen_exit\" | \"fullscreen\"",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "fullscreenTooltip",
                    "defaultValue": "'Fullscreen'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"Fullscreen\" | \"Exit Fullscreen\"",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "isFullscreen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "mainContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<MainContentDirective>",
                    "optional": true,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "MainContentDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "rightSidenavToggleIcon",
                    "defaultValue": "'settings'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "sidenavLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<SidenavLeftDirective>",
                    "optional": true,
                    "description": "",
                    "line": 61,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "SidenavLeftDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "sidenavRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<SidenavRightDirective>",
                    "optional": true,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "SidenavRightDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "statusbarLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<StatusbarLeftDirective>",
                    "optional": true,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "StatusbarLeftDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "statusbarRightt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<StatusbarRighttDirective>",
                    "optional": true,
                    "description": "",
                    "line": 67,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "StatusbarRighttDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "toolbarLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ToolbarLeftDirective>",
                    "optional": true,
                    "description": "",
                    "line": 59,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ToolbarLeftDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "toolbarRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ToolbarRightDirective>",
                    "optional": true,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ToolbarRightDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "fullscreenToggle",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AppLayoutModules",
                    "type": "module"
                },
                {
                    "name": "AppLayoutDirectives",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChildren, Input, QueryList } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  MatDrawerMode,\r\n  MatSidenav,\r\n  MatSidenavModule,\r\n} from '@angular/material/sidenav';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport {\r\n  MainContentDirective,\r\n  FloatingItemsDirective,\r\n  ToolbarRightDirective,\r\n  ToolbarLeftDirective,\r\n  SidenavLeftDirective,\r\n  SidenavRightDirective,\r\n  StatusbarLeftDirective,\r\n  StatusbarRighttDirective,\r\n} from './app-layout.directive';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { Observable, map } from 'rxjs';\r\n\r\nconst AppLayoutDirectives = [\r\n  MainContentDirective,\r\n  FloatingItemsDirective,\r\n  ToolbarRightDirective,\r\n  ToolbarLeftDirective,\r\n  SidenavLeftDirective,\r\n  SidenavRightDirective,\r\n  StatusbarLeftDirective,\r\n  StatusbarRighttDirective,\r\n];\r\n\r\nexport const AppLayoutModules = [\r\n  CommonModule,\r\n  MatSidenavModule,\r\n  MatToolbarModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n];\r\n\r\n@Component({\r\n  selector: 'wt-app-layout',\r\n  standalone: true,\r\n  imports: [...AppLayoutModules, ...AppLayoutDirectives],\r\n  templateUrl: './app-layout.component.html',\r\n  styleUrl: './app-layout.component.scss',\r\n  providers: [...AppLayoutDirectives],\r\n})\r\nexport class AppLayoutComponent {\r\n  @ContentChildren(MainContentDirective)\r\n  mainContent?: QueryList<MainContentDirective>;\r\n  @ContentChildren(FloatingItemsDirective)\r\n  floatingItems?: QueryList<FloatingItemsDirective>;\r\n  @ContentChildren(ToolbarRightDirective)\r\n  toolbarRight?: QueryList<ToolbarRightDirective>;\r\n  @ContentChildren(ToolbarLeftDirective)\r\n  toolbarLeft?: QueryList<ToolbarLeftDirective>;\r\n  @ContentChildren(SidenavLeftDirective)\r\n  sidenavLeft?: QueryList<SidenavLeftDirective>;\r\n  @ContentChildren(SidenavRightDirective)\r\n  sidenavRight?: QueryList<SidenavRightDirective>;\r\n  @ContentChildren(StatusbarLeftDirective)\r\n  statusbarLeft?: QueryList<StatusbarLeftDirective>;\r\n  @ContentChildren(StatusbarRighttDirective)\r\n  statusbarRightt?: QueryList<StatusbarRighttDirective>;\r\n\r\n  /**\r\n   * Test the app layout without pushing the content\r\n   */\r\n  @Input() testing = false;\r\n\r\n  /**\r\n   * @ignore internal\r\n   */\r\n  mode: MatDrawerMode = 'side';\r\n\r\n  /**\r\n   * @ignore internal\r\n   */\r\n  isLeftSidenavOpen = false;\r\n\r\n  rightSidenavToggleIcon = 'settings';\r\n\r\n  /**\r\n   * @ignore internal\r\n   */\r\n  isRightSidenavOpen = false;\r\n\r\n  /**\r\n   * @ignore internal\r\n   */\r\n  isHandset = false;\r\n\r\n  /**\r\n   * @ignore internal\r\n   */\r\n  $isHandset: Observable<boolean> = this.media\r\n    .observe([Breakpoints.Handset, Breakpoints.Small, Breakpoints.XSmall])\r\n    .pipe(\r\n      map((e) => {\r\n        if (e.matches) {\r\n          this.isHandset = true;\r\n          this.mode = 'over';\r\n          this.isLeftSidenavOpen = false;\r\n          return true;\r\n        } else {\r\n          this.isHandset = false;\r\n          this.mode = 'side';\r\n          this.isLeftSidenavOpen = true;\r\n          return false;\r\n        }\r\n      })\r\n    );\r\n\r\n  constructor(private readonly media: BreakpointObserver) {}\r\n\r\n  /**\r\n   * @ignore internal\r\n   */\r\n  sideNavClick(sidenav: MatSidenav) {\r\n    if (this.isHandset) {\r\n      sidenav.toggle();\r\n    }\r\n  }\r\n\r\n  isFullscreen = false;\r\n  fullscreenButtonIcon: 'fullscreen_exit' | 'fullscreen' = 'fullscreen';\r\n  fullscreenTooltip: 'Fullscreen' | 'Exit Fullscreen' = 'Fullscreen';\r\n\r\n  fullscreenToggle(element: HTMLDivElement) {\r\n    this.isFullscreen = !this.isFullscreen;\r\n\r\n    if (this.isFullscreen) {\r\n      element.requestFullscreen();\r\n      this.fullscreenTooltip = 'Exit Fullscreen';\r\n      this.fullscreenButtonIcon = 'fullscreen_exit';\r\n    } else {\r\n      document.exitFullscreen();\r\n      this.fullscreenTooltip = 'Fullscreen';\r\n      this.fullscreenButtonIcon = 'fullscreen';\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./app-layout.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "media",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 115,
                "jsdoctags": [
                    {
                        "name": "media",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<!-- Subscribers  -->\r\n<ng-container *ngIf=\"$isHandset | async\"></ng-container>\r\n\r\n<!-- General -->\r\n<ng-template #queryListTemplate let-items=\"items\" let-testName=\"testName\">\r\n  <span *ngIf=\"testing === true\">{{ testName || 'No test name' }}</span>\r\n\r\n  @if(items){ @for(item of items; track item){\r\n  <ng-container *ngTemplateOutlet=\"item.templateRef\"></ng-container>\r\n  } }\r\n</ng-template>\r\n\r\n<!-- Example \r\n\r\n  <ng-container *ngTemplateOutlet=\"queryListTemplate; context: { items:items }\"></ng-container>\r\n-->\r\n\r\n<!-- Toolbar like -->\r\n\r\n<ng-template\r\n  #toolbarTemplate\r\n  let-left=\"left\"\r\n  let-right=\"right\"\r\n  let-testName=\"testName\"\r\n>\r\n  <div class=\"space-around-row-container\">\r\n    <div class=\"row-container-gap-1 row-flex-start\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"\r\n          queryListTemplate;\r\n          context: { items: left, testName: testName + '-left' }\r\n        \"\r\n      ></ng-container>\r\n    </div>\r\n    <div class=\"row-container-gap-1 row-flex-end\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"\r\n          queryListTemplate;\r\n          context: { items: right, testName: testName + '-right' }\r\n        \"\r\n      ></ng-container>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<mat-sidenav-container>\r\n  <!-- Sidenav Left -->\r\n  <mat-sidenav\r\n    #leftSidenav\r\n    class=\"left\"\r\n    position=\"start\"\r\n    [opened]=\"isLeftSidenavOpen\"\r\n    [mode]=\"mode\"\r\n    (click)=\"sideNavClick(leftSidenav)\"\r\n  >\r\n    <ng-container\r\n      *ngTemplateOutlet=\"\r\n        queryListTemplate;\r\n        context: { items: sidenavLeft, testName: 'Left sidenav' }\r\n      \"\r\n    ></ng-container>\r\n  </mat-sidenav>\r\n\r\n  <!-- Sidenav Right -->\r\n  <mat-sidenav\r\n    #rightSidenav\r\n    class=\"right\"\r\n    position=\"end\"\r\n    [mode]=\"mode\"\r\n    (click)=\"sideNavClick(rightSidenav)\"\r\n  >\r\n    <ng-container\r\n      *ngTemplateOutlet=\"\r\n        queryListTemplate;\r\n        context: { items: sidenavRight, testName: 'Right sidenav' }\r\n      \"\r\n    ></ng-container>\r\n  </mat-sidenav>\r\n\r\n  <mat-sidenav-content>\r\n    <!-- --Start of the content -->\r\n\r\n    <!-- Main toolbar -->\r\n    <mat-toolbar class=\"toolbar\" color=\"primary\">\r\n      <img\r\n        class=\"app-logo\"\r\n        src=\"assets/icons/icon-72x72.png\"\r\n        alt=\"App Logo\"\r\n        *ngIf=\"!isHandset\"\r\n      />\r\n\r\n      <!-- Left Sidenav Toggle -->\r\n      <button\r\n        class=\"left-sidenav-toggle\"\r\n        mat-icon-button\r\n        (click)=\"leftSidenav.toggle()\"\r\n        aria-label=\"Toggle Left Sidenav\"\r\n      >\r\n        <mat-icon class=\"fill\">{{\r\n          leftSidenav.opened ? 'menu_opened' : 'menu'\r\n        }}</mat-icon>\r\n      </button>\r\n\r\n      <!-- Toolbar Items -->\r\n      <ng-container\r\n        *ngTemplateOutlet=\"\r\n          toolbarTemplate;\r\n          context: {\r\n            left: toolbarLeft,\r\n            right: toolbarRight,\r\n            testName: 'toolbar'\r\n          }\r\n        \"\r\n      ></ng-container>\r\n\r\n      <!-- Right Sidenav Toggle -->\r\n      <button\r\n        class=\"right-sidenav-toggle\"\r\n        mat-icon-button\r\n        (click)=\"rightSidenav.toggle()\"\r\n        aria-label=\"Toggle Right Sidenav\"\r\n      >\r\n        <mat-icon class=\"fill\">{{ rightSidenavToggleIcon }}</mat-icon>\r\n      </button>\r\n    </mat-toolbar>\r\n\r\n    <!-- Main Content  -->\r\n\r\n    <div #mainContentContainer class=\"main-content-container\">\r\n      <!-- Full Screen Button -->\r\n      <button\r\n        class=\"fullscreen-button\"\r\n        mat-icon-button\r\n        (click)=\"fullscreenToggle(mainContentContainer)\"\r\n        aria-label=\"Toggle Fullscreen\"\r\n      >\r\n        <mat-icon> {{ fullscreenButtonIcon }}</mat-icon>\r\n      </button>\r\n      <ng-container\r\n        *ngTemplateOutlet=\"\r\n          queryListTemplate;\r\n          context: {\r\n            items: mainContent,\r\n            testName: 'Main Content'\r\n          }\r\n        \"\r\n      ></ng-container>\r\n    </div>\r\n\r\n    <!-- Statusbar -->\r\n    <mat-toolbar class=\"statusbar\" color=\"primary\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"\r\n          toolbarTemplate;\r\n          context: {\r\n            left: statusbarLeft,\r\n            right: statusbarRightt,\r\n            testName: 'statusbar'\r\n          }\r\n        \"\r\n      ></ng-container>\r\n    </mat-toolbar>\r\n    <!-- --Endof the content -->\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n"
        },
        {
            "name": "HelloComponent",
            "id": "component-HelloComponent-84625d9faf2e4bcddb6508979e6b13bac60fd3dd8dea20bff0c21050fd4eb35ae1c3c58d0691407181c425dae004bc6decd5774a4475405917d63956f6266995",
            "file": "libs/material/src/lib/hello/hello.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-hello",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./hello.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "message",
                    "defaultValue": "'Sample Message'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput property description\n",
                    "description": "<p>Input property description</p>\n",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "messageEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutput property description\n",
                    "description": "<p>Output property description</p>\n",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "messages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "sendMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunction description\n",
                    "description": "<p>Function description</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'wt-hello',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './hello.component.html',\r\n  styleUrl: './hello.component.scss',\r\n})\r\nexport class HelloComponent {\r\n  messages: string[] = [];\r\n  /**\r\n   * Input property description\r\n   */\r\n  @Input() message = 'Sample Message';\r\n\r\n  /**\r\n   * Output property description\r\n   */\r\n  @Output() messageEvent = new EventEmitter<string>();\r\n\r\n  /**\r\n   * Function description\r\n   */\r\n  sendMessage() {\r\n    const msg = 'This is how events work!';\r\n    this.messages.push(`messageEvent : ${msg}`);\r\n    this.messageEvent.emit(msg);\r\n  }\r\n}\r\n",
            "styleUrl": "./hello.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button (click)=\"sendMessage()\" data-testid=\"hello-button\" class=\"ff-handjet fs3\">Hello There</button>\r\n\r\n<ul>\r\n  @for( m of messages; track m){\r\n\r\n  <li class=\"ff-comfortaa\">{{ m }}</li>\r\n  }\r\n</ul>\r\n"
        },
        {
            "name": "NavListComponent",
            "id": "component-NavListComponent-d94999e903274aa8b345e6fe88b923e8422cba415dba667bdb1054d4a80162e499f8cd99d9af0f1c776312561ee82348a748160e8e1e216cfae90725693c513a",
            "file": "libs/material/src/lib/nav-list/nav-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wt-nav-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./nav-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNav list items\n",
                    "description": "<p>Nav list items</p>\n",
                    "line": 23,
                    "type": "MenuItem[]",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "'List title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNav list title\n",
                    "description": "<p>Nav list title</p>\n",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clickEvent",
                    "defaultValue": "new EventEmitter<MenuItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit the nav item meta data when it is clicked\n",
                    "description": "<p>Emit the nav item meta data when it is clicked</p>\n",
                    "line": 28,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatListModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MenuItem } from '../common';\n\n@Component({\n  selector: 'wt-nav-list',\n  standalone: true,\n  imports: [CommonModule, MatListModule, MatIconModule],\n  templateUrl: './nav-list.component.html',\n  styleUrl: './nav-list.component.scss',\n})\nexport class NavListComponent {\n  /**\n   * Nav list title\n   */\n  @Input() title: string = 'List title';\n\n  /**\n   * Nav list items\n   */\n  @Input() items: MenuItem[] = [];\n\n  /**\n   * Emit the nav item meta data when it is clicked\n   */\n  @Output() clickEvent = new EventEmitter<MenuItem>();\n\n}\n",
            "styleUrl": "./nav-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-nav-list>\n  <a mat-list-item>\n    <div matListItemTitle>Title</div>\n    <div matListItemMeta>Meta</div>\n    <div matListItemIcon>\n      <mat-icon>info</mat-icon>\n    </div>\n  </a>\n</mat-nav-list>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "AppLayoutDirectives",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/app-layout/app-layout.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  MainContentDirective,\r\n  FloatingItemsDirective,\r\n  ToolbarRightDirective,\r\n  ToolbarLeftDirective,\r\n  SidenavLeftDirective,\r\n  SidenavRightDirective,\r\n  StatusbarLeftDirective,\r\n  StatusbarRighttDirective,\r\n]"
            },
            {
                "name": "AppLayoutModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/app-layout/app-layout.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  CommonModule,\r\n  MatSidenavModule,\r\n  MatToolbarModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n]"
            },
            {
                "name": "commonProviders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/_story/common-providers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  importProvidersFrom([BrowserAnimationsModule, RouterTestingModule]),\r\n]"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: Primary.args,\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const logo = canvas.queryByAltText('App Logo');\n    expect(logo).toBeTruthy();\n    const fullscreen = canvas.queryByLabelText('Toggle Fullscreen');\n    expect(fullscreen).toBeTruthy();\n\n    const toggleLeftSidenav = canvas.queryByLabelText('Toggle Left Sidenav');\n    expect(toggleLeftSidenav).toBeTruthy();\n\n    const toggleRightSidenav = canvas.queryByLabelText('Toggle Right Sidenav');\n    expect(toggleRightSidenav).toBeTruthy();\n\n    const delay = 400;\n\n    await userEvent.click(toggleLeftSidenav!, { delay });\n    await userEvent.click(toggleLeftSidenav!, { delay });\n    await userEvent.click(toggleLeftSidenav!, { delay });\n    await userEvent.click(toggleLeftSidenav!, { delay });\n\n    await userEvent.click(toggleRightSidenav!, { delay });\n    await userEvent.click(toggleRightSidenav!, { delay });\n    await userEvent.click(toggleRightSidenav!, { delay });\n    await userEvent.click(toggleRightSidenav!, { delay });\n  },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/hello/hello.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {},\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const helloButton = canvas.queryByTestId('hello-button');\r\n\r\n    if (!helloButton) fail('Hello button is not found!');\r\n\r\n    await userEvent.click(helloButton, { delay: 1000 });\r\n    await userEvent.click(helloButton, { delay: 1000 });\r\n    await userEvent.click(helloButton, { delay: 1000 });\r\n    await userEvent.click(helloButton, { delay: 1000 });\r\n  },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    title: 'List title',\n    items: [],\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/nav-list works!/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AppLayoutComponent>",
                "defaultValue": "{\n  component: AppLayoutComponent,\n  title: 'AppLayoutComponent',\n  decorators: [\n    applicationConfig({\n      providers: [...commonProviders],\n    }),\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/hello/hello.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HelloComponent>",
                "defaultValue": "{\r\n  component: HelloComponent,\r\n  title: 'HelloComponent',\r\n  tags: ['Just a sample'],\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [...commonProviders],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<NavListComponent>",
                "defaultValue": "{\n  component: NavListComponent,\n  title: 'NavListComponent',\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    testing: true,\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/hello/hello.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {},\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    title: 'List title',\n    items: [],\n  },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Color",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"accent\" | \"warn\"",
                "file": "libs/material/src/lib/common/color.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "MenuItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/material/src/lib/common/menu-item.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AppLayoutComponent>",
                "file": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HelloComponent>",
                "file": "libs/material/src/lib/hello/hello.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<NavListComponent>",
                "file": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "libs/material/src/lib/app-layout/app-layout.component.ts": [
                {
                    "name": "AppLayoutDirectives",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/app-layout/app-layout.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  MainContentDirective,\r\n  FloatingItemsDirective,\r\n  ToolbarRightDirective,\r\n  ToolbarLeftDirective,\r\n  SidenavLeftDirective,\r\n  SidenavRightDirective,\r\n  StatusbarLeftDirective,\r\n  StatusbarRighttDirective,\r\n]"
                },
                {
                    "name": "AppLayoutModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/app-layout/app-layout.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  CommonModule,\r\n  MatSidenavModule,\r\n  MatToolbarModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n]"
                }
            ],
            "libs/material/src/lib/_story/common-providers.ts": [
                {
                    "name": "commonProviders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/_story/common-providers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  importProvidersFrom([BrowserAnimationsModule, RouterTestingModule]),\r\n]"
                }
            ],
            "libs/material/src/lib/app-layout/app-layout.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: Primary.args,\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const logo = canvas.queryByAltText('App Logo');\n    expect(logo).toBeTruthy();\n    const fullscreen = canvas.queryByLabelText('Toggle Fullscreen');\n    expect(fullscreen).toBeTruthy();\n\n    const toggleLeftSidenav = canvas.queryByLabelText('Toggle Left Sidenav');\n    expect(toggleLeftSidenav).toBeTruthy();\n\n    const toggleRightSidenav = canvas.queryByLabelText('Toggle Right Sidenav');\n    expect(toggleRightSidenav).toBeTruthy();\n\n    const delay = 400;\n\n    await userEvent.click(toggleLeftSidenav!, { delay });\n    await userEvent.click(toggleLeftSidenav!, { delay });\n    await userEvent.click(toggleLeftSidenav!, { delay });\n    await userEvent.click(toggleLeftSidenav!, { delay });\n\n    await userEvent.click(toggleRightSidenav!, { delay });\n    await userEvent.click(toggleRightSidenav!, { delay });\n    await userEvent.click(toggleRightSidenav!, { delay });\n    await userEvent.click(toggleRightSidenav!, { delay });\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AppLayoutComponent>",
                    "defaultValue": "{\n  component: AppLayoutComponent,\n  title: 'AppLayoutComponent',\n  decorators: [\n    applicationConfig({\n      providers: [...commonProviders],\n    }),\n  ],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    testing: true,\n  },\n}"
                }
            ],
            "libs/material/src/lib/hello/hello.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/hello/hello.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {},\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const helloButton = canvas.queryByTestId('hello-button');\r\n\r\n    if (!helloButton) fail('Hello button is not found!');\r\n\r\n    await userEvent.click(helloButton, { delay: 1000 });\r\n    await userEvent.click(helloButton, { delay: 1000 });\r\n    await userEvent.click(helloButton, { delay: 1000 });\r\n    await userEvent.click(helloButton, { delay: 1000 });\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/hello/hello.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HelloComponent>",
                    "defaultValue": "{\r\n  component: HelloComponent,\r\n  title: 'HelloComponent',\r\n  tags: ['Just a sample'],\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [...commonProviders],\r\n    }),\r\n  ],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/hello/hello.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {},\r\n}"
                }
            ],
            "libs/material/src/lib/nav-list/nav-list.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    title: 'List title',\n    items: [],\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/nav-list works!/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<NavListComponent>",
                    "defaultValue": "{\n  component: NavListComponent,\n  title: 'NavListComponent',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    title: 'List title',\n    items: [],\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "libs/material/src/lib/common/color.ts": [
                {
                    "name": "Color",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"accent\" | \"warn\"",
                    "file": "libs/material/src/lib/common/color.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "libs/material/src/lib/common/menu-item.ts": [
                {
                    "name": "MenuItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/material/src/lib/common/menu-item.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "libs/material/src/lib/app-layout/app-layout.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AppLayoutComponent>",
                    "file": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/material/src/lib/hello/hello.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HelloComponent>",
                    "file": "libs/material/src/lib/hello/hello.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/material/src/lib/nav-list/nav-list.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<NavListComponent>",
                    "file": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 6,
        "status": "low",
        "files": [
            {
                "filePath": "libs/material/src/lib/_story/common-providers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "commonProviders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppLayoutComponent",
                "coveragePercent": 6,
                "coverageCount": "1/16",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AppLayoutDirectives",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AppLayoutModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FloatingItemsDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "MainContentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SidenavLeftDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SidenavRightDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "StatusbarLeftDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "StatusbarRighttDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ToolbarLeftDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/app-layout/app-layout.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ToolbarRightDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/hello/hello.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/hello/hello.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/hello/hello.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/hello/hello.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HelloComponent",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/nav-list/nav-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/lib/nav-list/nav-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavListComponent",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            }
        ]
    }
}