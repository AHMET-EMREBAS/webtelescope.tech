[1mdiff --git a/libs/meta/src/lib/builders/builtin-models.ts b/libs/meta/src/lib/builders/builtin-models.ts[m
[1mdeleted file mode 100644[m
[1mindex 09ceab4..0000000[m
[1m--- a/libs/meta/src/lib/builders/builtin-models.ts[m
[1m+++ /dev/null[m
[36m@@ -1,90 +0,0 @@[m
[31m-import { Model } from '../meta';[m
[31m-import {[m
[31m-  DateOfBirthProperty,[m
[31m-  DefaultBooleanProperty,[m
[31m-  PositiveNumberProperty,[m
[31m-  ShortString,[m
[31m-  UniqueNameProperty,[m
[31m-} from './property-builder';[m
[31m-/**[m
[31m- * @param text[m
[31m- * @param num[m
[31m- * @param bool[m
[31m- * @param date[m
[31m- * @param list[m
[31m- * @param enumValue[m
[31m- * @param category[m
[31m- * @param modelName[m
[31m- * @returns[m
[31m- */[m
[31m-export function TestModel(modelName = 'Category'): Model {[m
[31m-  return {[m
[31m-    modelName,[m
[31m-    properties: {[m
[31m-      text: ShortString({ required: true }),[m
[31m-      num: PositiveNumberProperty(),[m
[31m-      bool: DefaultBooleanProperty(),[m
[31m-      date: DateOfBirthProperty(),[m
[31m-      list: { type: 'string', isArray: true },[m
[31m-      enumValue: { type: 'string', enums: ['first', 'second'] },[m
[31m-    },[m
[31m-    relations: {[m
[31m-      category: {[m
[31m-        target: 'Category',[m
[31m-        type: 'Many',[m
[31m-        model: CategoryModel(),[m
[31m-      },[m
[31m-    },[m
[31m-  };[m
[31m-}[m
[31m-[m
[31m-export function CategoryModel(modelName = 'Category'): Model {[m
[31m-  return {[m
[31m-    modelName,[m
[31m-    properties: {[m
[31m-      name: UniqueNameProperty(),[m
[31m-    },[m
[31m-  };[m
[31m-}[m
[31m-[m
[31m-export function DepartmentModel(): Model {[m
[31m-  return CategoryModel('Department');[m
[31m-}[m
[31m-[m
[31m-export function PriceLevelModel(): Model {[m
[31m-  return CategoryModel('PriceLevel');[m
[31m-}[m
[31m-[m
[31m-export function StoreModel(): Model {[m
[31m-  return CategoryModel('Store');[m
[31m-}[m
[31m-[m
[31m-export function LikeModel<T extends string>([m
[31m-  target: T,[m
[31m-  modelName = 'Like'[m
[31m-): Model {[m
[31m-  return {[m
[31m-    modelName,[m
[31m-    relations: {[m
[31m-      target: {[m
[31m-        type: 'Owner',[m
[31m-        target,[m
[31m-      },[m
[31m-    },[m
[31m-  };[m
[31m-}[m
[31m-[m
[31m-export function DislikeModel<T extends string>([m
[31m-  target: T,[m
[31m-  modelName = 'Like'[m
[31m-): Model {[m
[31m-  return {[m
[31m-    modelName,[m
[31m-    relations: {[m
[31m-      target: {[m
[31m-        type: 'Owner',[m
[31m-        target,[m
[31m-      },[m
[31m-    },[m
[31m-  };[m
[31m-}[m
[1mdiff --git a/libs/meta/src/lib/builders/builtin-relations.ts b/libs/meta/src/lib/builders/builtin-relations.ts[m
[1mdeleted file mode 100644[m
[1mindex b2f9ba5..0000000[m
[1m--- a/libs/meta/src/lib/builders/builtin-relations.ts[m
[1m+++ /dev/null[m
[36m@@ -1,10 +0,0 @@[m
[31m-import { RelationOptions } from '../meta';[m
[31m-import { CategoryModel } from './builtin-models';[m
[31m-[m
[31m-export function CategoryRelation(): RelationOptions {[m
[31m-  return {[m
[31m-    target: 'Category',[m
[31m-    type: 'Many',[m
[31m-    model: CategoryModel(),[m
[31m-  };[m
[31m-}[m
[1mdiff --git a/libs/meta/src/lib/builders/index.ts b/libs/meta/src/lib/builders/index.ts[m
[1mindex d59a205..0307f89 100644[m
[1m--- a/libs/meta/src/lib/builders/index.ts[m
[1m+++ b/libs/meta/src/lib/builders/index.ts[m
[36m@@ -1,5 +1,5 @@[m
 // @index('./*', f => `export * from '${f.path}'`)[m
[31m-export * from './builtin-models'[m
[32m+[m[32mexport * from './models'[m
 export * from './model-builder'[m
[31m-export * from './property-builder'[m
[32m+[m[32mexport * from './properties'[m
 export * from './relation-builder'[m
[1mdiff --git a/libs/meta/src/lib/builders/model-builder.ts b/libs/meta/src/lib/builders/model-builder.ts[m
[1mindex 447e024..3348ed8 100644[m
[1m--- a/libs/meta/src/lib/builders/model-builder.ts[m
[1m+++ b/libs/meta/src/lib/builders/model-builder.ts[m
[36m@@ -1,4 +1,4 @@[m
[31m-import { DescriptionProperty, UniqueNameProperty } from './property-builder';[m
[32m+[m[32mimport { DescriptionProperty, UniqueNameProperty } from './properties';[m
 import { Model } from '../meta/model.meta';[m
 [m
 /**[m
[1mdiff --git a/libs/meta/src/lib/builders/property-builder.ts b/libs/meta/src/lib/builders/property-builder.ts[m
[1mdeleted file mode 100644[m
[1mindex af5d372..0000000[m
[1m--- a/libs/meta/src/lib/builders/property-builder.ts[m
[1m+++ /dev/null[m
[36m@@ -1,64 +0,0 @@[m
[31m-import {[m
[31m-  BooleanProperty,[m
[31m-  DateProperty,[m
[31m-  NumberProperty,[m
[31m-  StringProperty,[m
[31m-} from '../meta';[m
[31m-[m
[31m-type PartialPick<T, P extends keyof T> = Partial<Pick<T, P>>;[m
[31m-[m
[31m-export type CommonStringPick = PartialPick<[m
[31m-  StringProperty,[m
[31m-  'required' | 'unique' | 'defaultValue' | 'description'[m
[31m->;[m
[31m-[m
[31m-export function ShortString(value?: CommonStringPick): Partial<StringProperty> {[m
[31m-  const { defaultValue, required, unique } = value ?? {};[m
[31m-  return {[m
[31m-    type: 'string',[m
[31m-    minLength: 0,[m
[31m-    maxLength: 30,[m
[31m-    searchable: true,[m
[31m-    defaultValue,[m
[31m-    required,[m
[31m-    unique,[m
[31m-  };[m
[31m-}[m
[31m-[m
[31m-export function LongString(value?: CommonStringPick): Partial<StringProperty> {[m
[31m-  const { defaultValue, required, unique } = value ?? {};[m
[31m-  return {[m
[31m-    type: 'string',[m
[31m-    minLength: 0,[m
[31m-    maxLength: 400,[m
[31m-    searchable: true,[m
[31m-    defaultValue,[m
[31m-    required,[m
[31m-    unique,[m
[31m-  };[m
[31m-}[m
[31m-[m
[31m-export function DescriptionProperty(description?: string) {[m
[31m-  return LongString({ description });[m
[31m-}[m
[31m-[m
[31m-export function UniqueNameProperty([m
[31m-  description?: string[m
[31m-): Partial<StringProperty> {[m
[31m-  return ShortString({ unique: true, required: true, description });[m
[31m-}[m
[31m-[m
[31m-export function PositiveNumberProperty(): Partial<NumberProperty> {[m
[31m-  return { type: 'number', minimum: 0, searchable: true };[m
[31m-}[m
[31m-[m
[31m-export function DefaultBooleanProperty(): Partial<BooleanProperty> {[m
[31m-  return { type: 'boolean', searchable: true, defaultValue: false };[m
[31m-}[m
[31m-[m
[31m-export function DateOfBirthProperty(): Partial<DateProperty> {[m
[31m-  return {[m
[31m-    type: 'date',[m
[31m-    searchable: true,[m
[31m-  };[m
[31m-}[m
[1mdiff --git a/libs/meta/src/lib/builders/relation-builder.ts b/libs/meta/src/lib/builders/relation-builder.ts[m
[1mdeleted file mode 100644[m
[1mindex 2cc90f9..0000000[m
[1m--- a/libs/meta/src/lib/builders/relation-builder.ts[m
[1m+++ /dev/null[m
[36m@@ -1,22 +0,0 @@[m
[31m-import { RelationOptions } from '../meta';[m
[31m-[m
[31m-export function OwnerRelation<T extends string>(target: T): RelationOptions {[m
[31m-  return {[m
[31m-    type: 'Owner',[m
[31m-    target,[m
[31m-  };[m
[31m-}[m
[31m-[m
[31m-export function OneRelation<T extends string>(target: T): RelationOptions {[m
[31m-  return {[m
[31m-    type: 'One',[m
[31m-    target,[m
[31m-  };[m
[31m-}[m
[31m-[m
[31m-export function ManyRelation<T extends string>(target: T): RelationOptions {[m
[31m-  return {[m
[31m-    type: 'Many',[m
[31m-    target,[m
[31m-  };[m
[31m-}[m
[1mdiff --git a/libs/meta/src/lib/builders/test-model.ts b/libs/meta/src/lib/builders/test-model.ts[m
[1mindex c5948b1..e8bf1ef 100644[m
[1m--- a/libs/meta/src/lib/builders/test-model.ts[m
[1m+++ b/libs/meta/src/lib/builders/test-model.ts[m
[36m@@ -1,11 +1,11 @@[m
[31m-import { Model } from '../meta';[m
[31m-import { CategoryModel } from './builtin-models';[m
[32m+[m[32mimport { Model, RelationType } from '../meta';[m
 import {[m
   DateOfBirthProperty,[m
   DefaultBooleanProperty,[m
   PositiveNumberProperty,[m
   ShortString,[m
[31m-} from './property-builder';[m
[32m+[m[32m} from './properties';[m
[32m+[m[32mimport { CategoryRelation } from './relations';[m
 /**[m
  * @param text[m
  * @param num[m
[36m@@ -29,11 +29,7 @@[m [mexport function TestModel(modelName = 'Category'): Model {[m
       enumValue: { type: 'string', enums: ['first', 'second'] },[m
     },[m
     relations: {[m
[31m-      category: {[m
[31m-        target: 'Category',[m
[31m-        type: 'Many',[m
[31m-        model: CategoryModel(),[m
[31m-      },[m
[32m+[m[32m      category: CategoryRelation('Category', RelationType.Many),[m
     },[m
   };[m
 }[m
[1mdiff --git a/libs/meta/src/lib/meta/model.meta.ts b/libs/meta/src/lib/meta/model.meta.ts[m
[1mindex 4797a4e..2528650 100644[m
[1m--- a/libs/meta/src/lib/meta/model.meta.ts[m
[1m+++ b/libs/meta/src/lib/meta/model.meta.ts[m
[36m@@ -10,6 +10,9 @@[m [mexport type Model<[m
   RelationNames extends string = string,[m
   StringFormat extends string = string[m
 > = {[m
[32m+[m[32m  /**[m
[32m+[m[32m   * Name of the model[m
[32m+[m[32m   */[m
   modelName: M;[m
   /**[m
    * Record of model properties[m
[36m@@ -19,10 +22,5 @@[m [mexport type Model<[m
   /**[m
    * Record of model relations[m
    */[m
[31m-  relations?: Partial<[m
[31m-    Record<[m
[31m-      RelationNames,[m
[31m-      RelationOptions<M, Model<M, PropertyNames, RelationNames, StringFormat>>[m
[31m-    >[m
[31m-  >;[m
[32m+[m[32m  relations?: Partial<Record<RelationNames, RelationOptions>>;[m
 };[m
[1mdiff --git a/libs/meta/src/lib/meta/relation.meta.ts b/libs/meta/src/lib/meta/relation.meta.ts[m
[1mindex 1a04a23..98ce11c 100644[m
[1m--- a/libs/meta/src/lib/meta/relation.meta.ts[m
[1m+++ b/libs/meta/src/lib/meta/relation.meta.ts[m
[36m@@ -1,19 +1,24 @@[m
[32m+[m[32mimport { Model } from './model.meta';[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Relation type of of Many, One, Owner[m
[32m+[m[32m */[m
 export enum RelationType {[m
   Many = 'Many',[m
   One = 'One',[m
   Owner = 'Owner',[m
 }[m
 [m
[31m-export type RelationOptions<T extends string = string, Model = unknown> = {[m
[32m+[m[32mexport type RelationOptions = {[m
   /**[m
    * Type of the relation {@link RelationType}[m
    */[m
   type: RelationType;[m
 [m
[31m-  /**[m
[31m-   * Relation class name. For example, Category, Department[m
[31m-   */[m
[31m-  target: T;[m
[32m+[m[32m  // /**[m
[32m+[m[32m  //  * Relation class name. For example, Category, Department[m
[32m+[m[32m  //  */[m
[32m+[m[32m  // target: T;[m
 [m
   required?: boolean;[m
 [m
[36m@@ -21,5 +26,5 @@[m [mexport type RelationOptions<T extends string = string, Model = unknown> = {[m
    * Model options of the relation class[m
    * @internal[m
    */[m
[31m-  model?: Model;[m
[32m+[m[32m  model: Model;[m
 };[m
